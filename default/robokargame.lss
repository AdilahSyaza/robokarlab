
robokargame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  00001274  00001308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000038b  0080021a  0080021a  00001422  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001422  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001478  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000147e  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083e  00000000  00000000  00002a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a59  00000000  00000000  0000327c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00003cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062f  00000000  00000000  00003d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e8  00000000  00000000  0000437b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00004463  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e7       	ldi	r30, 0x74	; 116
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 3a       	cpi	r26, 0xA5	; 165
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ac 08 	call	0x1158	; 0x1158 <main>
      9e:	0c 94 38 09 	jmp	0x1270	; 0x1270 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CheckCollision>:
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ) /* obstacle? */
     myrobot.obstacle = 1; /* signal obstacle present */
      a6:	c1 e0       	ldi	r28, 0x01	; 1
/*------High pririority task----------*/
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ) /* obstacle? */
      a8:	0e 94 75 02 	call	0x4ea	; 0x4ea <robo_proxSensor>
      ac:	01 97       	sbiw	r24, 0x01	; 1
      ae:	51 f4       	brne	.+20     	; 0xc4 <CheckCollision+0x1e>
     myrobot.obstacle = 1; /* signal obstacle present */
      b0:	c0 93 9e 02 	sts	0x029E, r28	; 0x80029e <myrobot+0x4>
 else
     myrobot.obstacle = 0; /* signal no obstacle */

 OSTimeDlyHMSM(0, 0, 0, 100); /* Task period ~ 100 ms */
      b4:	24 e6       	ldi	r18, 0x64	; 100
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	40 e0       	ldi	r20, 0x00	; 0
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 41 08 	call	0x1082	; 0x1082 <OSTimeDlyHMSM>
/*------High pririority task----------*/
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ) /* obstacle? */
      c2:	f2 cf       	rjmp	.-28     	; 0xa8 <CheckCollision+0x2>
     myrobot.obstacle = 1; /* signal obstacle present */
 else
     myrobot.obstacle = 0; /* signal no obstacle */
      c4:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <myrobot+0x4>
      c8:	f5 cf       	rjmp	.-22     	; 0xb4 <CheckCollision+0xe>

000000ca <CntrlMotors>:

 for(;;)
 {
  speed_r = myrobot.rspeed;
  speed_l = myrobot.lspeed;
  robo_motorSpeed(speed_l, speed_r);
      ca:	60 91 9a 02 	lds	r22, 0x029A	; 0x80029a <myrobot>
      ce:	70 91 9b 02 	lds	r23, 0x029B	; 0x80029b <myrobot+0x1>
      d2:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <myrobot+0x2>
      d6:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <myrobot+0x3>
      da:	0e 94 1a 02 	call	0x434	; 0x434 <robo_motorSpeed>
  OSTimeDlyHMSM(0, 0, 0, 10); /* Task period ~ 250 ms */
      de:	2a e0       	ldi	r18, 0x0A	; 10
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 41 08 	call	0x1082	; 0x1082 <OSTimeDlyHMSM>
      ec:	ee cf       	rjmp	.-36     	; 0xca <CntrlMotors>

000000ee <Navig>:
  

	// for light sensor
	  if (robo_lightSensor() > 80) /* it is too bright, I'm photophobia */
	  {
	   myrobot.rspeed = -35; /* turn right to avoid */
      ee:	0d ed       	ldi	r16, 0xDD	; 221
      f0:	1f ef       	ldi	r17, 0xFF	; 255
	   myrobot.lspeed = 80;
      f2:	c0 e5       	ldi	r28, 0x50	; 80
      f4:	d0 e0       	ldi	r29, 0x00	; 0


		//OSTimeDlyHMSM(0, 0, 0, 20);

	  }else{
	  	myrobot.rspeed = 50; 
      f6:	82 e3       	ldi	r24, 0x32	; 50
      f8:	c8 2e       	mov	r12, r24
      fa:	d1 2c       	mov	r13, r1
		if(count>=50){
			myrobot.rspeed= 70;
			myrobot.lspeed = 50;
			// count = 0;
		} else {
			myrobot.rspeed = -50; 
      fc:	9e ec       	ldi	r25, 0xCE	; 206
      fe:	e9 2e       	mov	r14, r25
     100:	ff 24       	eor	r15, r15
     102:	fa 94       	dec	r15
	    	myrobot.lspeed = -40;
     104:	28 ed       	ldi	r18, 0xD8	; 216
     106:	a2 2e       	mov	r10, r18
     108:	bb 24       	eor	r11, r11
     10a:	ba 94       	dec	r11
	   myrobot.lspeed = 80; /* corner right */
	  }else if (robo_lineSensor() == 0)
	  {
	  	count+=1;
		if(count>=50){
			myrobot.rspeed= 70;
     10c:	36 e4       	ldi	r19, 0x46	; 70
     10e:	23 2e       	mov	r2, r19
     110:	31 2c       	mov	r3, r1
	   myrobot.lspeed = 80; /* turn right */

	  }else if (robo_lineSensor() == 6)
	  {

	    myrobot.rspeed = 65; 
     112:	41 e4       	ldi	r20, 0x41	; 65
     114:	44 2e       	mov	r4, r20
     116:	51 2c       	mov	r5, r1
	   myrobot.lspeed = -30; /* corner left */
     118:	52 ee       	ldi	r21, 0xE2	; 226
     11a:	65 2e       	mov	r6, r21
     11c:	77 24       	eor	r7, r7
     11e:	7a 94       	dec	r7
   myrobot.lspeed = -LOW_SPEED;
  }else{
  	  if (robo_lineSensor() == 2) /* go straight */
	  {
	   count = 0;
	   myrobot.rspeed = 60;
     120:	6c e3       	ldi	r22, 0x3C	; 60
     122:	86 2e       	mov	r8, r22
     124:	91 2c       	mov	r9, r1
void Navig (void *data)
{

 for (;;)
 {
  if (myrobot.obstacle == 1) /* If blocked then reverse */
     126:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <myrobot+0x4>
     12a:	81 30       	cpi	r24, 0x01	; 1
     12c:	81 f4       	brne	.+32     	; 0x14e <Navig+0x60>
  {
   myrobot.rspeed = -LOW_SPEED; /* REVERSE */
     12e:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     132:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
   myrobot.lspeed = -LOW_SPEED;
     136:	10 93 9d 02 	sts	0x029D, r17	; 0x80029d <myrobot+0x3>
     13a:	00 93 9c 02 	sts	0x029C, r16	; 0x80029c <myrobot+0x2>
	  	
	  }
  }
  

	OSTimeDlyHMSM(0, 0, 0, 10);
     13e:	2a e0       	ldi	r18, 0x0A	; 10
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	40 e0       	ldi	r20, 0x00	; 0
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	0e 94 41 08 	call	0x1082	; 0x1082 <OSTimeDlyHMSM>
void Navig (void *data)
{

 for (;;)
 {
  if (myrobot.obstacle == 1) /* If blocked then reverse */
     14c:	ec cf       	rjmp	.-40     	; 0x126 <Navig+0x38>
  {
   myrobot.rspeed = -LOW_SPEED; /* REVERSE */
   myrobot.lspeed = -LOW_SPEED;
  }else{
  	  if (robo_lineSensor() == 2) /* go straight */
     14e:	0e 94 98 02 	call	0x530	; 0x530 <robo_lineSensor>
     152:	02 97       	sbiw	r24, 0x02	; 2
     154:	d1 f4       	brne	.+52     	; 0x18a <Navig+0x9c>
	  {
	   count = 0;
     156:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <count+0x1>
     15a:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <count>
	   myrobot.rspeed = 60;
     15e:	90 92 9b 02 	sts	0x029B, r9	; 0x80029b <myrobot+0x1>
     162:	80 92 9a 02 	sts	0x029A, r8	; 0x80029a <myrobot>
	   myrobot.lspeed = 60;
     166:	90 92 9d 02 	sts	0x029D, r9	; 0x80029d <myrobot+0x3>
     16a:	80 92 9c 02 	sts	0x029C, r8	; 0x80029c <myrobot+0x2>
	  
	  }
  

	// for light sensor
	  if (robo_lightSensor() > 80) /* it is too bright, I'm photophobia */
     16e:	0e 94 81 02 	call	0x502	; 0x502 <robo_lightSensor>
     172:	81 35       	cpi	r24, 0x51	; 81
     174:	91 05       	cpc	r25, r1
     176:	1c f3       	brlt	.-58     	; 0x13e <Navig+0x50>
	  {
	   myrobot.rspeed = -35; /* turn right to avoid */
     178:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     17c:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
	   myrobot.lspeed = 80;
     180:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <myrobot+0x3>
     184:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <myrobot+0x2>
     188:	da cf       	rjmp	.-76     	; 0x13e <Navig+0x50>
  	  if (robo_lineSensor() == 2) /* go straight */
	  {
	   count = 0;
	   myrobot.rspeed = 60;
	   myrobot.lspeed = 60;
	  }else if (robo_lineSensor() == 4)
     18a:	0e 94 98 02 	call	0x530	; 0x530 <robo_lineSensor>
     18e:	04 97       	sbiw	r24, 0x04	; 4
     190:	69 f4       	brne	.+26     	; 0x1ac <Navig+0xbe>
	  {
	   count = 0;
     192:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <count+0x1>
     196:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <count>
	    myrobot.rspeed = 80 ;/* turn left */
     19a:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     19e:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
	   myrobot.lspeed =  -50;
     1a2:	f0 92 9d 02 	sts	0x029D, r15	; 0x80029d <myrobot+0x3>
     1a6:	e0 92 9c 02 	sts	0x029C, r14	; 0x80029c <myrobot+0x2>
     1aa:	e1 cf       	rjmp	.-62     	; 0x16e <Navig+0x80>
	  }else if (robo_lineSensor() == 1)
     1ac:	0e 94 98 02 	call	0x530	; 0x530 <robo_lineSensor>
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	49 f4       	brne	.+18     	; 0x1c6 <Navig+0xd8>
	  {

	    myrobot.rspeed = -50; 
     1b4:	f0 92 9b 02 	sts	0x029B, r15	; 0x80029b <myrobot+0x1>
     1b8:	e0 92 9a 02 	sts	0x029A, r14	; 0x80029a <myrobot>

		//OSTimeDlyHMSM(0, 0, 0, 20);

	  }else{
	  	myrobot.rspeed = 50; 
	   	myrobot.lspeed = 80; /* bias left */
     1bc:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <myrobot+0x3>
     1c0:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <myrobot+0x2>
     1c4:	d4 cf       	rjmp	.-88     	; 0x16e <Navig+0x80>
	  {

	    myrobot.rspeed = -50; 
	   myrobot.lspeed = 80; /* turn right */

	  }else if (robo_lineSensor() == 6)
     1c6:	0e 94 98 02 	call	0x530	; 0x530 <robo_lineSensor>
     1ca:	06 97       	sbiw	r24, 0x06	; 6
     1cc:	49 f4       	brne	.+18     	; 0x1e0 <Navig+0xf2>
	  {

	    myrobot.rspeed = 65; 
     1ce:	50 92 9b 02 	sts	0x029B, r5	; 0x80029b <myrobot+0x1>
     1d2:	40 92 9a 02 	sts	0x029A, r4	; 0x80029a <myrobot>
	   myrobot.lspeed = -30; /* corner left */
     1d6:	70 92 9d 02 	sts	0x029D, r7	; 0x80029d <myrobot+0x3>
     1da:	60 92 9c 02 	sts	0x029C, r6	; 0x80029c <myrobot+0x2>
     1de:	c7 cf       	rjmp	.-114    	; 0x16e <Navig+0x80>

	  }else if (robo_lineSensor() == 3)
     1e0:	0e 94 98 02 	call	0x530	; 0x530 <robo_lineSensor>
     1e4:	03 97       	sbiw	r24, 0x03	; 3
     1e6:	49 f4       	brne	.+18     	; 0x1fa <Navig+0x10c>
	  {
	    count = 0;
     1e8:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <count+0x1>
     1ec:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <count>
	    myrobot.rspeed = -40; 
     1f0:	b0 92 9b 02 	sts	0x029B, r11	; 0x80029b <myrobot+0x1>
     1f4:	a0 92 9a 02 	sts	0x029A, r10	; 0x80029a <myrobot>
     1f8:	e1 cf       	rjmp	.-62     	; 0x1bc <Navig+0xce>
	   myrobot.lspeed = 80; /* corner right */
	  }else if (robo_lineSensor() == 0)
     1fa:	0e 94 98 02 	call	0x530	; 0x530 <robo_lineSensor>
     1fe:	89 2b       	or	r24, r25
     200:	e9 f4       	brne	.+58     	; 0x23c <Navig+0x14e>
	  {
	  	count+=1;
     202:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <count>
     206:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <count+0x1>
     20a:	01 96       	adiw	r24, 0x01	; 1
     20c:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <count+0x1>
     210:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <count>
		if(count>=50){
     214:	c2 97       	sbiw	r24, 0x32	; 50
     216:	4c f0       	brlt	.+18     	; 0x22a <Navig+0x13c>
			myrobot.rspeed= 70;
     218:	30 92 9b 02 	sts	0x029B, r3	; 0x80029b <myrobot+0x1>
     21c:	20 92 9a 02 	sts	0x029A, r2	; 0x80029a <myrobot>
			myrobot.lspeed = 50;
     220:	d0 92 9d 02 	sts	0x029D, r13	; 0x80029d <myrobot+0x3>
     224:	c0 92 9c 02 	sts	0x029C, r12	; 0x80029c <myrobot+0x2>
     228:	a2 cf       	rjmp	.-188    	; 0x16e <Navig+0x80>
			// count = 0;
		} else {
			myrobot.rspeed = -50; 
     22a:	f0 92 9b 02 	sts	0x029B, r15	; 0x80029b <myrobot+0x1>
     22e:	e0 92 9a 02 	sts	0x029A, r14	; 0x80029a <myrobot>
	    	myrobot.lspeed = -40;
     232:	b0 92 9d 02 	sts	0x029D, r11	; 0x80029d <myrobot+0x3>
     236:	a0 92 9c 02 	sts	0x029C, r10	; 0x80029c <myrobot+0x2>
     23a:	99 cf       	rjmp	.-206    	; 0x16e <Navig+0x80>


		//OSTimeDlyHMSM(0, 0, 0, 20);

	  }else{
	  	myrobot.rspeed = 50; 
     23c:	d0 92 9b 02 	sts	0x029B, r13	; 0x80029b <myrobot+0x1>
     240:	c0 92 9a 02 	sts	0x029A, r12	; 0x80029a <myrobot>
     244:	bb cf       	rjmp	.-138    	; 0x1bc <Navig+0xce>

00000246 <TaskStart>:


/*------Highest pririority task----------*/
/* Create all other tasks here */
void TaskStart( void *data )
{
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	00 d0       	rcall	.+0      	; 0x24c <TaskStart+0x6>
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62
 OS_ticks_init(); /* enable RTOS timer tick */
     250:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <OS_ticks_init>
	int  counter;
 OSTaskCreate(CheckCollision , /* Task function */
     254:	22 e0       	ldi	r18, 0x02	; 2
     256:	49 e9       	ldi	r20, 0x99	; 153
     258:	52 e0       	ldi	r21, 0x02	; 2
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	83 e5       	ldi	r24, 0x53	; 83
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 f0 06 	call	0xde0	; 0xde0 <OSTaskCreate>
 (void *)0, /* nothing passed to task */
 (void *)&ChkCollideStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_CHKCOLLIDE_PRIO); /* priority of task */

 OSTaskCreate(CntrlMotors , /* Task function */
     266:	23 e0       	ldi	r18, 0x03	; 3
     268:	4e e1       	ldi	r20, 0x1E	; 30
     26a:	53 e0       	ldi	r21, 0x03	; 3
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	85 e6       	ldi	r24, 0x65	; 101
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 f0 06 	call	0xde0	; 0xde0 <OSTaskCreate>
 (void *)0, /* nothing passed to task */
 (void *)&CtrlmotorStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_CTRLMOTOR_PRIO); /* priority of task */

 OSTaskCreate(Navig, /* Task function */
     278:	24 e0       	ldi	r18, 0x04	; 4
     27a:	40 e2       	ldi	r20, 0x20	; 32
     27c:	54 e0       	ldi	r21, 0x04	; 4
     27e:	be 01       	movw	r22, r28
     280:	6f 5f       	subi	r22, 0xFF	; 255
     282:	7f 4f       	sbci	r23, 0xFF	; 255
     284:	87 e7       	ldi	r24, 0x77	; 119
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 f0 06 	call	0xde0	; 0xde0 <OSTaskCreate>
 TASK_NAVIG_PRIO); /* priority of task */

 while(1)
 {
  OSTimeDlyHMSM(0, 0, 5, 0); /* Task period ~ 5 secs, argument position: HOURS, MINUTES, SECONDS, and MILLISECONDS S*/ 
  robo_LED_toggle(); /* Show that we are alive */
     28c:	11 e0       	ldi	r17, 0x01	; 1
 (void *)&NavigStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_NAVIG_PRIO); /* priority of task */

 while(1)
 {
  OSTimeDlyHMSM(0, 0, 5, 0); /* Task period ~ 5 secs, argument position: HOURS, MINUTES, SECONDS, and MILLISECONDS S*/ 
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	45 e0       	ldi	r20, 0x05	; 5
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	0e 94 41 08 	call	0x1082	; 0x1082 <OSTimeDlyHMSM>
  robo_LED_toggle(); /* Show that we are alive */
     29c:	85 b1       	in	r24, 0x05	; 5
     29e:	81 27       	eor	r24, r17
     2a0:	85 b9       	out	0x05, r24	; 5
     2a2:	f5 cf       	rjmp	.-22     	; 0x28e <TaskStart+0x48>

000002a4 <ADC_init>:
     2a4:	80 e4       	ldi	r24, 0x40	; 64
     2a6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     2aa:	86 e8       	ldi	r24, 0x86	; 134
     2ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     2b0:	08 95       	ret

000002b2 <ADC_read>:
     2b2:	f8 94       	cli
     2b4:	80 64       	ori	r24, 0x40	; 64
     2b6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     2ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     2be:	80 64       	ori	r24, 0x40	; 64
     2c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     2c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     2c8:	84 ff       	sbrs	r24, 4
     2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <ADC_read+0x12>
     2cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     2d0:	80 61       	ori	r24, 0x10	; 16
     2d2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     2d6:	78 94       	sei
     2d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     2dc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     2e0:	93 70       	andi	r25, 0x03	; 3
     2e2:	08 95       	ret

000002e4 <PWM8_write>:
     2e4:	81 11       	cpse	r24, r1
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <PWM8_write+0xe>
     2e8:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     2ec:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     2f0:	08 95       	ret
     2f2:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     2f6:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     2fa:	08 95       	ret

000002fc <motor_init>:
     2fc:	8a b1       	in	r24, 0x0a	; 10
     2fe:	80 6f       	ori	r24, 0xF0	; 240
     300:	8a b9       	out	0x0a, r24	; 10
     302:	8b b1       	in	r24, 0x0b	; 11
     304:	8f 70       	andi	r24, 0x0F	; 15
     306:	8b b9       	out	0x0b, r24	; 11
     308:	81 ea       	ldi	r24, 0xA1	; 161
     30a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     30e:	83 e0       	ldi	r24, 0x03	; 3
     310:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     314:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     318:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     31c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     320:	a8 e8       	ldi	r26, 0x88	; 136
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	1c 92       	st	X, r1
     326:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     32a:	ea e8       	ldi	r30, 0x8A	; 138
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	10 82       	st	Z, r1
     330:	84 b1       	in	r24, 0x04	; 4
     332:	86 60       	ori	r24, 0x06	; 6
     334:	84 b9       	out	0x04, r24	; 4
     336:	11 96       	adiw	r26, 0x01	; 1
     338:	1c 92       	st	X, r1
     33a:	1e 92       	st	-X, r1
     33c:	11 82       	std	Z+1, r1	; 0x01
     33e:	10 82       	st	Z, r1
     340:	08 95       	ret

00000342 <motor_set_speed>:
     342:	77 ff       	sbrs	r23, 7
     344:	02 c0       	rjmp	.+4      	; 0x34a <motor_set_speed+0x8>
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	65 36       	cpi	r22, 0x65	; 101
     34c:	71 05       	cpc	r23, r1
     34e:	14 f0       	brlt	.+4      	; 0x354 <motor_set_speed+0x12>
     350:	64 e6       	ldi	r22, 0x64	; 100
     352:	70 e0       	ldi	r23, 0x00	; 0
     354:	9b 01       	movw	r18, r22
     356:	22 0f       	add	r18, r18
     358:	33 1f       	adc	r19, r19
     35a:	75 95       	asr	r23
     35c:	67 95       	ror	r22
     35e:	62 0f       	add	r22, r18
     360:	73 1f       	adc	r23, r19
     362:	81 11       	cpse	r24, r1
     364:	09 c0       	rjmp	.+18     	; 0x378 <motor_set_speed+0x36>
     366:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     36a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     36e:	70 93 22 04 	sts	0x0422, r23	; 0x800422 <rightWst+0x1>
     372:	60 93 21 04 	sts	0x0421, r22	; 0x800421 <rightWst>
     376:	08 95       	ret
     378:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     37c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     380:	70 93 26 04 	sts	0x0426, r23	; 0x800426 <leftWst+0x1>
     384:	60 93 25 04 	sts	0x0425, r22	; 0x800425 <leftWst>
     388:	08 95       	ret

0000038a <motor_set_dir>:
     38a:	cf 93       	push	r28
     38c:	c6 2f       	mov	r28, r22
     38e:	26 2f       	mov	r18, r22
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	81 11       	cpse	r24, r1
     394:	2b c0       	rjmp	.+86     	; 0x3ec <motor_set_dir+0x62>
     396:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <rightWst+0x2>
     39a:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <rightWst+0x3>
     39e:	82 17       	cp	r24, r18
     3a0:	93 07       	cpc	r25, r19
     3a2:	59 f0       	breq	.+22     	; 0x3ba <motor_set_dir+0x30>
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	0e 94 a1 01 	call	0x342	; 0x342 <motor_set_speed>
     3ae:	8f e9       	ldi	r24, 0x9F	; 159
     3b0:	9f e0       	ldi	r25, 0x0F	; 15
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <motor_set_dir+0x28>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <motor_set_dir+0x2e>
     3b8:	00 00       	nop
     3ba:	c1 11       	cpse	r28, r1
     3bc:	0e c0       	rjmp	.+28     	; 0x3da <motor_set_dir+0x50>
     3be:	5e 98       	cbi	0x0b, 6	; 11
     3c0:	5f 9a       	sbi	0x0b, 7	; 11
     3c2:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <rightWst+0x3>
     3c6:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <rightWst+0x2>
     3ca:	8f e3       	ldi	r24, 0x3F	; 63
     3cc:	9c e9       	ldi	r25, 0x9C	; 156
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <motor_set_dir+0x44>
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <motor_set_dir+0x4a>
     3d4:	00 00       	nop
     3d6:	cf 91       	pop	r28
     3d8:	08 95       	ret
     3da:	5e 9a       	sbi	0x0b, 6	; 11
     3dc:	5f 98       	cbi	0x0b, 7	; 11
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <rightWst+0x3>
     3e6:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <rightWst+0x2>
     3ea:	ef cf       	rjmp	.-34     	; 0x3ca <motor_set_dir+0x40>
     3ec:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <leftWst+0x2>
     3f0:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <leftWst+0x3>
     3f4:	82 17       	cp	r24, r18
     3f6:	93 07       	cpc	r25, r19
     3f8:	59 f0       	breq	.+22     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	0e 94 a1 01 	call	0x342	; 0x342 <motor_set_speed>
     404:	8f e9       	ldi	r24, 0x9F	; 159
     406:	9f e0       	ldi	r25, 0x0F	; 15
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	f1 f7       	brne	.-4      	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
     40c:	00 c0       	rjmp	.+0      	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
     40e:	00 00       	nop
     410:	c1 11       	cpse	r28, r1
     412:	07 c0       	rjmp	.+14     	; 0x422 <__FUSE_REGION_LENGTH__+0x22>
     414:	5c 9a       	sbi	0x0b, 4	; 11
     416:	5d 98       	cbi	0x0b, 5	; 11
     418:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <leftWst+0x3>
     41c:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <leftWst+0x2>
     420:	d4 cf       	rjmp	.-88     	; 0x3ca <motor_set_dir+0x40>
     422:	5c 98       	cbi	0x0b, 4	; 11
     424:	5d 9a       	sbi	0x0b, 5	; 11
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <leftWst+0x3>
     42e:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <leftWst+0x2>
     432:	cb cf       	rjmp	.-106    	; 0x3ca <motor_set_dir+0x40>

00000434 <robo_motorSpeed>:
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	ec 01       	movw	r28, r24
     43e:	8b 01       	movw	r16, r22
     440:	97 ff       	sbrs	r25, 7
     442:	1c c0       	rjmp	.+56     	; 0x47c <robo_motorSpeed+0x48>
     444:	61 e0       	ldi	r22, 0x01	; 1
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 c5 01 	call	0x38a	; 0x38a <motor_set_dir>
     44c:	d1 95       	neg	r29
     44e:	c1 95       	neg	r28
     450:	d1 09       	sbc	r29, r1
     452:	17 ff       	sbrs	r17, 7
     454:	18 c0       	rjmp	.+48     	; 0x486 <robo_motorSpeed+0x52>
     456:	61 e0       	ldi	r22, 0x01	; 1
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	0e 94 c5 01 	call	0x38a	; 0x38a <motor_set_dir>
     45e:	11 95       	neg	r17
     460:	01 95       	neg	r16
     462:	11 09       	sbc	r17, r1
     464:	b8 01       	movw	r22, r16
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	0e 94 a1 01 	call	0x342	; 0x342 <motor_set_speed>
     46c:	be 01       	movw	r22, r28
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
     478:	0c 94 a1 01 	jmp	0x342	; 0x342 <motor_set_speed>
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	0e 94 c5 01 	call	0x38a	; 0x38a <motor_set_dir>
     484:	e6 cf       	rjmp	.-52     	; 0x452 <robo_motorSpeed+0x1e>
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	0e 94 c5 01 	call	0x38a	; 0x38a <motor_set_dir>
     48e:	ea cf       	rjmp	.-44     	; 0x464 <robo_motorSpeed+0x30>

00000490 <USART0_init>:
     490:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     494:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     498:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     49c:	88 e1       	ldi	r24, 0x18	; 24
     49e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     4a2:	86 e0       	ldi	r24, 0x06	; 6
     4a4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     4a8:	08 95       	ret

000004aa <cputchar>:
     4aa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     4ae:	95 ff       	sbrs	r25, 5
     4b0:	fc cf       	rjmp	.-8      	; 0x4aa <cputchar>
     4b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     4b6:	08 95       	ret

000004b8 <cgetchar>:
     4b8:	cf 93       	push	r28
     4ba:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     4be:	87 ff       	sbrs	r24, 7
     4c0:	fc cf       	rjmp	.-8      	; 0x4ba <cgetchar+0x2>
     4c2:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     4c6:	8c 2f       	mov	r24, r28
     4c8:	0e 94 55 02 	call	0x4aa	; 0x4aa <cputchar>
     4cc:	8c 2f       	mov	r24, r28
     4ce:	cf 91       	pop	r28
     4d0:	08 95       	ret

000004d2 <cputs>:
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	ec 01       	movw	r28, r24
     4d8:	89 91       	ld	r24, Y+
     4da:	81 11       	cpse	r24, r1
     4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <cputs+0x12>
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	08 95       	ret
     4e4:	0e 94 55 02 	call	0x4aa	; 0x4aa <cputchar>
     4e8:	f7 cf       	rjmp	.-18     	; 0x4d8 <cputs+0x6>

000004ea <robo_proxSensor>:
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	0e 94 59 01 	call	0x2b2	; 0x2b2 <ADC_read>
     4f0:	21 e0       	ldi	r18, 0x01	; 1
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	84 36       	cpi	r24, 0x64	; 100
     4f6:	91 05       	cpc	r25, r1
     4f8:	10 f0       	brcs	.+4      	; 0x4fe <robo_proxSensor+0x14>
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	c9 01       	movw	r24, r18
     500:	08 95       	ret

00000502 <robo_lightSensor>:
     502:	84 e0       	ldi	r24, 0x04	; 4
     504:	0e 94 59 01 	call	0x2b2	; 0x2b2 <ADC_read>
     508:	2b ef       	ldi	r18, 0xFB	; 251
     50a:	ac 01       	movw	r20, r24
     50c:	24 03       	mulsu	r18, r20
     50e:	c0 01       	movw	r24, r0
     510:	25 9f       	mul	r18, r21
     512:	90 0d       	add	r25, r0
     514:	11 24       	eor	r1, r1
     516:	85 50       	subi	r24, 0x05	; 5
     518:	9c 4e       	sbci	r25, 0xEC	; 236
     51a:	63 e3       	ldi	r22, 0x33	; 51
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__divmodhi4>
     522:	cb 01       	movw	r24, r22
     524:	65 36       	cpi	r22, 0x65	; 101
     526:	71 05       	cpc	r23, r1
     528:	14 f0       	brlt	.+4      	; 0x52e <robo_lightSensor+0x2c>
     52a:	84 e6       	ldi	r24, 0x64	; 100
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	08 95       	ret

00000530 <robo_lineSensor>:
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	c0 e0       	ldi	r28, 0x00	; 0
     536:	d1 e0       	ldi	r29, 0x01	; 1
     538:	cc 0f       	add	r28, r28
     53a:	8d 2f       	mov	r24, r29
     53c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <ADC_read>
     540:	8c 32       	cpi	r24, 0x2C	; 44
     542:	91 40       	sbci	r25, 0x01	; 1
     544:	0c f4       	brge	.+2      	; 0x548 <robo_lineSensor+0x18>
     546:	c1 60       	ori	r28, 0x01	; 1
     548:	df 5f       	subi	r29, 0xFF	; 255
     54a:	d4 30       	cpi	r29, 0x04	; 4
     54c:	a9 f7       	brne	.-22     	; 0x538 <robo_lineSensor+0x8>
     54e:	8c 2f       	mov	r24, r28
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	08 95       	ret

00000558 <robo_bumpSensorR>:
     558:	83 b1       	in	r24, 0x03	; 3
     55a:	82 95       	swap	r24
     55c:	8f 70       	andi	r24, 0x0F	; 15
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	89 27       	eor	r24, r25
     562:	81 70       	andi	r24, 0x01	; 1
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	08 95       	ret

00000568 <robo_bumpSensorL>:
     568:	83 b1       	in	r24, 0x03	; 3
     56a:	86 95       	lsr	r24
     56c:	86 95       	lsr	r24
     56e:	86 95       	lsr	r24
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	89 27       	eor	r24, r25
     574:	81 70       	andi	r24, 0x01	; 1
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	08 95       	ret

0000057a <robo_Honk>:
     57a:	5b 9a       	sbi	0x0b, 3	; 11
     57c:	2f ef       	ldi	r18, 0xFF	; 255
     57e:	85 ea       	ldi	r24, 0xA5	; 165
     580:	9e e0       	ldi	r25, 0x0E	; 14
     582:	21 50       	subi	r18, 0x01	; 1
     584:	80 40       	sbci	r24, 0x00	; 0
     586:	90 40       	sbci	r25, 0x00	; 0
     588:	e1 f7       	brne	.-8      	; 0x582 <robo_Honk+0x8>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <robo_Honk+0x12>
     58c:	00 00       	nop
     58e:	5b 98       	cbi	0x0b, 3	; 11
     590:	2f ef       	ldi	r18, 0xFF	; 255
     592:	85 ea       	ldi	r24, 0xA5	; 165
     594:	9e e0       	ldi	r25, 0x0E	; 14
     596:	21 50       	subi	r18, 0x01	; 1
     598:	80 40       	sbci	r24, 0x00	; 0
     59a:	90 40       	sbci	r25, 0x00	; 0
     59c:	e1 f7       	brne	.-8      	; 0x596 <robo_Honk+0x1c>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <robo_Honk+0x26>
     5a0:	00 00       	nop
     5a2:	08 95       	ret

000005a4 <robo_checkBattery>:
     5a4:	85 e0       	ldi	r24, 0x05	; 5
     5a6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <ADC_read>
     5aa:	84 3f       	cpi	r24, 0xF4	; 244
     5ac:	91 40       	sbci	r25, 0x01	; 1
     5ae:	10 f4       	brcc	.+4      	; 0x5b4 <robo_checkBattery+0x10>
     5b0:	28 9a       	sbi	0x05, 0	; 5
     5b2:	08 95       	ret
     5b4:	28 98       	cbi	0x05, 0	; 5
     5b6:	08 95       	ret

000005b8 <robo_goPressed>:
     5b8:	89 b1       	in	r24, 0x09	; 9
     5ba:	82 fb       	bst	r24, 2
     5bc:	88 27       	eor	r24, r24
     5be:	80 f9       	bld	r24, 0
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	89 27       	eor	r24, r25
     5c4:	08 95       	ret

000005c6 <robo_wait4goPress>:
     5c6:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <robo_goPressed>
     5ca:	88 23       	and	r24, r24
     5cc:	e1 f3       	breq	.-8      	; 0x5c6 <robo_wait4goPress>
     5ce:	08 95       	ret

000005d0 <OS_ticks_init>:
     5d0:	f8 94       	cli
     5d2:	85 e0       	ldi	r24, 0x05	; 5
     5d4:	85 bd       	out	0x25, r24	; 37
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     5dc:	84 e6       	ldi	r24, 0x64	; 100
     5de:	86 bd       	out	0x26, r24	; 38
     5e0:	78 94       	sei
     5e2:	08 95       	ret

000005e4 <HAL_init>:
     5e4:	87 e6       	ldi	r24, 0x67	; 103
     5e6:	0e 94 48 02 	call	0x490	; 0x490 <USART0_init>
     5ea:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <ADC_init>

000005ee <robo_Setup>:
     5ee:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <HAL_init>
     5f2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <motor_init>
     5f6:	53 9a       	sbi	0x0a, 3	; 10
     5f8:	5b 98       	cbi	0x0b, 3	; 11
     5fa:	20 9a       	sbi	0x04, 0	; 4
     5fc:	52 98       	cbi	0x0a, 2	; 10
     5fe:	5a 9a       	sbi	0x0b, 2	; 11
     600:	24 98       	cbi	0x04, 4	; 4
     602:	23 98       	cbi	0x04, 3	; 4
     604:	85 b1       	in	r24, 0x05	; 5
     606:	88 61       	ori	r24, 0x18	; 24
     608:	85 b9       	out	0x05, r24	; 5
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	0e 94 c5 01 	call	0x38a	; 0x38a <motor_set_dir>
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	0e 94 c5 01 	call	0x38a	; 0x38a <motor_set_dir>
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	0c 94 1a 02 	jmp	0x434	; 0x434 <robo_motorSpeed>

00000626 <cprintf>:
     626:	4f 92       	push	r4
     628:	5f 92       	push	r5
     62a:	6f 92       	push	r6
     62c:	7f 92       	push	r7
     62e:	8f 92       	push	r8
     630:	9f 92       	push	r9
     632:	af 92       	push	r10
     634:	bf 92       	push	r11
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	de 01       	movw	r26, r28
     64c:	53 96       	adiw	r26, 0x13	; 19
     64e:	ed 91       	ld	r30, X+
     650:	fd 91       	ld	r31, X+
     652:	8d 01       	movw	r16, r26
     654:	5a e0       	ldi	r21, 0x0A	; 10
     656:	65 2e       	mov	r6, r21
     658:	71 2c       	mov	r7, r1
     65a:	80 81       	ld	r24, Z
     65c:	85 32       	cpi	r24, 0x25	; 37
     65e:	81 f4       	brne	.+32     	; 0x680 <cprintf+0x5a>
     660:	5f 01       	movw	r10, r30
     662:	82 e0       	ldi	r24, 0x02	; 2
     664:	a8 0e       	add	r10, r24
     666:	b1 1c       	adc	r11, r1
     668:	81 81       	ldd	r24, Z+1	; 0x01
     66a:	84 36       	cpi	r24, 0x64	; 100
     66c:	09 f4       	brne	.+2      	; 0x670 <cprintf+0x4a>
     66e:	50 c0       	rjmp	.+160    	; 0x710 <cprintf+0xea>
     670:	90 f4       	brcc	.+36     	; 0x696 <cprintf+0x70>
     672:	83 36       	cpi	r24, 0x63	; 99
     674:	61 f4       	brne	.+24     	; 0x68e <cprintf+0x68>
     676:	f8 01       	movw	r30, r16
     678:	80 81       	ld	r24, Z
     67a:	0e 5f       	subi	r16, 0xFE	; 254
     67c:	1f 4f       	sbci	r17, 0xFF	; 255
     67e:	07 c0       	rjmp	.+14     	; 0x68e <cprintf+0x68>
     680:	88 23       	and	r24, r24
     682:	09 f4       	brne	.+2      	; 0x686 <cprintf+0x60>
     684:	5d c0       	rjmp	.+186    	; 0x740 <cprintf+0x11a>
     686:	5f 01       	movw	r10, r30
     688:	9f ef       	ldi	r25, 0xFF	; 255
     68a:	a9 1a       	sub	r10, r25
     68c:	b9 0a       	sbc	r11, r25
     68e:	0e 94 55 02 	call	0x4aa	; 0x4aa <cputchar>
     692:	f5 01       	movw	r30, r10
     694:	e2 cf       	rjmp	.-60     	; 0x65a <cprintf+0x34>
     696:	83 37       	cpi	r24, 0x73	; 115
     698:	71 f1       	breq	.+92     	; 0x6f6 <cprintf+0xd0>
     69a:	30 e1       	ldi	r19, 0x10	; 16
     69c:	83 2e       	mov	r8, r19
     69e:	91 2c       	mov	r9, r1
     6a0:	e1 2c       	mov	r14, r1
     6a2:	40 e1       	ldi	r20, 0x10	; 16
     6a4:	f4 2e       	mov	r15, r20
     6a6:	88 37       	cpi	r24, 0x78	; 120
     6a8:	91 f7       	brne	.-28     	; 0x68e <cprintf+0x68>
     6aa:	f8 01       	movw	r30, r16
     6ac:	c0 80       	ld	r12, Z
     6ae:	d1 80       	ldd	r13, Z+1	; 0x01
     6b0:	0e 5f       	subi	r16, 0xFE	; 254
     6b2:	1f 4f       	sbci	r17, 0xFF	; 255
     6b4:	84 36       	cpi	r24, 0x64	; 100
     6b6:	59 f4       	brne	.+22     	; 0x6ce <cprintf+0xa8>
     6b8:	d7 fe       	sbrs	r13, 7
     6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <cprintf+0xa2>
     6bc:	d1 94       	neg	r13
     6be:	c1 94       	neg	r12
     6c0:	d1 08       	sbc	r13, r1
     6c2:	8d e2       	ldi	r24, 0x2D	; 45
     6c4:	0e 94 55 02 	call	0x4aa	; 0x4aa <cputchar>
     6c8:	ce 14       	cp	r12, r14
     6ca:	df 04       	cpc	r13, r15
     6cc:	48 f1       	brcs	.+82     	; 0x720 <cprintf+0xfa>
     6ce:	c6 01       	movw	r24, r12
     6d0:	b7 01       	movw	r22, r14
     6d2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__udivmodhi4>
     6d6:	2c 01       	movw	r4, r24
     6d8:	68 5f       	subi	r22, 0xF8	; 248
     6da:	7d 4f       	sbci	r23, 0xFD	; 253
     6dc:	fb 01       	movw	r30, r22
     6de:	80 81       	ld	r24, Z
     6e0:	0e 94 55 02 	call	0x4aa	; 0x4aa <cputchar>
     6e4:	62 01       	movw	r12, r4
     6e6:	c7 01       	movw	r24, r14
     6e8:	b4 01       	movw	r22, r8
     6ea:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__udivmodhi4>
     6ee:	7b 01       	movw	r14, r22
     6f0:	67 2b       	or	r22, r23
     6f2:	69 f7       	brne	.-38     	; 0x6ce <cprintf+0xa8>
     6f4:	ce cf       	rjmp	.-100    	; 0x692 <cprintf+0x6c>
     6f6:	f8 01       	movw	r30, r16
     6f8:	e0 80       	ld	r14, Z
     6fa:	f1 80       	ldd	r15, Z+1	; 0x01
     6fc:	0e 5f       	subi	r16, 0xFE	; 254
     6fe:	1f 4f       	sbci	r17, 0xFF	; 255
     700:	f7 01       	movw	r30, r14
     702:	81 91       	ld	r24, Z+
     704:	7f 01       	movw	r14, r30
     706:	88 23       	and	r24, r24
     708:	21 f2       	breq	.-120    	; 0x692 <cprintf+0x6c>
     70a:	0e 94 55 02 	call	0x4aa	; 0x4aa <cputchar>
     70e:	f8 cf       	rjmp	.-16     	; 0x700 <cprintf+0xda>
     710:	9a e0       	ldi	r25, 0x0A	; 10
     712:	89 2e       	mov	r8, r25
     714:	91 2c       	mov	r9, r1
     716:	20 e1       	ldi	r18, 0x10	; 16
     718:	e2 2e       	mov	r14, r18
     71a:	27 e2       	ldi	r18, 0x27	; 39
     71c:	f2 2e       	mov	r15, r18
     71e:	c5 cf       	rjmp	.-118    	; 0x6aa <cprintf+0x84>
     720:	c7 01       	movw	r24, r14
     722:	b3 01       	movw	r22, r6
     724:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__udivmodhi4>
     728:	7b 01       	movw	r14, r22
     72a:	62 30       	cpi	r22, 0x02	; 2
     72c:	71 05       	cpc	r23, r1
     72e:	60 f6       	brcc	.-104    	; 0x6c8 <cprintf+0xa2>
     730:	c6 01       	movw	r24, r12
     732:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__udivmodhi4>
     736:	fb 01       	movw	r30, r22
     738:	e8 5f       	subi	r30, 0xF8	; 248
     73a:	fd 4f       	sbci	r31, 0xFD	; 253
     73c:	80 81       	ld	r24, Z
     73e:	a7 cf       	rjmp	.-178    	; 0x68e <cprintf+0x68>
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	df 90       	pop	r13
     752:	cf 90       	pop	r12
     754:	bf 90       	pop	r11
     756:	af 90       	pop	r10
     758:	9f 90       	pop	r9
     75a:	8f 90       	pop	r8
     75c:	7f 90       	pop	r7
     75e:	6f 90       	pop	r6
     760:	5f 90       	pop	r5
     762:	4f 90       	pop	r4
     764:	08 95       	ret

00000766 <OSStartHighRdy>:
     766:	00 91 2a 04 	lds	r16, 0x042A	; 0x80042a <OSRunning>
     76a:	03 95       	inc	r16
     76c:	00 93 2a 04 	sts	0x042A, r16	; 0x80042a <OSRunning>
     770:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <OSTCBHighRdy>
     774:	f0 91 3b 04 	lds	r31, 0x043B	; 0x80043b <OSTCBHighRdy+0x1>
     778:	c1 91       	ld	r28, Z+
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	d1 91       	ld	r29, Z+
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f 91       	pop	r16
     782:	0f bf       	out	0x3f, r16	; 63
     784:	ff 91       	pop	r31
     786:	ef 91       	pop	r30
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	bf 91       	pop	r27
     78e:	af 91       	pop	r26
     790:	9f 91       	pop	r25
     792:	8f 91       	pop	r24
     794:	7f 91       	pop	r23
     796:	6f 91       	pop	r22
     798:	5f 91       	pop	r21
     79a:	4f 91       	pop	r20
     79c:	3f 91       	pop	r19
     79e:	2f 91       	pop	r18
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	ff 90       	pop	r15
     7a6:	ef 90       	pop	r14
     7a8:	df 90       	pop	r13
     7aa:	cf 90       	pop	r12
     7ac:	bf 90       	pop	r11
     7ae:	af 90       	pop	r10
     7b0:	9f 90       	pop	r9
     7b2:	8f 90       	pop	r8
     7b4:	7f 90       	pop	r7
     7b6:	6f 90       	pop	r6
     7b8:	5f 90       	pop	r5
     7ba:	4f 90       	pop	r4
     7bc:	3f 90       	pop	r3
     7be:	2f 90       	pop	r2
     7c0:	1f 90       	pop	r1
     7c2:	0f 90       	pop	r0
     7c4:	08 95       	ret

000007c6 <OSCtxSw>:
     7c6:	0f 92       	push	r0
     7c8:	1f 92       	push	r1
     7ca:	2f 92       	push	r2
     7cc:	3f 92       	push	r3
     7ce:	4f 92       	push	r4
     7d0:	5f 92       	push	r5
     7d2:	6f 92       	push	r6
     7d4:	7f 92       	push	r7
     7d6:	8f 92       	push	r8
     7d8:	9f 92       	push	r9
     7da:	af 92       	push	r10
     7dc:	bf 92       	push	r11
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	2f 93       	push	r18
     7ec:	3f 93       	push	r19
     7ee:	4f 93       	push	r20
     7f0:	5f 93       	push	r21
     7f2:	6f 93       	push	r22
     7f4:	7f 93       	push	r23
     7f6:	8f 93       	push	r24
     7f8:	9f 93       	push	r25
     7fa:	af 93       	push	r26
     7fc:	bf 93       	push	r27
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
     802:	ef 93       	push	r30
     804:	ff 93       	push	r31
     806:	0f b7       	in	r16, 0x3f	; 63
     808:	0f 93       	push	r16
     80a:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <OSTCBCur>
     80e:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <OSTCBCur+0x1>
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	c1 93       	st	Z+, r28
     816:	de b7       	in	r29, 0x3e	; 62
     818:	d1 93       	st	Z+, r29
     81a:	00 91 2f 04 	lds	r16, 0x042F	; 0x80042f <OSPrioHighRdy>
     81e:	00 93 30 04 	sts	0x0430, r16	; 0x800430 <OSPrioCur>
     822:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <OSTCBHighRdy>
     826:	f0 91 3b 04 	lds	r31, 0x043B	; 0x80043b <OSTCBHighRdy+0x1>
     82a:	e0 93 42 04 	sts	0x0442, r30	; 0x800442 <OSTCBCur>
     82e:	f0 93 43 04 	sts	0x0443, r31	; 0x800443 <OSTCBCur+0x1>
     832:	c1 91       	ld	r28, Z+
     834:	cd bf       	out	0x3d, r28	; 61
     836:	d1 91       	ld	r29, Z+
     838:	de bf       	out	0x3e, r29	; 62
     83a:	0f 91       	pop	r16
     83c:	0f bf       	out	0x3f, r16	; 63
     83e:	ff 91       	pop	r31
     840:	ef 91       	pop	r30
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	bf 91       	pop	r27
     848:	af 91       	pop	r26
     84a:	9f 91       	pop	r25
     84c:	8f 91       	pop	r24
     84e:	7f 91       	pop	r23
     850:	6f 91       	pop	r22
     852:	5f 91       	pop	r21
     854:	4f 91       	pop	r20
     856:	3f 91       	pop	r19
     858:	2f 91       	pop	r18
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	ff 90       	pop	r15
     860:	ef 90       	pop	r14
     862:	df 90       	pop	r13
     864:	cf 90       	pop	r12
     866:	bf 90       	pop	r11
     868:	af 90       	pop	r10
     86a:	9f 90       	pop	r9
     86c:	8f 90       	pop	r8
     86e:	7f 90       	pop	r7
     870:	6f 90       	pop	r6
     872:	5f 90       	pop	r5
     874:	4f 90       	pop	r4
     876:	3f 90       	pop	r3
     878:	2f 90       	pop	r2
     87a:	1f 90       	pop	r1
     87c:	0f 90       	pop	r0
     87e:	08 95       	ret

00000880 <OSIntCtxSw>:
     880:	00 91 2f 04 	lds	r16, 0x042F	; 0x80042f <OSPrioHighRdy>
     884:	00 93 30 04 	sts	0x0430, r16	; 0x800430 <OSPrioCur>
     888:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <OSTCBHighRdy>
     88c:	f0 91 3b 04 	lds	r31, 0x043B	; 0x80043b <OSTCBHighRdy+0x1>
     890:	e0 93 42 04 	sts	0x0442, r30	; 0x800442 <OSTCBCur>
     894:	f0 93 43 04 	sts	0x0443, r31	; 0x800443 <OSTCBCur+0x1>
     898:	c1 91       	ld	r28, Z+
     89a:	cd bf       	out	0x3d, r28	; 61
     89c:	d1 91       	ld	r29, Z+
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f 91       	pop	r16
     8a2:	0f bf       	out	0x3f, r16	; 63
     8a4:	ff 91       	pop	r31
     8a6:	ef 91       	pop	r30
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	bf 91       	pop	r27
     8ae:	af 91       	pop	r26
     8b0:	9f 91       	pop	r25
     8b2:	8f 91       	pop	r24
     8b4:	7f 91       	pop	r23
     8b6:	6f 91       	pop	r22
     8b8:	5f 91       	pop	r21
     8ba:	4f 91       	pop	r20
     8bc:	3f 91       	pop	r19
     8be:	2f 91       	pop	r18
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	df 90       	pop	r13
     8ca:	cf 90       	pop	r12
     8cc:	bf 90       	pop	r11
     8ce:	af 90       	pop	r10
     8d0:	9f 90       	pop	r9
     8d2:	8f 90       	pop	r8
     8d4:	7f 90       	pop	r7
     8d6:	6f 90       	pop	r6
     8d8:	5f 90       	pop	r5
     8da:	4f 90       	pop	r4
     8dc:	3f 90       	pop	r3
     8de:	2f 90       	pop	r2
     8e0:	1f 90       	pop	r1
     8e2:	0f 90       	pop	r0
     8e4:	08 95       	ret

000008e6 <OSTickISR>:
     8e6:	0f 92       	push	r0
     8e8:	1f 92       	push	r1
     8ea:	2f 92       	push	r2
     8ec:	3f 92       	push	r3
     8ee:	4f 92       	push	r4
     8f0:	5f 92       	push	r5
     8f2:	6f 92       	push	r6
     8f4:	7f 92       	push	r7
     8f6:	8f 92       	push	r8
     8f8:	9f 92       	push	r9
     8fa:	af 92       	push	r10
     8fc:	bf 92       	push	r11
     8fe:	cf 92       	push	r12
     900:	df 92       	push	r13
     902:	ef 92       	push	r14
     904:	ff 92       	push	r15
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	2f 93       	push	r18
     90c:	3f 93       	push	r19
     90e:	4f 93       	push	r20
     910:	5f 93       	push	r21
     912:	6f 93       	push	r22
     914:	7f 93       	push	r23
     916:	8f 93       	push	r24
     918:	9f 93       	push	r25
     91a:	af 93       	push	r26
     91c:	bf 93       	push	r27
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	ef 93       	push	r30
     924:	ff 93       	push	r31
     926:	0f b7       	in	r16, 0x3f	; 63
     928:	00 68       	ori	r16, 0x80	; 128
     92a:	0f 93       	push	r16
     92c:	00 91 41 04 	lds	r16, 0x0441	; 0x800441 <OSIntNesting>
     930:	03 95       	inc	r16
     932:	00 93 41 04 	sts	0x0441, r16	; 0x800441 <OSIntNesting>
     936:	01 30       	cpi	r16, 0x01	; 1
     938:	41 f4       	brne	.+16     	; 0x94a <_not_first_int>
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <OSTCBCur>
     942:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <OSTCBCur+0x1>
     946:	c1 93       	st	Z+, r28
     948:	d1 93       	st	Z+, r29

0000094a <_not_first_int>:
     94a:	04 e6       	ldi	r16, 0x64	; 100
     94c:	06 bd       	out	0x26, r16	; 38
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	1f 2e       	mov	r1, r31
     952:	78 94       	sei
     954:	0e 94 d6 05 	call	0xbac	; 0xbac <OSTimeTick>
     958:	00 00       	nop
     95a:	0e 94 49 05 	call	0xa92	; 0xa92 <OSIntExit>
     95e:	0f 91       	pop	r16
     960:	0f bf       	out	0x3f, r16	; 63
     962:	ff 91       	pop	r31
     964:	ef 91       	pop	r30
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	bf 91       	pop	r27
     96c:	af 91       	pop	r26
     96e:	9f 91       	pop	r25
     970:	8f 91       	pop	r24
     972:	7f 91       	pop	r23
     974:	6f 91       	pop	r22
     976:	5f 91       	pop	r21
     978:	4f 91       	pop	r20
     97a:	3f 91       	pop	r19
     97c:	2f 91       	pop	r18
     97e:	1f 91       	pop	r17
     980:	0f 91       	pop	r16
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	df 90       	pop	r13
     988:	cf 90       	pop	r12
     98a:	bf 90       	pop	r11
     98c:	af 90       	pop	r10
     98e:	9f 90       	pop	r9
     990:	8f 90       	pop	r8
     992:	7f 90       	pop	r7
     994:	6f 90       	pop	r6
     996:	5f 90       	pop	r5
     998:	4f 90       	pop	r4
     99a:	3f 90       	pop	r3
     99c:	2f 90       	pop	r2
     99e:	1f 90       	pop	r1
     9a0:	0f 90       	pop	r0
     9a2:	08 95       	ret

000009a4 <OSTaskStkInit>:
     9a4:	fa 01       	movw	r30, r20
     9a6:	80 83       	st	Z, r24
     9a8:	31 97       	sbiw	r30, 0x01	; 1
     9aa:	90 83       	st	Z, r25
     9ac:	31 97       	sbiw	r30, 0x01	; 1
     9ae:	10 82       	st	Z, r1
     9b0:	31 97       	sbiw	r30, 0x01	; 1
     9b2:	10 82       	st	Z, r1
     9b4:	31 97       	sbiw	r30, 0x01	; 1
     9b6:	10 82       	st	Z, r1
     9b8:	31 97       	sbiw	r30, 0x01	; 1
     9ba:	10 82       	st	Z, r1
     9bc:	31 97       	sbiw	r30, 0x01	; 1
     9be:	10 82       	st	Z, r1
     9c0:	31 97       	sbiw	r30, 0x01	; 1
     9c2:	10 82       	st	Z, r1
     9c4:	31 97       	sbiw	r30, 0x01	; 1
     9c6:	10 82       	st	Z, r1
     9c8:	31 97       	sbiw	r30, 0x01	; 1
     9ca:	10 82       	st	Z, r1
     9cc:	31 97       	sbiw	r30, 0x01	; 1
     9ce:	10 82       	st	Z, r1
     9d0:	31 97       	sbiw	r30, 0x01	; 1
     9d2:	10 82       	st	Z, r1
     9d4:	31 97       	sbiw	r30, 0x01	; 1
     9d6:	10 82       	st	Z, r1
     9d8:	31 97       	sbiw	r30, 0x01	; 1
     9da:	10 82       	st	Z, r1
     9dc:	31 97       	sbiw	r30, 0x01	; 1
     9de:	10 82       	st	Z, r1
     9e0:	31 97       	sbiw	r30, 0x01	; 1
     9e2:	10 82       	st	Z, r1
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	10 82       	st	Z, r1
     9e8:	31 97       	sbiw	r30, 0x01	; 1
     9ea:	10 82       	st	Z, r1
     9ec:	31 97       	sbiw	r30, 0x01	; 1
     9ee:	10 82       	st	Z, r1
     9f0:	31 97       	sbiw	r30, 0x01	; 1
     9f2:	10 82       	st	Z, r1
     9f4:	31 97       	sbiw	r30, 0x01	; 1
     9f6:	10 82       	st	Z, r1
     9f8:	31 97       	sbiw	r30, 0x01	; 1
     9fa:	10 82       	st	Z, r1
     9fc:	31 97       	sbiw	r30, 0x01	; 1
     9fe:	10 82       	st	Z, r1
     a00:	31 97       	sbiw	r30, 0x01	; 1
     a02:	10 82       	st	Z, r1
     a04:	31 97       	sbiw	r30, 0x01	; 1
     a06:	10 82       	st	Z, r1
     a08:	31 97       	sbiw	r30, 0x01	; 1
     a0a:	10 82       	st	Z, r1
     a0c:	31 97       	sbiw	r30, 0x01	; 1
     a0e:	60 83       	st	Z, r22
     a10:	31 97       	sbiw	r30, 0x01	; 1
     a12:	70 83       	st	Z, r23
     a14:	31 97       	sbiw	r30, 0x01	; 1
     a16:	10 82       	st	Z, r1
     a18:	31 97       	sbiw	r30, 0x01	; 1
     a1a:	10 82       	st	Z, r1
     a1c:	31 97       	sbiw	r30, 0x01	; 1
     a1e:	10 82       	st	Z, r1
     a20:	31 97       	sbiw	r30, 0x01	; 1
     a22:	10 82       	st	Z, r1
     a24:	31 97       	sbiw	r30, 0x01	; 1
     a26:	10 82       	st	Z, r1
     a28:	31 97       	sbiw	r30, 0x01	; 1
     a2a:	10 82       	st	Z, r1
     a2c:	31 97       	sbiw	r30, 0x01	; 1
     a2e:	80 e8       	ldi	r24, 0x80	; 128
     a30:	80 83       	st	Z, r24
     a32:	ca 01       	movw	r24, r20
     a34:	83 97       	sbiw	r24, 0x23	; 35
     a36:	08 95       	ret

00000a38 <OSTaskCreateHook>:
     a38:	08 95       	ret

00000a3a <OSTaskDelHook>:
     a3a:	08 95       	ret

00000a3c <OSTaskSwHook>:
     a3c:	08 95       	ret

00000a3e <OSTaskStatHook>:
     a3e:	08 95       	ret

00000a40 <OSTimeTickHook>:
     a40:	08 95       	ret

00000a42 <OSInitHookBegin>:
     a42:	08 95       	ret

00000a44 <OSInitHookEnd>:
     a44:	08 95       	ret

00000a46 <OSTaskIdleHook>:
     a46:	08 95       	ret

00000a48 <OSTCBInitHook>:
     a48:	08 95       	ret

00000a4a <OS_TaskIdle>:
     a4a:	f8 94       	cli
     a4c:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <OSIdleCtr>
     a50:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <OSIdleCtr+0x1>
     a54:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <OSIdleCtr+0x2>
     a58:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <OSIdleCtr+0x3>
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	a1 1d       	adc	r26, r1
     a60:	b1 1d       	adc	r27, r1
     a62:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <OSIdleCtr>
     a66:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <OSIdleCtr+0x1>
     a6a:	a0 93 2d 04 	sts	0x042D, r26	; 0x80042d <OSIdleCtr+0x2>
     a6e:	b0 93 2e 04 	sts	0x042E, r27	; 0x80042e <OSIdleCtr+0x3>
     a72:	78 94       	sei
     a74:	0e 94 23 05 	call	0xa46	; 0xa46 <OSTaskIdleHook>
     a78:	e8 cf       	rjmp	.-48     	; 0xa4a <OS_TaskIdle>

00000a7a <OSIntEnter>:
     a7a:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     a7e:	81 30       	cpi	r24, 0x01	; 1
     a80:	39 f4       	brne	.+14     	; 0xa90 <OSIntEnter+0x16>
     a82:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSIntNesting>
     a86:	8f 3f       	cpi	r24, 0xFF	; 255
     a88:	19 f0       	breq	.+6      	; 0xa90 <OSIntEnter+0x16>
     a8a:	8f 5f       	subi	r24, 0xFF	; 255
     a8c:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <OSIntNesting>
     a90:	08 95       	ret

00000a92 <OSIntExit>:
     a92:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     a96:	81 30       	cpi	r24, 0x01	; 1
     a98:	09 f0       	breq	.+2      	; 0xa9c <OSIntExit+0xa>
     a9a:	4c c0       	rjmp	.+152    	; 0xb34 <OSIntExit+0xa2>
     a9c:	f8 94       	cli
     a9e:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSIntNesting>
     aa2:	88 23       	and	r24, r24
     aa4:	19 f0       	breq	.+6      	; 0xaac <OSIntExit+0x1a>
     aa6:	81 50       	subi	r24, 0x01	; 1
     aa8:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <OSIntNesting>
     aac:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSIntNesting>
     ab0:	81 11       	cpse	r24, r1
     ab2:	3f c0       	rjmp	.+126    	; 0xb32 <OSIntExit+0xa0>
     ab4:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSLockNesting>
     ab8:	81 11       	cpse	r24, r1
     aba:	3b c0       	rjmp	.+118    	; 0xb32 <OSIntExit+0xa0>
     abc:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <OSRdyGrp>
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	e0 50       	subi	r30, 0x00	; 0
     ac4:	ff 4f       	sbci	r31, 0xFF	; 255
     ac6:	e0 81       	ld	r30, Z
     ac8:	e0 93 40 04 	sts	0x0440, r30	; 0x800440 <OSIntExitY>
     acc:	ae 2f       	mov	r26, r30
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	a3 5c       	subi	r26, 0xC3	; 195
     ad2:	bb 4f       	sbci	r27, 0xFB	; 251
     ad4:	ac 91       	ld	r26, X
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	a0 50       	subi	r26, 0x00	; 0
     ada:	bf 4f       	sbci	r27, 0xFF	; 255
     adc:	ee 0f       	add	r30, r30
     ade:	ee 0f       	add	r30, r30
     ae0:	ee 0f       	add	r30, r30
     ae2:	8c 91       	ld	r24, X
     ae4:	e8 0f       	add	r30, r24
     ae6:	e0 93 2f 04 	sts	0x042F, r30	; 0x80042f <OSPrioHighRdy>
     aea:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <OSPrioCur>
     aee:	e8 17       	cp	r30, r24
     af0:	01 f1       	breq	.+64     	; 0xb32 <OSIntExit+0xa0>
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	ee 0f       	add	r30, r30
     af6:	ff 1f       	adc	r31, r31
     af8:	ed 57       	subi	r30, 0x7D	; 125
     afa:	fa 4f       	sbci	r31, 0xFA	; 250
     afc:	80 81       	ld	r24, Z
     afe:	91 81       	ldd	r25, Z+1	; 0x01
     b00:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <OSTCBHighRdy+0x1>
     b04:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <OSTCBHighRdy>
     b08:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <OSCtxSwCtr>
     b0c:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <OSCtxSwCtr+0x1>
     b10:	a0 91 35 04 	lds	r26, 0x0435	; 0x800435 <OSCtxSwCtr+0x2>
     b14:	b0 91 36 04 	lds	r27, 0x0436	; 0x800436 <OSCtxSwCtr+0x3>
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	a1 1d       	adc	r26, r1
     b1c:	b1 1d       	adc	r27, r1
     b1e:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <OSCtxSwCtr>
     b22:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <OSCtxSwCtr+0x1>
     b26:	a0 93 35 04 	sts	0x0435, r26	; 0x800435 <OSCtxSwCtr+0x2>
     b2a:	b0 93 36 04 	sts	0x0436, r27	; 0x800436 <OSCtxSwCtr+0x3>
     b2e:	0e 94 40 04 	call	0x880	; 0x880 <OSIntCtxSw>
     b32:	78 94       	sei
     b34:	08 95       	ret

00000b36 <OSSchedLock>:
     b36:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	49 f4       	brne	.+18     	; 0xb50 <OSSchedLock+0x1a>
     b3e:	f8 94       	cli
     b40:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSLockNesting>
     b44:	8f 3f       	cpi	r24, 0xFF	; 255
     b46:	19 f0       	breq	.+6      	; 0xb4e <OSSchedLock+0x18>
     b48:	8f 5f       	subi	r24, 0xFF	; 255
     b4a:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <OSLockNesting>
     b4e:	78 94       	sei
     b50:	08 95       	ret

00000b52 <OSStart>:
     b52:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     b56:	81 11       	cpse	r24, r1
     b58:	28 c0       	rjmp	.+80     	; 0xbaa <OSStart+0x58>
     b5a:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <OSRdyGrp>
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	e0 50       	subi	r30, 0x00	; 0
     b62:	ff 4f       	sbci	r31, 0xFF	; 255
     b64:	e0 81       	ld	r30, Z
     b66:	ae 2f       	mov	r26, r30
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	a3 5c       	subi	r26, 0xC3	; 195
     b6c:	bb 4f       	sbci	r27, 0xFB	; 251
     b6e:	ac 91       	ld	r26, X
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	a0 50       	subi	r26, 0x00	; 0
     b74:	bf 4f       	sbci	r27, 0xFF	; 255
     b76:	ee 0f       	add	r30, r30
     b78:	ee 0f       	add	r30, r30
     b7a:	ee 0f       	add	r30, r30
     b7c:	8c 91       	ld	r24, X
     b7e:	e8 0f       	add	r30, r24
     b80:	e0 93 2f 04 	sts	0x042F, r30	; 0x80042f <OSPrioHighRdy>
     b84:	e0 93 30 04 	sts	0x0430, r30	; 0x800430 <OSPrioCur>
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	ee 0f       	add	r30, r30
     b8c:	ff 1f       	adc	r31, r31
     b8e:	ed 57       	subi	r30, 0x7D	; 125
     b90:	fa 4f       	sbci	r31, 0xFA	; 250
     b92:	80 81       	ld	r24, Z
     b94:	91 81       	ldd	r25, Z+1	; 0x01
     b96:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <OSTCBHighRdy+0x1>
     b9a:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <OSTCBHighRdy>
     b9e:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <OSTCBCur+0x1>
     ba2:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <OSTCBCur>
     ba6:	0c 94 b3 03 	jmp	0x766	; 0x766 <OSStartHighRdy>
     baa:	08 95       	ret

00000bac <OSTimeTick>:
     bac:	0e 94 20 05 	call	0xa40	; 0xa40 <OSTimeTickHook>
     bb0:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     bb4:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <OSTCBList>
     bb8:	f0 91 32 04 	lds	r31, 0x0432	; 0x800432 <OSTCBList+0x1>
     bbc:	21 e0       	ldi	r18, 0x01	; 1
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	01 f1       	breq	.+64     	; 0xc04 <OSTimeTick+0x58>
     bc4:	08 95       	ret
     bc6:	f8 94       	cli
     bc8:	86 81       	ldd	r24, Z+6	; 0x06
     bca:	97 81       	ldd	r25, Z+7	; 0x07
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	b1 f0       	breq	.+44     	; 0xbfc <OSTimeTick+0x50>
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	97 83       	std	Z+7, r25	; 0x07
     bd4:	86 83       	std	Z+6, r24	; 0x06
     bd6:	89 2b       	or	r24, r25
     bd8:	89 f4       	brne	.+34     	; 0xbfc <OSTimeTick+0x50>
     bda:	80 85       	ldd	r24, Z+8	; 0x08
     bdc:	83 fd       	sbrc	r24, 3
     bde:	16 c0       	rjmp	.+44     	; 0xc0c <OSTimeTick+0x60>
     be0:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <OSRdyGrp>
     be4:	95 85       	ldd	r25, Z+13	; 0x0d
     be6:	89 2b       	or	r24, r25
     be8:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <OSRdyGrp>
     bec:	a3 85       	ldd	r26, Z+11	; 0x0b
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	a3 5c       	subi	r26, 0xC3	; 195
     bf2:	bb 4f       	sbci	r27, 0xFB	; 251
     bf4:	8c 91       	ld	r24, X
     bf6:	94 85       	ldd	r25, Z+12	; 0x0c
     bf8:	89 2b       	or	r24, r25
     bfa:	8c 93       	st	X, r24
     bfc:	02 80       	ldd	r0, Z+2	; 0x02
     bfe:	f3 81       	ldd	r31, Z+3	; 0x03
     c00:	e0 2d       	mov	r30, r0
     c02:	78 94       	sei
     c04:	81 85       	ldd	r24, Z+9	; 0x09
     c06:	80 31       	cpi	r24, 0x10	; 16
     c08:	f1 f6       	brne	.-68     	; 0xbc6 <OSTimeTick+0x1a>
     c0a:	dc cf       	rjmp	.-72     	; 0xbc4 <OSTimeTick+0x18>
     c0c:	37 83       	std	Z+7, r19	; 0x07
     c0e:	26 83       	std	Z+6, r18	; 0x06
     c10:	f5 cf       	rjmp	.-22     	; 0xbfc <OSTimeTick+0x50>

00000c12 <OSVersion>:
     c12:	8c ef       	ldi	r24, 0xFC	; 252
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	08 95       	ret

00000c18 <OS_Dummy>:
     c18:	08 95       	ret

00000c1a <OS_Sched>:
     c1a:	f8 94       	cli
     c1c:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSIntNesting>
     c20:	81 11       	cpse	r24, r1
     c22:	3d c0       	rjmp	.+122    	; 0xc9e <OS_Sched+0x84>
     c24:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSLockNesting>
     c28:	81 11       	cpse	r24, r1
     c2a:	39 c0       	rjmp	.+114    	; 0xc9e <OS_Sched+0x84>
     c2c:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <OSRdyGrp>
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	e0 50       	subi	r30, 0x00	; 0
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	e0 81       	ld	r30, Z
     c38:	ae 2f       	mov	r26, r30
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	a3 5c       	subi	r26, 0xC3	; 195
     c3e:	bb 4f       	sbci	r27, 0xFB	; 251
     c40:	ac 91       	ld	r26, X
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	a0 50       	subi	r26, 0x00	; 0
     c46:	bf 4f       	sbci	r27, 0xFF	; 255
     c48:	ee 0f       	add	r30, r30
     c4a:	ee 0f       	add	r30, r30
     c4c:	ee 0f       	add	r30, r30
     c4e:	8c 91       	ld	r24, X
     c50:	e8 0f       	add	r30, r24
     c52:	e0 93 2f 04 	sts	0x042F, r30	; 0x80042f <OSPrioHighRdy>
     c56:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <OSPrioCur>
     c5a:	e8 17       	cp	r30, r24
     c5c:	01 f1       	breq	.+64     	; 0xc9e <OS_Sched+0x84>
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	ee 0f       	add	r30, r30
     c62:	ff 1f       	adc	r31, r31
     c64:	ed 57       	subi	r30, 0x7D	; 125
     c66:	fa 4f       	sbci	r31, 0xFA	; 250
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <OSTCBHighRdy+0x1>
     c70:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <OSTCBHighRdy>
     c74:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <OSCtxSwCtr>
     c78:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <OSCtxSwCtr+0x1>
     c7c:	a0 91 35 04 	lds	r26, 0x0435	; 0x800435 <OSCtxSwCtr+0x2>
     c80:	b0 91 36 04 	lds	r27, 0x0436	; 0x800436 <OSCtxSwCtr+0x3>
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	a1 1d       	adc	r26, r1
     c88:	b1 1d       	adc	r27, r1
     c8a:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <OSCtxSwCtr>
     c8e:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <OSCtxSwCtr+0x1>
     c92:	a0 93 35 04 	sts	0x0435, r26	; 0x800435 <OSCtxSwCtr+0x2>
     c96:	b0 93 36 04 	sts	0x0436, r27	; 0x800436 <OSCtxSwCtr+0x3>
     c9a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <OSCtxSw>
     c9e:	78 94       	sei
     ca0:	08 95       	ret

00000ca2 <OSSchedUnlock>:
     ca2:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	91 f4       	brne	.+36     	; 0xcce <OSSchedUnlock+0x2c>
     caa:	f8 94       	cli
     cac:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSLockNesting>
     cb0:	88 23       	and	r24, r24
     cb2:	61 f0       	breq	.+24     	; 0xccc <OSSchedUnlock+0x2a>
     cb4:	81 50       	subi	r24, 0x01	; 1
     cb6:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <OSLockNesting>
     cba:	81 11       	cpse	r24, r1
     cbc:	07 c0       	rjmp	.+14     	; 0xccc <OSSchedUnlock+0x2a>
     cbe:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSIntNesting>
     cc2:	81 11       	cpse	r24, r1
     cc4:	03 c0       	rjmp	.+6      	; 0xccc <OSSchedUnlock+0x2a>
     cc6:	78 94       	sei
     cc8:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <OS_Sched>
     ccc:	78 94       	sei
     cce:	08 95       	ret

00000cd0 <OSTimeDly.part.0>:
     cd0:	ac 01       	movw	r20, r24
     cd2:	f8 94       	cli
     cd4:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <OSTCBCur>
     cd8:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <OSTCBCur+0x1>
     cdc:	1b 96       	adiw	r26, 0x0b	; 11
     cde:	ec 91       	ld	r30, X
     ce0:	1b 97       	sbiw	r26, 0x0b	; 11
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	1c 96       	adiw	r26, 0x0c	; 12
     ce6:	9c 91       	ld	r25, X
     ce8:	1c 97       	sbiw	r26, 0x0c	; 12
     cea:	90 95       	com	r25
     cec:	e3 5c       	subi	r30, 0xC3	; 195
     cee:	fb 4f       	sbci	r31, 0xFB	; 251
     cf0:	80 81       	ld	r24, Z
     cf2:	98 23       	and	r25, r24
     cf4:	90 83       	st	Z, r25
     cf6:	91 11       	cpse	r25, r1
     cf8:	0a c0       	rjmp	.+20     	; 0xd0e <OSTimeDly.part.0+0x3e>
     cfa:	1d 96       	adiw	r26, 0x0d	; 13
     cfc:	9c 91       	ld	r25, X
     cfe:	1d 97       	sbiw	r26, 0x0d	; 13
     d00:	29 2f       	mov	r18, r25
     d02:	20 95       	com	r18
     d04:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <OSRdyGrp>
     d08:	92 23       	and	r25, r18
     d0a:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <OSRdyGrp>
     d0e:	17 96       	adiw	r26, 0x07	; 7
     d10:	5c 93       	st	X, r21
     d12:	4e 93       	st	-X, r20
     d14:	16 97       	sbiw	r26, 0x06	; 6
     d16:	78 94       	sei
     d18:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <OS_Sched>

00000d1c <OS_TCBInit>:
     d1c:	1f 93       	push	r17
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	f8 94       	cli
     d24:	c0 91 37 04 	lds	r28, 0x0437	; 0x800437 <OSTCBFreeList>
     d28:	d0 91 38 04 	lds	r29, 0x0438	; 0x800438 <OSTCBFreeList+0x1>
     d2c:	20 97       	sbiw	r28, 0x00	; 0
     d2e:	09 f4       	brne	.+2      	; 0xd32 <OS_TCBInit+0x16>
     d30:	54 c0       	rjmp	.+168    	; 0xdda <OS_TCBInit+0xbe>
     d32:	18 2f       	mov	r17, r24
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	9b 81       	ldd	r25, Y+3	; 0x03
     d38:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <OSTCBFreeList+0x1>
     d3c:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <OSTCBFreeList>
     d40:	78 94       	sei
     d42:	79 83       	std	Y+1, r23	; 0x01
     d44:	68 83       	st	Y, r22
     d46:	19 87       	std	Y+9, r17	; 0x09
     d48:	18 86       	std	Y+8, r1	; 0x08
     d4a:	1f 82       	std	Y+7, r1	; 0x07
     d4c:	1e 82       	std	Y+6, r1	; 0x06
     d4e:	1e 86       	std	Y+14, r1	; 0x0e
     d50:	e1 2f       	mov	r30, r17
     d52:	e6 95       	lsr	r30
     d54:	e6 95       	lsr	r30
     d56:	e6 95       	lsr	r30
     d58:	eb 87       	std	Y+11, r30	; 0x0b
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	e0 50       	subi	r30, 0x00	; 0
     d5e:	fe 4f       	sbci	r31, 0xFE	; 254
     d60:	80 81       	ld	r24, Z
     d62:	8d 87       	std	Y+13, r24	; 0x0d
     d64:	e1 2f       	mov	r30, r17
     d66:	e7 70       	andi	r30, 0x07	; 7
     d68:	ea 87       	std	Y+10, r30	; 0x0a
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	e0 50       	subi	r30, 0x00	; 0
     d6e:	fe 4f       	sbci	r31, 0xFE	; 254
     d70:	80 81       	ld	r24, Z
     d72:	8c 87       	std	Y+12, r24	; 0x0c
     d74:	ce 01       	movw	r24, r28
     d76:	0e 94 24 05 	call	0xa48	; 0xa48 <OSTCBInitHook>
     d7a:	ce 01       	movw	r24, r28
     d7c:	0e 94 1c 05 	call	0xa38	; 0xa38 <OSTaskCreateHook>
     d80:	f8 94       	cli
     d82:	e1 2f       	mov	r30, r17
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	ed 57       	subi	r30, 0x7D	; 125
     d8c:	fa 4f       	sbci	r31, 0xFA	; 250
     d8e:	d1 83       	std	Z+1, r29	; 0x01
     d90:	c0 83       	st	Z, r28
     d92:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <OSTCBList>
     d96:	f0 91 32 04 	lds	r31, 0x0432	; 0x800432 <OSTCBList+0x1>
     d9a:	fb 83       	std	Y+3, r31	; 0x03
     d9c:	ea 83       	std	Y+2, r30	; 0x02
     d9e:	1d 82       	std	Y+5, r1	; 0x05
     da0:	1c 82       	std	Y+4, r1	; 0x04
     da2:	30 97       	sbiw	r30, 0x00	; 0
     da4:	11 f0       	breq	.+4      	; 0xdaa <OS_TCBInit+0x8e>
     da6:	d5 83       	std	Z+5, r29	; 0x05
     da8:	c4 83       	std	Z+4, r28	; 0x04
     daa:	d0 93 32 04 	sts	0x0432, r29	; 0x800432 <OSTCBList+0x1>
     dae:	c0 93 31 04 	sts	0x0431, r28	; 0x800431 <OSTCBList>
     db2:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <OSRdyGrp>
     db6:	9d 85       	ldd	r25, Y+13	; 0x0d
     db8:	89 2b       	or	r24, r25
     dba:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <OSRdyGrp>
     dbe:	eb 85       	ldd	r30, Y+11	; 0x0b
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	e3 5c       	subi	r30, 0xC3	; 195
     dc4:	fb 4f       	sbci	r31, 0xFB	; 251
     dc6:	80 81       	ld	r24, Z
     dc8:	9c 85       	ldd	r25, Y+12	; 0x0c
     dca:	89 2b       	or	r24, r25
     dcc:	80 83       	st	Z, r24
     dce:	78 94       	sei
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	1f 91       	pop	r17
     dd8:	08 95       	ret
     dda:	78 94       	sei
     ddc:	86 e4       	ldi	r24, 0x46	; 70
     dde:	f9 cf       	rjmp	.-14     	; 0xdd2 <OS_TCBInit+0xb6>

00000de0 <OSTaskCreate>:
     de0:	9f 92       	push	r9
     de2:	af 92       	push	r10
     de4:	bf 92       	push	r11
     de6:	cf 92       	push	r12
     de8:	df 92       	push	r13
     dea:	ef 92       	push	r14
     dec:	ff 92       	push	r15
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	f8 94       	cli
     df8:	c2 2f       	mov	r28, r18
     dfa:	d0 e0       	ldi	r29, 0x00	; 0
     dfc:	cc 0f       	add	r28, r28
     dfe:	dd 1f       	adc	r29, r29
     e00:	cd 57       	subi	r28, 0x7D	; 125
     e02:	da 4f       	sbci	r29, 0xFA	; 250
     e04:	e8 81       	ld	r30, Y
     e06:	f9 81       	ldd	r31, Y+1	; 0x01
     e08:	ef 2b       	or	r30, r31
     e0a:	09 f0       	breq	.+2      	; 0xe0e <OSTaskCreate+0x2e>
     e0c:	3b c0       	rjmp	.+118    	; 0xe84 <OSTaskCreate+0xa4>
     e0e:	92 2e       	mov	r9, r18
     e10:	21 e0       	ldi	r18, 0x01	; 1
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	39 83       	std	Y+1, r19	; 0x01
     e16:	28 83       	st	Y, r18
     e18:	78 94       	sei
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <OSTaskStkInit>
     e22:	b1 2c       	mov	r11, r1
     e24:	a1 2c       	mov	r10, r1
     e26:	d1 2c       	mov	r13, r1
     e28:	c1 2c       	mov	r12, r1
     e2a:	e1 2c       	mov	r14, r1
     e2c:	f1 2c       	mov	r15, r1
     e2e:	87 01       	movw	r16, r14
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	40 e0       	ldi	r20, 0x00	; 0
     e38:	bc 01       	movw	r22, r24
     e3a:	89 2d       	mov	r24, r9
     e3c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <OS_TCBInit>
     e40:	18 2f       	mov	r17, r24
     e42:	81 11       	cpse	r24, r1
     e44:	1a c0       	rjmp	.+52     	; 0xe7a <OSTaskCreate+0x9a>
     e46:	f8 94       	cli
     e48:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <OSTaskCtr>
     e4c:	8f 5f       	subi	r24, 0xFF	; 255
     e4e:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <OSTaskCtr>
     e52:	78 94       	sei
     e54:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	11 f4       	brne	.+4      	; 0xe60 <OSTaskCreate+0x80>
     e5c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <OS_Sched>
     e60:	81 2f       	mov	r24, r17
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	ff 90       	pop	r15
     e6c:	ef 90       	pop	r14
     e6e:	df 90       	pop	r13
     e70:	cf 90       	pop	r12
     e72:	bf 90       	pop	r11
     e74:	af 90       	pop	r10
     e76:	9f 90       	pop	r9
     e78:	08 95       	ret
     e7a:	f8 94       	cli
     e7c:	19 82       	std	Y+1, r1	; 0x01
     e7e:	18 82       	st	Y, r1
     e80:	78 94       	sei
     e82:	ee cf       	rjmp	.-36     	; 0xe60 <OSTaskCreate+0x80>
     e84:	78 94       	sei
     e86:	18 e2       	ldi	r17, 0x28	; 40
     e88:	eb cf       	rjmp	.-42     	; 0xe60 <OSTaskCreate+0x80>

00000e8a <OSInit>:
     e8a:	0e 94 21 05 	call	0xa42	; 0xa42 <OSInitHookBegin>
     e8e:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <OSIntNesting>
     e92:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <OSLockNesting>
     e96:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <OSTaskCtr>
     e9a:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <OSRunning>
     e9e:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <OSCtxSwCtr>
     ea2:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <OSCtxSwCtr+0x1>
     ea6:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <OSCtxSwCtr+0x2>
     eaa:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <OSCtxSwCtr+0x3>
     eae:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <OSIdleCtr>
     eb2:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <OSIdleCtr+0x1>
     eb6:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <OSIdleCtr+0x2>
     eba:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <OSIdleCtr+0x3>
     ebe:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <OSRdyGrp>
     ec2:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <OSRdyTbl>
     ec6:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <OSRdyTbl+0x1>
     eca:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <OSRdyTbl+0x2>
     ece:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <OSPrioCur>
     ed2:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <OSPrioHighRdy>
     ed6:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <OSTCBHighRdy+0x1>
     eda:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <OSTCBHighRdy>
     ede:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <OSTCBCur+0x1>
     ee2:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <OSTCBCur>
     ee6:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <OSTCBList+0x1>
     eea:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <OSTCBList>
     eee:	e3 e8       	ldi	r30, 0x83	; 131
     ef0:	f5 e0       	ldi	r31, 0x05	; 5
     ef2:	11 92       	st	Z+, r1
     ef4:	11 92       	st	Z+, r1
     ef6:	85 e0       	ldi	r24, 0x05	; 5
     ef8:	e5 3a       	cpi	r30, 0xA5	; 165
     efa:	f8 07       	cpc	r31, r24
     efc:	d1 f7       	brne	.-12     	; 0xef2 <OSInit+0x68>
     efe:	e4 e8       	ldi	r30, 0x84	; 132
     f00:	f4 e0       	ldi	r31, 0x04	; 4
     f02:	cf 01       	movw	r24, r30
     f04:	0f 96       	adiw	r24, 0x0f	; 15
     f06:	93 83       	std	Z+3, r25	; 0x03
     f08:	82 83       	std	Z+2, r24	; 0x02
     f0a:	fc 01       	movw	r30, r24
     f0c:	85 e0       	ldi	r24, 0x05	; 5
     f0e:	e4 37       	cpi	r30, 0x74	; 116
     f10:	f8 07       	cpc	r31, r24
     f12:	b9 f7       	brne	.-18     	; 0xf02 <OSInit+0x78>
     f14:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <OSTCBTbl+0xf3>
     f18:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <OSTCBTbl+0xf2>
     f1c:	84 e8       	ldi	r24, 0x84	; 132
     f1e:	94 e0       	ldi	r25, 0x04	; 4
     f20:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <OSTCBFreeList+0x1>
     f24:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <OSTCBFreeList>
     f28:	20 e1       	ldi	r18, 0x10	; 16
     f2a:	43 e8       	ldi	r20, 0x83	; 131
     f2c:	54 e0       	ldi	r21, 0x04	; 4
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	85 e2       	ldi	r24, 0x25	; 37
     f34:	95 e0       	ldi	r25, 0x05	; 5
     f36:	0e 94 f0 06 	call	0xde0	; 0xde0 <OSTaskCreate>
     f3a:	0c 94 22 05 	jmp	0xa44	; 0xa44 <OSInitHookEnd>

00000f3e <OSTaskDel>:
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	f0 90 41 04 	lds	r15, 0x0441	; 0x800441 <OSIntNesting>
     f4c:	f1 10       	cpse	r15, r1
     f4e:	76 c0       	rjmp	.+236    	; 0x103c <OSTaskDel+0xfe>
     f50:	f8 94       	cli
     f52:	8f 3f       	cpi	r24, 0xFF	; 255
     f54:	29 f4       	brne	.+10     	; 0xf60 <OSTaskDel+0x22>
     f56:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <OSTCBCur>
     f5a:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <OSTCBCur+0x1>
     f5e:	81 85       	ldd	r24, Z+9	; 0x09
     f60:	08 2f       	mov	r16, r24
     f62:	10 e0       	ldi	r17, 0x00	; 0
     f64:	00 0f       	add	r16, r16
     f66:	11 1f       	adc	r17, r17
     f68:	f8 01       	movw	r30, r16
     f6a:	ed 57       	subi	r30, 0x7D	; 125
     f6c:	fa 4f       	sbci	r31, 0xFA	; 250
     f6e:	c0 81       	ld	r28, Z
     f70:	d1 81       	ldd	r29, Z+1	; 0x01
     f72:	20 97       	sbiw	r28, 0x00	; 0
     f74:	09 f4       	brne	.+2      	; 0xf78 <OSTaskDel+0x3a>
     f76:	5e c0       	rjmp	.+188    	; 0x1034 <OSTaskDel+0xf6>
     f78:	eb 85       	ldd	r30, Y+11	; 0x0b
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f7e:	80 95       	com	r24
     f80:	e3 5c       	subi	r30, 0xC3	; 195
     f82:	fb 4f       	sbci	r31, 0xFB	; 251
     f84:	90 81       	ld	r25, Z
     f86:	89 23       	and	r24, r25
     f88:	80 83       	st	Z, r24
     f8a:	81 11       	cpse	r24, r1
     f8c:	08 c0       	rjmp	.+16     	; 0xf9e <OSTaskDel+0x60>
     f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f90:	98 2f       	mov	r25, r24
     f92:	90 95       	com	r25
     f94:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <OSRdyGrp>
     f98:	89 23       	and	r24, r25
     f9a:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <OSRdyGrp>
     f9e:	1f 82       	std	Y+7, r1	; 0x07
     fa0:	1e 82       	std	Y+6, r1	; 0x06
     fa2:	18 86       	std	Y+8, r1	; 0x08
     fa4:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSLockNesting>
     fa8:	8f 3f       	cpi	r24, 0xFF	; 255
     faa:	19 f0       	breq	.+6      	; 0xfb2 <OSTaskDel+0x74>
     fac:	8f 5f       	subi	r24, 0xFF	; 255
     fae:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <OSLockNesting>
     fb2:	78 94       	sei
     fb4:	f8 94       	cli
     fb6:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSLockNesting>
     fba:	88 23       	and	r24, r24
     fbc:	19 f0       	breq	.+6      	; 0xfc4 <OSTaskDel+0x86>
     fbe:	81 50       	subi	r24, 0x01	; 1
     fc0:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <OSLockNesting>
     fc4:	ce 01       	movw	r24, r28
     fc6:	0e 94 1d 05 	call	0xa3a	; 0xa3a <OSTaskDelHook>
     fca:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <OSTaskCtr>
     fce:	81 50       	subi	r24, 0x01	; 1
     fd0:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <OSTaskCtr>
     fd4:	f8 01       	movw	r30, r16
     fd6:	ed 57       	subi	r30, 0x7D	; 125
     fd8:	fa 4f       	sbci	r31, 0xFA	; 250
     fda:	11 82       	std	Z+1, r1	; 0x01
     fdc:	10 82       	st	Z, r1
     fde:	ec 81       	ldd	r30, Y+4	; 0x04
     fe0:	fd 81       	ldd	r31, Y+5	; 0x05
     fe2:	aa 81       	ldd	r26, Y+2	; 0x02
     fe4:	bb 81       	ldd	r27, Y+3	; 0x03
     fe6:	30 97       	sbiw	r30, 0x00	; 0
     fe8:	e1 f4       	brne	.+56     	; 0x1022 <OSTaskDel+0xe4>
     fea:	15 96       	adiw	r26, 0x05	; 5
     fec:	1c 92       	st	X, r1
     fee:	1e 92       	st	-X, r1
     ff0:	14 97       	sbiw	r26, 0x04	; 4
     ff2:	b0 93 32 04 	sts	0x0432, r27	; 0x800432 <OSTCBList+0x1>
     ff6:	a0 93 31 04 	sts	0x0431, r26	; 0x800431 <OSTCBList>
     ffa:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <OSTCBFreeList>
     ffe:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <OSTCBFreeList+0x1>
    1002:	9b 83       	std	Y+3, r25	; 0x03
    1004:	8a 83       	std	Y+2, r24	; 0x02
    1006:	d0 93 38 04 	sts	0x0438, r29	; 0x800438 <OSTCBFreeList+0x1>
    100a:	c0 93 37 04 	sts	0x0437, r28	; 0x800437 <OSTCBFreeList>
    100e:	78 94       	sei
    1010:	0e 94 0d 06 	call	0xc1a	; 0xc1a <OS_Sched>
    1014:	8f 2d       	mov	r24, r15
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	ff 90       	pop	r15
    1020:	08 95       	ret
    1022:	b3 83       	std	Z+3, r27	; 0x03
    1024:	a2 83       	std	Z+2, r26	; 0x02
    1026:	aa 81       	ldd	r26, Y+2	; 0x02
    1028:	bb 81       	ldd	r27, Y+3	; 0x03
    102a:	15 96       	adiw	r26, 0x05	; 5
    102c:	fc 93       	st	X, r31
    102e:	ee 93       	st	-X, r30
    1030:	14 97       	sbiw	r26, 0x04	; 4
    1032:	e3 cf       	rjmp	.-58     	; 0xffa <OSTaskDel+0xbc>
    1034:	78 94       	sei
    1036:	9c e3       	ldi	r25, 0x3C	; 60
    1038:	f9 2e       	mov	r15, r25
    103a:	ec cf       	rjmp	.-40     	; 0x1014 <OSTaskDel+0xd6>
    103c:	8f e3       	ldi	r24, 0x3F	; 63
    103e:	f8 2e       	mov	r15, r24
    1040:	e9 cf       	rjmp	.-46     	; 0x1014 <OSTaskDel+0xd6>

00001042 <OSTaskDelReq>:
    1042:	8f 3f       	cpi	r24, 0xFF	; 255
    1044:	41 f4       	brne	.+16     	; 0x1056 <OSTaskDelReq+0x14>
    1046:	f8 94       	cli
    1048:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <OSTCBCur>
    104c:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <OSTCBCur+0x1>
    1050:	86 85       	ldd	r24, Z+14	; 0x0e
    1052:	78 94       	sei
    1054:	08 95       	ret
    1056:	f8 94       	cli
    1058:	e8 2f       	mov	r30, r24
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	ee 0f       	add	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	ed 57       	subi	r30, 0x7D	; 125
    1062:	fa 4f       	sbci	r31, 0xFA	; 250
    1064:	01 90       	ld	r0, Z+
    1066:	f0 81       	ld	r31, Z
    1068:	e0 2d       	mov	r30, r0
    106a:	8b e0       	ldi	r24, 0x0B	; 11
    106c:	30 97       	sbiw	r30, 0x00	; 0
    106e:	89 f3       	breq	.-30     	; 0x1052 <OSTaskDelReq+0x10>
    1070:	8e e3       	ldi	r24, 0x3E	; 62
    1072:	86 87       	std	Z+14, r24	; 0x0e
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	ed cf       	rjmp	.-38     	; 0x1052 <OSTaskDelReq+0x10>

00001078 <OSTimeDly>:
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	11 f0       	breq	.+4      	; 0x1080 <OSTimeDly+0x8>
    107c:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <OSTimeDly.part.0>
    1080:	08 95       	ret

00001082 <OSTimeDlyHMSM>:
    1082:	cf 92       	push	r12
    1084:	df 92       	push	r13
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	81 11       	cpse	r24, r1
    108c:	0d c0       	rjmp	.+26     	; 0x10a8 <OSTimeDlyHMSM+0x26>
    108e:	61 11       	cpse	r22, r1
    1090:	0b c0       	rjmp	.+22     	; 0x10a8 <OSTimeDlyHMSM+0x26>
    1092:	41 11       	cpse	r20, r1
    1094:	0c c0       	rjmp	.+24     	; 0x10ae <OSTimeDlyHMSM+0x2c>
    1096:	21 15       	cp	r18, r1
    1098:	31 05       	cpc	r19, r1
    109a:	61 f4       	brne	.+24     	; 0x10b4 <OSTimeDlyHMSM+0x32>
    109c:	84 e5       	ldi	r24, 0x54	; 84
    109e:	ff 90       	pop	r15
    10a0:	ef 90       	pop	r14
    10a2:	df 90       	pop	r13
    10a4:	cf 90       	pop	r12
    10a6:	08 95       	ret
    10a8:	6c 33       	cpi	r22, 0x3C	; 60
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <OSTimeDlyHMSM+0x2c>
    10ac:	4f c0       	rjmp	.+158    	; 0x114c <OSTimeDlyHMSM+0xca>
    10ae:	4c 33       	cpi	r20, 0x3C	; 60
    10b0:	08 f0       	brcs	.+2      	; 0x10b4 <OSTimeDlyHMSM+0x32>
    10b2:	4e c0       	rjmp	.+156    	; 0x1150 <OSTimeDlyHMSM+0xce>
    10b4:	28 3e       	cpi	r18, 0xE8	; 232
    10b6:	93 e0       	ldi	r25, 0x03	; 3
    10b8:	39 07       	cpc	r19, r25
    10ba:	08 f0       	brcs	.+2      	; 0x10be <OSTimeDlyHMSM+0x3c>
    10bc:	4b c0       	rjmp	.+150    	; 0x1154 <OSTimeDlyHMSM+0xd2>
    10be:	f9 01       	movw	r30, r18
    10c0:	58 2f       	mov	r21, r24
    10c2:	26 2f       	mov	r18, r22
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	ac e3       	ldi	r26, 0x3C	; 60
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	0e 94 1e 09 	call	0x123c	; 0x123c <__umulhisi3>
    10ce:	6b 01       	movw	r12, r22
    10d0:	7c 01       	movw	r14, r24
    10d2:	c4 0e       	add	r12, r20
    10d4:	d1 1c       	adc	r13, r1
    10d6:	e1 1c       	adc	r14, r1
    10d8:	f1 1c       	adc	r15, r1
    10da:	25 2f       	mov	r18, r21
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	a0 e1       	ldi	r26, 0x10	; 16
    10e0:	be e0       	ldi	r27, 0x0E	; 14
    10e2:	0e 94 1e 09 	call	0x123c	; 0x123c <__umulhisi3>
    10e6:	a7 01       	movw	r20, r14
    10e8:	96 01       	movw	r18, r12
    10ea:	26 0f       	add	r18, r22
    10ec:	37 1f       	adc	r19, r23
    10ee:	48 1f       	adc	r20, r24
    10f0:	59 1f       	adc	r21, r25
    10f2:	a4 e6       	ldi	r26, 0x64	; 100
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	0e 94 2d 09 	call	0x125a	; 0x125a <__muluhisi3>
    10fa:	6b 01       	movw	r12, r22
    10fc:	7c 01       	movw	r14, r24
    10fe:	9f 01       	movw	r18, r30
    1100:	0e 94 1e 09 	call	0x123c	; 0x123c <__umulhisi3>
    1104:	6c 50       	subi	r22, 0x0C	; 12
    1106:	7e 4f       	sbci	r23, 0xFE	; 254
    1108:	8f 4f       	sbci	r24, 0xFF	; 255
    110a:	9f 4f       	sbci	r25, 0xFF	; 255
    110c:	28 ee       	ldi	r18, 0xE8	; 232
    110e:	33 e0       	ldi	r19, 0x03	; 3
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__udivmodsi4>
    1118:	d7 01       	movw	r26, r14
    111a:	c6 01       	movw	r24, r12
    111c:	82 0f       	add	r24, r18
    111e:	93 1f       	adc	r25, r19
    1120:	a4 1f       	adc	r26, r20
    1122:	b5 1f       	adc	r27, r21
    1124:	7d 01       	movw	r14, r26
    1126:	0e 94 3c 08 	call	0x1078	; 0x1078 <OSTimeDly>
    112a:	e1 14       	cp	r14, r1
    112c:	f1 04       	cpc	r15, r1
    112e:	11 f4       	brne	.+4      	; 0x1134 <OSTimeDlyHMSM+0xb2>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	b5 cf       	rjmp	.-150    	; 0x109e <OSTimeDlyHMSM+0x1c>
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e8       	ldi	r25, 0x80	; 128
    1138:	0e 94 68 06 	call	0xcd0	; 0xcd0 <OSTimeDly.part.0>
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e8       	ldi	r25, 0x80	; 128
    1140:	0e 94 68 06 	call	0xcd0	; 0xcd0 <OSTimeDly.part.0>
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	e8 1a       	sub	r14, r24
    1148:	f1 08       	sbc	r15, r1
    114a:	ef cf       	rjmp	.-34     	; 0x112a <OSTimeDlyHMSM+0xa8>
    114c:	81 e5       	ldi	r24, 0x51	; 81
    114e:	a7 cf       	rjmp	.-178    	; 0x109e <OSTimeDlyHMSM+0x1c>
    1150:	82 e5       	ldi	r24, 0x52	; 82
    1152:	a5 cf       	rjmp	.-182    	; 0x109e <OSTimeDlyHMSM+0x1c>
    1154:	83 e5       	ldi	r24, 0x53	; 83
    1156:	a3 cf       	rjmp	.-186    	; 0x109e <OSTimeDlyHMSM+0x1c>

00001158 <main>:

}

int main( void )
{
 robo_Setup(); /* initialize HAL for RoboKar */
    1158:	0e 94 f7 02 	call	0x5ee	; 0x5ee <robo_Setup>
 OSInit(); /* initialize UCOS-II kernel */
    115c:	0e 94 45 07 	call	0xe8a	; 0xe8a <OSInit>

 robo_motorSpeed(STOP_SPEED, STOP_SPEED); /* Stop the robot, value STOP_SPEED == 0 */
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	0e 94 1a 02 	call	0x434	; 0x434 <robo_motorSpeed>
 myrobot.rspeed = STOP_SPEED; /* Initialize myrobot states */
    116c:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <myrobot+0x1>
    1170:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <myrobot>
 myrobot.lspeed = STOP_SPEED;
    1174:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <myrobot+0x3>
    1178:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <myrobot+0x2>
 myrobot.obstacle = 0; /* No collisioin */
    117c:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <myrobot+0x4>
 count =0;
    1180:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <count+0x1>
    1184:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <count>
 OSTaskCreate(TaskStart, /* create TaskStart Task */
    1188:	21 e0       	ldi	r18, 0x01	; 1
    118a:	40 ea       	ldi	r20, 0xA0	; 160
    118c:	53 e0       	ldi	r21, 0x03	; 3
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	83 e2       	ldi	r24, 0x23	; 35
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	0e 94 f0 06 	call	0xde0	; 0xde0 <OSTaskCreate>
 (void *)0,
 (void *)&TaskStartStk[TASK_STK_SZ - 1],
 TASK_START_PRIO);
 robo_Honk(); robo_wait4goPress(); /* Wait for to GO */
    119a:	0e 94 bd 02 	call	0x57a	; 0x57a <robo_Honk>
    119e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <robo_wait4goPress>
 OSStart(); /* Start multitasking */
    11a2:	0e 94 a9 05 	call	0xb52	; 0xb52 <OSStart>
    11a6:	ff cf       	rjmp	.-2      	; 0x11a6 <main+0x4e>

000011a8 <__udivmodhi4>:
    11a8:	aa 1b       	sub	r26, r26
    11aa:	bb 1b       	sub	r27, r27
    11ac:	51 e1       	ldi	r21, 0x11	; 17
    11ae:	07 c0       	rjmp	.+14     	; 0x11be <__udivmodhi4_ep>

000011b0 <__udivmodhi4_loop>:
    11b0:	aa 1f       	adc	r26, r26
    11b2:	bb 1f       	adc	r27, r27
    11b4:	a6 17       	cp	r26, r22
    11b6:	b7 07       	cpc	r27, r23
    11b8:	10 f0       	brcs	.+4      	; 0x11be <__udivmodhi4_ep>
    11ba:	a6 1b       	sub	r26, r22
    11bc:	b7 0b       	sbc	r27, r23

000011be <__udivmodhi4_ep>:
    11be:	88 1f       	adc	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	5a 95       	dec	r21
    11c4:	a9 f7       	brne	.-22     	; 0x11b0 <__udivmodhi4_loop>
    11c6:	80 95       	com	r24
    11c8:	90 95       	com	r25
    11ca:	bc 01       	movw	r22, r24
    11cc:	cd 01       	movw	r24, r26
    11ce:	08 95       	ret

000011d0 <__divmodhi4>:
    11d0:	97 fb       	bst	r25, 7
    11d2:	07 2e       	mov	r0, r23
    11d4:	16 f4       	brtc	.+4      	; 0x11da <__divmodhi4+0xa>
    11d6:	00 94       	com	r0
    11d8:	07 d0       	rcall	.+14     	; 0x11e8 <__divmodhi4_neg1>
    11da:	77 fd       	sbrc	r23, 7
    11dc:	09 d0       	rcall	.+18     	; 0x11f0 <__divmodhi4_neg2>
    11de:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__udivmodhi4>
    11e2:	07 fc       	sbrc	r0, 7
    11e4:	05 d0       	rcall	.+10     	; 0x11f0 <__divmodhi4_neg2>
    11e6:	3e f4       	brtc	.+14     	; 0x11f6 <__divmodhi4_exit>

000011e8 <__divmodhi4_neg1>:
    11e8:	90 95       	com	r25
    11ea:	81 95       	neg	r24
    11ec:	9f 4f       	sbci	r25, 0xFF	; 255
    11ee:	08 95       	ret

000011f0 <__divmodhi4_neg2>:
    11f0:	70 95       	com	r23
    11f2:	61 95       	neg	r22
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255

000011f6 <__divmodhi4_exit>:
    11f6:	08 95       	ret

000011f8 <__udivmodsi4>:
    11f8:	a1 e2       	ldi	r26, 0x21	; 33
    11fa:	1a 2e       	mov	r1, r26
    11fc:	aa 1b       	sub	r26, r26
    11fe:	bb 1b       	sub	r27, r27
    1200:	fd 01       	movw	r30, r26
    1202:	0d c0       	rjmp	.+26     	; 0x121e <__udivmodsi4_ep>

00001204 <__udivmodsi4_loop>:
    1204:	aa 1f       	adc	r26, r26
    1206:	bb 1f       	adc	r27, r27
    1208:	ee 1f       	adc	r30, r30
    120a:	ff 1f       	adc	r31, r31
    120c:	a2 17       	cp	r26, r18
    120e:	b3 07       	cpc	r27, r19
    1210:	e4 07       	cpc	r30, r20
    1212:	f5 07       	cpc	r31, r21
    1214:	20 f0       	brcs	.+8      	; 0x121e <__udivmodsi4_ep>
    1216:	a2 1b       	sub	r26, r18
    1218:	b3 0b       	sbc	r27, r19
    121a:	e4 0b       	sbc	r30, r20
    121c:	f5 0b       	sbc	r31, r21

0000121e <__udivmodsi4_ep>:
    121e:	66 1f       	adc	r22, r22
    1220:	77 1f       	adc	r23, r23
    1222:	88 1f       	adc	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	1a 94       	dec	r1
    1228:	69 f7       	brne	.-38     	; 0x1204 <__udivmodsi4_loop>
    122a:	60 95       	com	r22
    122c:	70 95       	com	r23
    122e:	80 95       	com	r24
    1230:	90 95       	com	r25
    1232:	9b 01       	movw	r18, r22
    1234:	ac 01       	movw	r20, r24
    1236:	bd 01       	movw	r22, r26
    1238:	cf 01       	movw	r24, r30
    123a:	08 95       	ret

0000123c <__umulhisi3>:
    123c:	a2 9f       	mul	r26, r18
    123e:	b0 01       	movw	r22, r0
    1240:	b3 9f       	mul	r27, r19
    1242:	c0 01       	movw	r24, r0
    1244:	a3 9f       	mul	r26, r19
    1246:	70 0d       	add	r23, r0
    1248:	81 1d       	adc	r24, r1
    124a:	11 24       	eor	r1, r1
    124c:	91 1d       	adc	r25, r1
    124e:	b2 9f       	mul	r27, r18
    1250:	70 0d       	add	r23, r0
    1252:	81 1d       	adc	r24, r1
    1254:	11 24       	eor	r1, r1
    1256:	91 1d       	adc	r25, r1
    1258:	08 95       	ret

0000125a <__muluhisi3>:
    125a:	0e 94 1e 09 	call	0x123c	; 0x123c <__umulhisi3>
    125e:	a5 9f       	mul	r26, r21
    1260:	90 0d       	add	r25, r0
    1262:	b4 9f       	mul	r27, r20
    1264:	90 0d       	add	r25, r0
    1266:	a4 9f       	mul	r26, r20
    1268:	80 0d       	add	r24, r0
    126a:	91 1d       	adc	r25, r1
    126c:	11 24       	eor	r1, r1
    126e:	08 95       	ret

00001270 <_exit>:
    1270:	f8 94       	cli

00001272 <__stop_program>:
    1272:	ff cf       	rjmp	.-2      	; 0x1272 <__stop_program>
