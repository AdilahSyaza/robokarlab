
robokargame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800100  000013d8  0000146c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000038d  00800220  00800220  0000158c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015a0  2**2
                  CONTENTS, READONLY
  5 .avr.prop     00000016  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000168  00000000  00000000  000015f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001608  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000862  00000000  00000000  00002d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b78  00000000  00000000  000035ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e0  00000000  00000000  00004144  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000064d  00000000  00000000  00004224  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000228  00000000  00000000  00004871  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00004a99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ed       	ldi	r30, 0xD8	; 216
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 32       	cpi	r26, 0x20	; 32
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a0 e2       	ldi	r26, 0x20	; 32
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 3a       	cpi	r26, 0xAD	; 173
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <main>
      9e:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CheckCollision>:
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ){ /* obstacle? */
     myrobot.obstacle = 1; /* signal obstacle present */
      a6:	c1 e0       	ldi	r28, 0x01	; 1
/*------High pririority task----------*/
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ){ /* obstacle? */
      a8:	0e 94 21 03 	call	0x642	; 0x642 <robo_proxSensor>
      ac:	01 97       	sbiw	r24, 0x01	; 1
      ae:	51 f4       	brne	.+20     	; 0xc4 <CheckCollision+0x1e>
     myrobot.obstacle = 1; /* signal obstacle present */
      b0:	c0 93 a6 02 	sts	0x02A6, r28	; 0x8002a6 <myrobot+0x4>
 }else
     myrobot.obstacle = 0; /* signal no obstacle */

 OSTimeDlyHMSM(0, 0, 0, 100); /* Task period ~ 100 ms */
      b4:	24 e6       	ldi	r18, 0x64	; 100
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	40 e0       	ldi	r20, 0x00	; 0
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 ed 08 	call	0x11da	; 0x11da <OSTimeDlyHMSM>
/*------High pririority task----------*/
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ){ /* obstacle? */
      c2:	f2 cf       	rjmp	.-28     	; 0xa8 <CheckCollision+0x2>
     myrobot.obstacle = 1; /* signal obstacle present */
 }else
     myrobot.obstacle = 0; /* signal no obstacle */
      c4:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <myrobot+0x4>
      c8:	f5 cf       	rjmp	.-22     	; 0xb4 <CheckCollision+0xe>

000000ca <CntrlMotors>:

 for(;;)
 {
  speed_r = myrobot.rspeed;
  speed_l = myrobot.lspeed;
  robo_motorSpeed(speed_l, speed_r);
      ca:	60 91 a2 02 	lds	r22, 0x02A2	; 0x8002a2 <myrobot>
      ce:	70 91 a3 02 	lds	r23, 0x02A3	; 0x8002a3 <myrobot+0x1>
      d2:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <myrobot+0x2>
      d6:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <myrobot+0x3>
      da:	0e 94 c6 02 	call	0x58c	; 0x58c <robo_motorSpeed>
  OSTimeDlyHMSM(0, 0, 0, 10); /* Task period ~ 250 ms */
      de:	2a e0       	ldi	r18, 0x0A	; 10
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 ed 08 	call	0x11da	; 0x11da <OSTimeDlyHMSM>
      ec:	ee cf       	rjmp	.-36     	; 0xca <CntrlMotors>

000000ee <Navig>:
/* --- Task for navigating robot ----
* Write you own navigation task here
*/

void Navig (void *data)
{
      ee:	2f 92       	push	r2
      f0:	3f 92       	push	r3
      f2:	4f 92       	push	r4
      f4:	5f 92       	push	r5
      f6:	6f 92       	push	r6
      f8:	7f 92       	push	r7
      fa:	8f 92       	push	r8
      fc:	9f 92       	push	r9
      fe:	af 92       	push	r10
     100:	bf 92       	push	r11
     102:	cf 92       	push	r12
     104:	df 92       	push	r13
     106:	ef 92       	push	r14
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
	  }

		else if (robo_lineSensor() == 7)
	  {
	  	myrobot.rspeed = 90; 
	   	myrobot.lspeed = 50;
     112:	02 e3       	ldi	r16, 0x32	; 50
     114:	10 e0       	ldi	r17, 0x00	; 0
	   myrobot.lspeed = 70; /* corner right */
	  }else if (robo_lineSensor() == 0)
	  {

			myrobot.rspeed = -70; 
	    	myrobot.lspeed = -20;
     116:	5c ee       	ldi	r21, 0xEC	; 236
     118:	a5 2e       	mov	r10, r21
     11a:	bb 24       	eor	r11, r11
     11c:	ba 94       	dec	r11
	   myrobot.lspeed = -20; /* corner left */

	  }else if (robo_lineSensor() == 3)
	  {
	    count = 0;
	    myrobot.rspeed = -30; 
     11e:	62 ee       	ldi	r22, 0xE2	; 226
     120:	e6 2e       	mov	r14, r22
     122:	ff 24       	eor	r15, r15
     124:	fa 94       	dec	r15
	   myrobot.lspeed = 70; /* corner right */
     126:	c6 e4       	ldi	r28, 0x46	; 70
     128:	d0 e0       	ldi	r29, 0x00	; 0
	   myrobot.lspeed = 70; /* turn right */

	  }else if (robo_lineSensor() == 6)
	  {

	    myrobot.rspeed = 55; 
     12a:	87 e3       	ldi	r24, 0x37	; 55
     12c:	68 2e       	mov	r6, r24
     12e:	71 2c       	mov	r7, r1
	    myrobot.rspeed = 70 ;/* turn left */
	   myrobot.lspeed =  -40;
	  }else if (robo_lineSensor() == 1)
	  {

	    myrobot.rspeed = -40; 
     130:	98 ed       	ldi	r25, 0xD8	; 216
     132:	c9 2e       	mov	r12, r25
     134:	dd 24       	eor	r13, r13
     136:	da 94       	dec	r13
	else{

	if (robo_lineSensor() == 2) /* go straight */
	  {
	   count = 0;
	   myrobot.rspeed = 60;
     138:	2c e3       	ldi	r18, 0x3C	; 60
     13a:	82 2e       	mov	r8, r18
     13c:	91 2c       	mov	r9, r1
		        myrobot.rspeed = 50;          
		        myrobot.lspeed = -30;
				break;
			case 7:
		        myrobot.rspeed = 60;       
		        myrobot.lspeed = 45;
     13e:	3d e2       	ldi	r19, 0x2D	; 45
     140:	23 2e       	mov	r2, r19
     142:	31 2c       	mov	r3, r1
		   myrobot.lspeed = 0;
			robo_Honk();
			break;
		  }else{
		  myrobot.rspeed = -20; /* REVERSE */
		   myrobot.lspeed = 80;
     144:	40 e5       	ldi	r20, 0x50	; 80
     146:	44 2e       	mov	r4, r20
     148:	51 2c       	mov	r5, r1
void Navig (void *data)
{

 for (;;)
 {
 	cprintf("%d \n", robo_lineSensor());
     14a:	0e 94 44 03 	call	0x688	; 0x688 <robo_lineSensor>
     14e:	9f 93       	push	r25
     150:	8f 93       	push	r24
     152:	8a e1       	ldi	r24, 0x1A	; 26
     154:	92 e0       	ldi	r25, 0x02	; 2
     156:	9f 93       	push	r25
     158:	8f 93       	push	r24
     15a:	0e 94 bf 03 	call	0x77e	; 0x77e <cprintf>
  if (myrobot.obstacle == 1) /* If blocked then reverse */
     15e:	0f 90       	pop	r0
     160:	0f 90       	pop	r0
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <myrobot+0x4>
     16a:	81 30       	cpi	r24, 0x01	; 1
     16c:	09 f0       	breq	.+2      	; 0x170 <Navig+0x82>
     16e:	48 c0       	rjmp	.+144    	; 0x200 <Navig+0x112>
  {
  	if (pastLight == 1) /* If blocked then stop */
     170:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     174:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <__data_end+0x1>
     178:	01 97       	sbiw	r24, 0x01	; 1
     17a:	19 f5       	brne	.+70     	; 0x1c2 <Navig+0xd4>
		  {
		  	myrobot.rspeed = 0; /* stop */
     17c:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <myrobot+0x1>
     180:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <myrobot>
		   myrobot.lspeed = 0;
     184:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <myrobot+0x3>
     188:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <myrobot+0x2>
			robo_Honk();
     18c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <robo_Honk>
	  }
	  
  }
  

	OSTimeDlyHMSM(0, 0, 0, 10);
     190:	2a e0       	ldi	r18, 0x0A	; 10
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	40 e0       	ldi	r20, 0x00	; 0
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	80 e0       	ldi	r24, 0x00	; 0
	
  /* OSTimeDlyHMSM(0, 0, 0, 10); Task period ~ 500 ms */
 }
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	1f 91       	pop	r17
     1a0:	0f 91       	pop	r16
     1a2:	ff 90       	pop	r15
     1a4:	ef 90       	pop	r14
     1a6:	df 90       	pop	r13
     1a8:	cf 90       	pop	r12
     1aa:	bf 90       	pop	r11
     1ac:	af 90       	pop	r10
     1ae:	9f 90       	pop	r9
     1b0:	8f 90       	pop	r8
     1b2:	7f 90       	pop	r7
     1b4:	6f 90       	pop	r6
     1b6:	5f 90       	pop	r5
     1b8:	4f 90       	pop	r4
     1ba:	3f 90       	pop	r3
     1bc:	2f 90       	pop	r2
	  }
	  
  }
  

	OSTimeDlyHMSM(0, 0, 0, 10);
     1be:	0c 94 ed 08 	jmp	0x11da	; 0x11da <OSTimeDlyHMSM>
		  	myrobot.rspeed = 0; /* stop */
		   myrobot.lspeed = 0;
			robo_Honk();
			break;
		  }else{
		  myrobot.rspeed = -20; /* REVERSE */
     1c2:	b0 92 a3 02 	sts	0x02A3, r11	; 0x8002a3 <myrobot+0x1>
     1c6:	a0 92 a2 02 	sts	0x02A2, r10	; 0x8002a2 <myrobot>
		   myrobot.lspeed = 80;
     1ca:	50 92 a5 02 	sts	0x02A5, r5	; 0x8002a5 <myrobot+0x3>
     1ce:	40 92 a4 02 	sts	0x02A4, r4	; 0x8002a4 <myrobot+0x2>
			OSTimeDlyHMSM(0, 0, 0, 250);
     1d2:	2a ef       	ldi	r18, 0xFA	; 250
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e0       	ldi	r20, 0x00	; 0
     1d8:	60 e0       	ldi	r22, 0x00	; 0
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	0e 94 ed 08 	call	0x11da	; 0x11da <OSTimeDlyHMSM>
		   myrobot.rspeed = 70;
     1e0:	d0 93 a3 02 	sts	0x02A3, r29	; 0x8002a3 <myrobot+0x1>
     1e4:	c0 93 a2 02 	sts	0x02A2, r28	; 0x8002a2 <myrobot>
			myrobot.lspeed = 70;
     1e8:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <myrobot+0x3>
     1ec:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <myrobot+0x2>
			OSTimeDlyHMSM(0, 0, 1, 0);
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	20 e0       	ldi	r18, 0x00	; 0
     1f4:	41 e0       	ldi	r20, 0x01	; 1

		else if (robo_lineSensor() == 7)
	  {
	  	myrobot.rspeed = 90; 
	   	myrobot.lspeed = 50;
		OSTimeDlyHMSM(0, 0, 0, 20);
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	0e 94 ed 08 	call	0x11da	; 0x11da <OSTimeDlyHMSM>
     1fe:	22 c0       	rjmp	.+68     	; 0x244 <Navig+0x156>
			OSTimeDlyHMSM(0, 0, 1, 0);
		  }
  	
   
  }else{
  robo_LED_off();
     200:	28 98       	cbi	0x05, 0	; 5
  	
	if(pastLight==1){
     202:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     206:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <__data_end+0x1>
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	09 f0       	breq	.+2      	; 0x210 <Navig+0x122>
     20e:	68 c0       	rjmp	.+208    	; 0x2e0 <Navig+0x1f2>

		switch (robo_lineSensor()) {
     210:	0e 94 44 03 	call	0x688	; 0x688 <robo_lineSensor>
     214:	88 30       	cpi	r24, 0x08	; 8
     216:	91 05       	cpc	r25, r1
     218:	a8 f4       	brcc	.+42     	; 0x244 <Navig+0x156>
     21a:	fc 01       	movw	r30, r24
     21c:	ee 5e       	subi	r30, 0xEE	; 238
     21e:	fe 4f       	sbci	r31, 0xFE	; 254
     220:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__tablejump2__>
     224:	65 01       	movw	r12, r10
     226:	1a 01       	movw	r2, r20
     228:	45 01       	movw	r8, r10
     22a:	40 01       	movw	r8, r0
     22c:	53 01       	movw	r10, r6
     22e:	22 01       	movw	r4, r4
     230:	4a 01       	movw	r8, r20
     232:	5c 01       	movw	r10, r24
			case 1:	//turn right
				myrobot.rspeed = -30;          
     234:	f0 92 a3 02 	sts	0x02A3, r15	; 0x8002a3 <myrobot+0x1>
     238:	e0 92 a2 02 	sts	0x02A2, r14	; 0x8002a2 <myrobot>
		        myrobot.rspeed = -40;          
		        myrobot.lspeed = 50;
				break;
		    case 2:	//forward
				myrobot.rspeed = 60;          
		        myrobot.lspeed = 50;
     23c:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <myrobot+0x3>
     240:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <myrobot+0x2>
	  }
  

	// for light sensor
	
	  if (robo_lightSensor() > 80)
     244:	0e 94 2d 03 	call	0x65a	; 0x65a <robo_lightSensor>
     248:	81 35       	cpi	r24, 0x51	; 81
     24a:	91 05       	cpc	r25, r1
     24c:	0c f4       	brge	.+2      	; 0x250 <Navig+0x162>
     24e:	7d cf       	rjmp	.-262    	; 0x14a <Navig+0x5c>
	  {
	   myrobot.rspeed = 70;
     250:	d0 93 a3 02 	sts	0x02A3, r29	; 0x8002a3 <myrobot+0x1>
     254:	c0 93 a2 02 	sts	0x02A2, r28	; 0x8002a2 <myrobot>
	   myrobot.lspeed = 10;
     258:	8a e0       	ldi	r24, 0x0A	; 10
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <myrobot+0x3>
     260:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <myrobot+0x2>
	   OSTimeDlyHMSM(0, 0, 0, 100);
     264:	24 e6       	ldi	r18, 0x64	; 100
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	0e 94 ed 08 	call	0x11da	; 0x11da <OSTimeDlyHMSM>
	   pastLight = 1;
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <__data_end+0x1>
     27a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__data_end>
     27e:	55 cf       	rjmp	.-342    	; 0x12a <Navig+0x3c>
			case 1:	//turn right
				myrobot.rspeed = -30;          
		        myrobot.lspeed = 50;
				break;
		    case 3:	//corner right
		        myrobot.rspeed = -40;          
     280:	d0 92 a3 02 	sts	0x02A3, r13	; 0x8002a3 <myrobot+0x1>
     284:	c0 92 a2 02 	sts	0x02A2, r12	; 0x8002a2 <myrobot>
     288:	d9 cf       	rjmp	.-78     	; 0x23c <Navig+0x14e>
		        myrobot.lspeed = 50;
				break;
		    case 2:	//forward
				myrobot.rspeed = 60;          
     28a:	90 92 a3 02 	sts	0x02A3, r9	; 0x8002a3 <myrobot+0x1>
     28e:	80 92 a2 02 	sts	0x02A2, r8	; 0x8002a2 <myrobot>
     292:	d4 cf       	rjmp	.-88     	; 0x23c <Navig+0x14e>
		        myrobot.lspeed = 50;
				break;
		    case 6:	//corner left
				myrobot.rspeed = 55;          
     294:	70 92 a3 02 	sts	0x02A3, r7	; 0x8002a3 <myrobot+0x1>
     298:	60 92 a2 02 	sts	0x02A2, r6	; 0x8002a2 <myrobot>
	   myrobot.lspeed = 70;
	  }else if (robo_lineSensor() == 4)
	  {
	   count = 0;
	    myrobot.rspeed = 70 ;/* turn left */
	   myrobot.lspeed =  -40;
     29c:	d0 92 a5 02 	sts	0x02A5, r13	; 0x8002a5 <myrobot+0x3>
     2a0:	c0 92 a4 02 	sts	0x02A4, r12	; 0x8002a4 <myrobot+0x2>
     2a4:	cf cf       	rjmp	.-98     	; 0x244 <Navig+0x156>
		    case 6:	//corner left
				myrobot.rspeed = 55;          
		        myrobot.lspeed = -40;
				break;
		    case 4:	//turn left
		        myrobot.rspeed = 50;          
     2a6:	10 93 a3 02 	sts	0x02A3, r17	; 0x8002a3 <myrobot+0x1>
     2aa:	00 93 a2 02 	sts	0x02A2, r16	; 0x8002a2 <myrobot>
		        myrobot.lspeed = -30;
     2ae:	f0 92 a5 02 	sts	0x02A5, r15	; 0x8002a5 <myrobot+0x3>
     2b2:	e0 92 a4 02 	sts	0x02A4, r14	; 0x8002a4 <myrobot+0x2>
				break;
     2b6:	c6 cf       	rjmp	.-116    	; 0x244 <Navig+0x156>
			case 7:
		        myrobot.rspeed = 60;       
     2b8:	90 92 a3 02 	sts	0x02A3, r9	; 0x8002a3 <myrobot+0x1>
     2bc:	80 92 a2 02 	sts	0x02A2, r8	; 0x8002a2 <myrobot>
		        myrobot.lspeed = 45;
     2c0:	30 92 a5 02 	sts	0x02A5, r3	; 0x8002a5 <myrobot+0x3>
     2c4:	20 92 a4 02 	sts	0x02A4, r2	; 0x8002a4 <myrobot+0x2>
				//printf("%d\n", robo_lineSensor());
				break;
     2c8:	bd cf       	rjmp	.-134    	; 0x244 <Navig+0x156>
		    case 0:	//reverse
		        myrobot.rspeed = -30;          
     2ca:	f0 92 a3 02 	sts	0x02A3, r15	; 0x8002a3 <myrobot+0x1>
     2ce:	e0 92 a2 02 	sts	0x02A2, r14	; 0x8002a2 <myrobot>
		        myrobot.lspeed = -50;
     2d2:	8e ec       	ldi	r24, 0xCE	; 206
     2d4:	9f ef       	ldi	r25, 0xFF	; 255
     2d6:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <myrobot+0x3>
     2da:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <myrobot+0x2>
				//printf("%d\n", robo_lineSensor());
				break;
     2de:	b2 cf       	rjmp	.-156    	; 0x244 <Navig+0x156>
		

	}
	else{

	if (robo_lineSensor() == 2) /* go straight */
     2e0:	0e 94 44 03 	call	0x688	; 0x688 <robo_lineSensor>
     2e4:	02 97       	sbiw	r24, 0x02	; 2
     2e6:	69 f4       	brne	.+26     	; 0x302 <Navig+0x214>
	  {
	   count = 0;
     2e8:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <count+0x1>
     2ec:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <count>
	   myrobot.rspeed = 60;
     2f0:	90 92 a3 02 	sts	0x02A3, r9	; 0x8002a3 <myrobot+0x1>
     2f4:	80 92 a2 02 	sts	0x02A2, r8	; 0x8002a2 <myrobot>
	   myrobot.lspeed =  -40;
	  }else if (robo_lineSensor() == 1)
	  {

	    myrobot.rspeed = -40; 
	   myrobot.lspeed = 70; /* turn right */
     2f8:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <myrobot+0x3>
     2fc:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <myrobot+0x2>
     300:	a1 cf       	rjmp	.-190    	; 0x244 <Navig+0x156>
	if (robo_lineSensor() == 2) /* go straight */
	  {
	   count = 0;
	   myrobot.rspeed = 60;
	   myrobot.lspeed = 70;
	  }else if (robo_lineSensor() == 4)
     302:	0e 94 44 03 	call	0x688	; 0x688 <robo_lineSensor>
     306:	04 97       	sbiw	r24, 0x04	; 4
     308:	49 f4       	brne	.+18     	; 0x31c <Navig+0x22e>
	  {
	   count = 0;
     30a:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <count+0x1>
     30e:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <count>
	    myrobot.rspeed = 70 ;/* turn left */
     312:	d0 93 a3 02 	sts	0x02A3, r29	; 0x8002a3 <myrobot+0x1>
     316:	c0 93 a2 02 	sts	0x02A2, r28	; 0x8002a2 <myrobot>
     31a:	c0 cf       	rjmp	.-128    	; 0x29c <Navig+0x1ae>
	   myrobot.lspeed =  -40;
	  }else if (robo_lineSensor() == 1)
     31c:	0e 94 44 03 	call	0x688	; 0x688 <robo_lineSensor>
     320:	01 97       	sbiw	r24, 0x01	; 1
     322:	29 f4       	brne	.+10     	; 0x32e <Navig+0x240>
	  {

	    myrobot.rspeed = -40; 
     324:	d0 92 a3 02 	sts	0x02A3, r13	; 0x8002a3 <myrobot+0x1>
     328:	c0 92 a2 02 	sts	0x02A2, r12	; 0x8002a2 <myrobot>
     32c:	e5 cf       	rjmp	.-54     	; 0x2f8 <Navig+0x20a>
	   myrobot.lspeed = 70; /* turn right */

	  }else if (robo_lineSensor() == 6)
     32e:	0e 94 44 03 	call	0x688	; 0x688 <robo_lineSensor>
     332:	06 97       	sbiw	r24, 0x06	; 6
     334:	49 f4       	brne	.+18     	; 0x348 <Navig+0x25a>
	  {

	    myrobot.rspeed = 55; 
     336:	70 92 a3 02 	sts	0x02A3, r7	; 0x8002a3 <myrobot+0x1>
     33a:	60 92 a2 02 	sts	0x02A2, r6	; 0x8002a2 <myrobot>
	   myrobot.lspeed = 70; /* corner right */
	  }else if (robo_lineSensor() == 0)
	  {

			myrobot.rspeed = -70; 
	    	myrobot.lspeed = -20;
     33e:	b0 92 a5 02 	sts	0x02A5, r11	; 0x8002a5 <myrobot+0x3>
     342:	a0 92 a4 02 	sts	0x02A4, r10	; 0x8002a4 <myrobot+0x2>
     346:	7e cf       	rjmp	.-260    	; 0x244 <Navig+0x156>
	  {

	    myrobot.rspeed = 55; 
	   myrobot.lspeed = -20; /* corner left */

	  }else if (robo_lineSensor() == 3)
     348:	0e 94 44 03 	call	0x688	; 0x688 <robo_lineSensor>
     34c:	03 97       	sbiw	r24, 0x03	; 3
     34e:	49 f4       	brne	.+18     	; 0x362 <Navig+0x274>
	  {
	    count = 0;
     350:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <count+0x1>
     354:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <count>
	    myrobot.rspeed = -30; 
     358:	f0 92 a3 02 	sts	0x02A3, r15	; 0x8002a3 <myrobot+0x1>
     35c:	e0 92 a2 02 	sts	0x02A2, r14	; 0x8002a2 <myrobot>
     360:	cb cf       	rjmp	.-106    	; 0x2f8 <Navig+0x20a>
	   myrobot.lspeed = 70; /* corner right */
	  }else if (robo_lineSensor() == 0)
     362:	0e 94 44 03 	call	0x688	; 0x688 <robo_lineSensor>
     366:	89 2b       	or	r24, r25
     368:	39 f4       	brne	.+14     	; 0x378 <Navig+0x28a>
	  {

			myrobot.rspeed = -70; 
     36a:	8a eb       	ldi	r24, 0xBA	; 186
     36c:	9f ef       	ldi	r25, 0xFF	; 255
     36e:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <myrobot+0x1>
     372:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <myrobot>
     376:	e3 cf       	rjmp	.-58     	; 0x33e <Navig+0x250>
	    	myrobot.lspeed = -20;
	    
	  }

		else if (robo_lineSensor() == 7)
     378:	0e 94 44 03 	call	0x688	; 0x688 <robo_lineSensor>
     37c:	07 97       	sbiw	r24, 0x07	; 7
     37e:	09 f0       	breq	.+2      	; 0x382 <Navig+0x294>
     380:	61 cf       	rjmp	.-318    	; 0x244 <Navig+0x156>
	  {
	  	myrobot.rspeed = 90; 
     382:	8a e5       	ldi	r24, 0x5A	; 90
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <myrobot+0x1>
     38a:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <myrobot>
	   	myrobot.lspeed = 50;
     38e:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <myrobot+0x3>
     392:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <myrobot+0x2>
		OSTimeDlyHMSM(0, 0, 0, 20);
     396:	24 e1       	ldi	r18, 0x14	; 20
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	40 e0       	ldi	r20, 0x00	; 0
     39c:	2c cf       	rjmp	.-424    	; 0x1f6 <Navig+0x108>

0000039e <TaskStart>:


/*------Highest pririority task----------*/
/* Create all other tasks here */
void TaskStart( void *data )
{
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <TaskStart+0x6>
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
 OS_ticks_init(); /* enable RTOS timer tick */
     3a8:	0e 94 94 03 	call	0x728	; 0x728 <OS_ticks_init>
	int  counter;
 OSTaskCreate(CheckCollision , /* Task function */
     3ac:	22 e0       	ldi	r18, 0x02	; 2
     3ae:	41 ea       	ldi	r20, 0xA1	; 161
     3b0:	52 e0       	ldi	r21, 0x02	; 2
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	83 e5       	ldi	r24, 0x53	; 83
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 9c 07 	call	0xf38	; 0xf38 <OSTaskCreate>
 (void *)0, /* nothing passed to task */
 (void *)&ChkCollideStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_CHKCOLLIDE_PRIO); /* priority of task */

 OSTaskCreate(CntrlMotors , /* Task function */
     3be:	23 e0       	ldi	r18, 0x03	; 3
     3c0:	46 e2       	ldi	r20, 0x26	; 38
     3c2:	53 e0       	ldi	r21, 0x03	; 3
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	85 e6       	ldi	r24, 0x65	; 101
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 9c 07 	call	0xf38	; 0xf38 <OSTaskCreate>
 (void *)0, /* nothing passed to task */
 (void *)&CtrlmotorStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_CTRLMOTOR_PRIO); /* priority of task */

 OSTaskCreate(Navig, /* Task function */
     3d0:	24 e0       	ldi	r18, 0x04	; 4
     3d2:	48 e2       	ldi	r20, 0x28	; 40
     3d4:	54 e0       	ldi	r21, 0x04	; 4
     3d6:	be 01       	movw	r22, r28
     3d8:	6f 5f       	subi	r22, 0xFF	; 255
     3da:	7f 4f       	sbci	r23, 0xFF	; 255
     3dc:	87 e7       	ldi	r24, 0x77	; 119
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 9c 07 	call	0xf38	; 0xf38 <OSTaskCreate>
 TASK_NAVIG_PRIO); /* priority of task */

 while(1)
 {
  OSTimeDlyHMSM(0, 0, 5, 0); /* Task period ~ 5 secs, argument position: HOURS, MINUTES, SECONDS, and MILLISECONDS S*/ 
  robo_LED_toggle(); /* Show that we are alive */
     3e4:	11 e0       	ldi	r17, 0x01	; 1
 (void *)&NavigStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_NAVIG_PRIO); /* priority of task */

 while(1)
 {
  OSTimeDlyHMSM(0, 0, 5, 0); /* Task period ~ 5 secs, argument position: HOURS, MINUTES, SECONDS, and MILLISECONDS S*/ 
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	45 e0       	ldi	r20, 0x05	; 5
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	0e 94 ed 08 	call	0x11da	; 0x11da <OSTimeDlyHMSM>
  robo_LED_toggle(); /* Show that we are alive */
     3f4:	85 b1       	in	r24, 0x05	; 5
     3f6:	81 27       	eor	r24, r17
     3f8:	85 b9       	out	0x05, r24	; 5
     3fa:	f5 cf       	rjmp	.-22     	; 0x3e6 <TaskStart+0x48>

000003fc <ADC_init>:
     3fc:	80 e4       	ldi	r24, 0x40	; 64
     3fe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     402:	86 e8       	ldi	r24, 0x86	; 134
     404:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     408:	08 95       	ret

0000040a <ADC_read>:
     40a:	f8 94       	cli
     40c:	80 64       	ori	r24, 0x40	; 64
     40e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     412:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     416:	80 64       	ori	r24, 0x40	; 64
     418:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     41c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     420:	84 ff       	sbrs	r24, 4
     422:	fc cf       	rjmp	.-8      	; 0x41c <ADC_read+0x12>
     424:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     428:	80 61       	ori	r24, 0x10	; 16
     42a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     42e:	78 94       	sei
     430:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     434:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     438:	93 70       	andi	r25, 0x03	; 3
     43a:	08 95       	ret

0000043c <PWM8_write>:
     43c:	81 11       	cpse	r24, r1
     43e:	05 c0       	rjmp	.+10     	; 0x44a <PWM8_write+0xe>
     440:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     444:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     448:	08 95       	ret
     44a:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     44e:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     452:	08 95       	ret

00000454 <motor_init>:
     454:	8a b1       	in	r24, 0x0a	; 10
     456:	80 6f       	ori	r24, 0xF0	; 240
     458:	8a b9       	out	0x0a, r24	; 10
     45a:	8b b1       	in	r24, 0x0b	; 11
     45c:	8f 70       	andi	r24, 0x0F	; 15
     45e:	8b b9       	out	0x0b, r24	; 11
     460:	81 ea       	ldi	r24, 0xA1	; 161
     462:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     466:	83 e0       	ldi	r24, 0x03	; 3
     468:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     46c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     470:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     474:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     478:	a8 e8       	ldi	r26, 0x88	; 136
     47a:	b0 e0       	ldi	r27, 0x00	; 0
     47c:	1c 92       	st	X, r1
     47e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     482:	ea e8       	ldi	r30, 0x8A	; 138
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	10 82       	st	Z, r1
     488:	84 b1       	in	r24, 0x04	; 4
     48a:	86 60       	ori	r24, 0x06	; 6
     48c:	84 b9       	out	0x04, r24	; 4
     48e:	11 96       	adiw	r26, 0x01	; 1
     490:	1c 92       	st	X, r1
     492:	1e 92       	st	-X, r1
     494:	11 82       	std	Z+1, r1	; 0x01
     496:	10 82       	st	Z, r1
     498:	08 95       	ret

0000049a <motor_set_speed>:
     49a:	77 ff       	sbrs	r23, 7
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <motor_set_speed+0x8>
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	65 36       	cpi	r22, 0x65	; 101
     4a4:	71 05       	cpc	r23, r1
     4a6:	14 f0       	brlt	.+4      	; 0x4ac <motor_set_speed+0x12>
     4a8:	64 e6       	ldi	r22, 0x64	; 100
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	9b 01       	movw	r18, r22
     4ae:	22 0f       	add	r18, r18
     4b0:	33 1f       	adc	r19, r19
     4b2:	75 95       	asr	r23
     4b4:	67 95       	ror	r22
     4b6:	62 0f       	add	r22, r18
     4b8:	73 1f       	adc	r23, r19
     4ba:	81 11       	cpse	r24, r1
     4bc:	09 c0       	rjmp	.+18     	; 0x4d0 <motor_set_speed+0x36>
     4be:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     4c2:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     4c6:	70 93 2a 04 	sts	0x042A, r23	; 0x80042a <rightWst+0x1>
     4ca:	60 93 29 04 	sts	0x0429, r22	; 0x800429 <rightWst>
     4ce:	08 95       	ret
     4d0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     4d4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     4d8:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <leftWst+0x1>
     4dc:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <leftWst>
     4e0:	08 95       	ret

000004e2 <motor_set_dir>:
     4e2:	cf 93       	push	r28
     4e4:	c6 2f       	mov	r28, r22
     4e6:	26 2f       	mov	r18, r22
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	81 11       	cpse	r24, r1
     4ec:	2b c0       	rjmp	.+86     	; 0x544 <motor_set_dir+0x62>
     4ee:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <rightWst+0x2>
     4f2:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <rightWst+0x3>
     4f6:	82 17       	cp	r24, r18
     4f8:	93 07       	cpc	r25, r19
     4fa:	59 f0       	breq	.+22     	; 0x512 <motor_set_dir+0x30>
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 4d 02 	call	0x49a	; 0x49a <motor_set_speed>
     506:	8f e9       	ldi	r24, 0x9F	; 159
     508:	9f e0       	ldi	r25, 0x0F	; 15
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <motor_set_dir+0x28>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <motor_set_dir+0x2e>
     510:	00 00       	nop
     512:	c1 11       	cpse	r28, r1
     514:	0e c0       	rjmp	.+28     	; 0x532 <motor_set_dir+0x50>
     516:	5e 98       	cbi	0x0b, 6	; 11
     518:	5f 9a       	sbi	0x0b, 7	; 11
     51a:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <rightWst+0x3>
     51e:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <rightWst+0x2>
     522:	8f e3       	ldi	r24, 0x3F	; 63
     524:	9c e9       	ldi	r25, 0x9C	; 156
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <motor_set_dir+0x44>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <motor_set_dir+0x4a>
     52c:	00 00       	nop
     52e:	cf 91       	pop	r28
     530:	08 95       	ret
     532:	5e 9a       	sbi	0x0b, 6	; 11
     534:	5f 98       	cbi	0x0b, 7	; 11
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <rightWst+0x3>
     53e:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <rightWst+0x2>
     542:	ef cf       	rjmp	.-34     	; 0x522 <motor_set_dir+0x40>
     544:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <leftWst+0x2>
     548:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <leftWst+0x3>
     54c:	82 17       	cp	r24, r18
     54e:	93 07       	cpc	r25, r19
     550:	59 f0       	breq	.+22     	; 0x568 <motor_set_dir+0x86>
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	0e 94 4d 02 	call	0x49a	; 0x49a <motor_set_speed>
     55c:	8f e9       	ldi	r24, 0x9F	; 159
     55e:	9f e0       	ldi	r25, 0x0F	; 15
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	f1 f7       	brne	.-4      	; 0x560 <motor_set_dir+0x7e>
     564:	00 c0       	rjmp	.+0      	; 0x566 <motor_set_dir+0x84>
     566:	00 00       	nop
     568:	c1 11       	cpse	r28, r1
     56a:	07 c0       	rjmp	.+14     	; 0x57a <motor_set_dir+0x98>
     56c:	5c 9a       	sbi	0x0b, 4	; 11
     56e:	5d 98       	cbi	0x0b, 5	; 11
     570:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <leftWst+0x3>
     574:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <leftWst+0x2>
     578:	d4 cf       	rjmp	.-88     	; 0x522 <motor_set_dir+0x40>
     57a:	5c 98       	cbi	0x0b, 4	; 11
     57c:	5d 9a       	sbi	0x0b, 5	; 11
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <leftWst+0x3>
     586:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <leftWst+0x2>
     58a:	cb cf       	rjmp	.-106    	; 0x522 <motor_set_dir+0x40>

0000058c <robo_motorSpeed>:
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	ec 01       	movw	r28, r24
     596:	8b 01       	movw	r16, r22
     598:	97 ff       	sbrs	r25, 7
     59a:	1c c0       	rjmp	.+56     	; 0x5d4 <robo_motorSpeed+0x48>
     59c:	61 e0       	ldi	r22, 0x01	; 1
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <motor_set_dir>
     5a4:	d1 95       	neg	r29
     5a6:	c1 95       	neg	r28
     5a8:	d1 09       	sbc	r29, r1
     5aa:	17 ff       	sbrs	r17, 7
     5ac:	18 c0       	rjmp	.+48     	; 0x5de <robo_motorSpeed+0x52>
     5ae:	61 e0       	ldi	r22, 0x01	; 1
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <motor_set_dir>
     5b6:	11 95       	neg	r17
     5b8:	01 95       	neg	r16
     5ba:	11 09       	sbc	r17, r1
     5bc:	b8 01       	movw	r22, r16
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	0e 94 4d 02 	call	0x49a	; 0x49a <motor_set_speed>
     5c4:	be 01       	movw	r22, r28
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	0c 94 4d 02 	jmp	0x49a	; 0x49a <motor_set_speed>
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	0e 94 71 02 	call	0x4e2	; 0x4e2 <motor_set_dir>
     5dc:	e6 cf       	rjmp	.-52     	; 0x5aa <robo_motorSpeed+0x1e>
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <motor_set_dir>
     5e6:	ea cf       	rjmp	.-44     	; 0x5bc <robo_motorSpeed+0x30>

000005e8 <USART0_init>:
     5e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     5ec:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     5f0:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     5f4:	88 e1       	ldi	r24, 0x18	; 24
     5f6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     5fa:	86 e0       	ldi	r24, 0x06	; 6
     5fc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     600:	08 95       	ret

00000602 <cputchar>:
     602:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     606:	95 ff       	sbrs	r25, 5
     608:	fc cf       	rjmp	.-8      	; 0x602 <cputchar>
     60a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     60e:	08 95       	ret

00000610 <cgetchar>:
     610:	cf 93       	push	r28
     612:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     616:	87 ff       	sbrs	r24, 7
     618:	fc cf       	rjmp	.-8      	; 0x612 <cgetchar+0x2>
     61a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     61e:	8c 2f       	mov	r24, r28
     620:	0e 94 01 03 	call	0x602	; 0x602 <cputchar>
     624:	8c 2f       	mov	r24, r28
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <cputs>:
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	ec 01       	movw	r28, r24
     630:	89 91       	ld	r24, Y+
     632:	81 11       	cpse	r24, r1
     634:	03 c0       	rjmp	.+6      	; 0x63c <cputs+0x12>
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	08 95       	ret
     63c:	0e 94 01 03 	call	0x602	; 0x602 <cputchar>
     640:	f7 cf       	rjmp	.-18     	; 0x630 <cputs+0x6>

00000642 <robo_proxSensor>:
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     648:	21 e0       	ldi	r18, 0x01	; 1
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	84 36       	cpi	r24, 0x64	; 100
     64e:	91 05       	cpc	r25, r1
     650:	10 f0       	brcs	.+4      	; 0x656 <robo_proxSensor+0x14>
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	c9 01       	movw	r24, r18
     658:	08 95       	ret

0000065a <robo_lightSensor>:
     65a:	84 e0       	ldi	r24, 0x04	; 4
     65c:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     660:	2b ef       	ldi	r18, 0xFB	; 251
     662:	ac 01       	movw	r20, r24
     664:	24 03       	mulsu	r18, r20
     666:	c0 01       	movw	r24, r0
     668:	25 9f       	mul	r18, r21
     66a:	90 0d       	add	r25, r0
     66c:	11 24       	eor	r1, r1
     66e:	85 50       	subi	r24, 0x05	; 5
     670:	9c 4e       	sbci	r25, 0xEC	; 236
     672:	63 e3       	ldi	r22, 0x33	; 51
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	0e 94 94 09 	call	0x1328	; 0x1328 <__divmodhi4>
     67a:	cb 01       	movw	r24, r22
     67c:	65 36       	cpi	r22, 0x65	; 101
     67e:	71 05       	cpc	r23, r1
     680:	14 f0       	brlt	.+4      	; 0x686 <robo_lightSensor+0x2c>
     682:	84 e6       	ldi	r24, 0x64	; 100
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	08 95       	ret

00000688 <robo_lineSensor>:
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	c0 e0       	ldi	r28, 0x00	; 0
     68e:	d1 e0       	ldi	r29, 0x01	; 1
     690:	cc 0f       	add	r28, r28
     692:	8d 2f       	mov	r24, r29
     694:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     698:	8c 32       	cpi	r24, 0x2C	; 44
     69a:	91 40       	sbci	r25, 0x01	; 1
     69c:	0c f4       	brge	.+2      	; 0x6a0 <robo_lineSensor+0x18>
     69e:	c1 60       	ori	r28, 0x01	; 1
     6a0:	df 5f       	subi	r29, 0xFF	; 255
     6a2:	d4 30       	cpi	r29, 0x04	; 4
     6a4:	a9 f7       	brne	.-22     	; 0x690 <robo_lineSensor+0x8>
     6a6:	8c 2f       	mov	r24, r28
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	08 95       	ret

000006b0 <robo_bumpSensorR>:
     6b0:	83 b1       	in	r24, 0x03	; 3
     6b2:	82 95       	swap	r24
     6b4:	8f 70       	andi	r24, 0x0F	; 15
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	89 27       	eor	r24, r25
     6ba:	81 70       	andi	r24, 0x01	; 1
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	08 95       	ret

000006c0 <robo_bumpSensorL>:
     6c0:	83 b1       	in	r24, 0x03	; 3
     6c2:	86 95       	lsr	r24
     6c4:	86 95       	lsr	r24
     6c6:	86 95       	lsr	r24
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	89 27       	eor	r24, r25
     6cc:	81 70       	andi	r24, 0x01	; 1
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	08 95       	ret

000006d2 <robo_Honk>:
     6d2:	5b 9a       	sbi	0x0b, 3	; 11
     6d4:	2f ef       	ldi	r18, 0xFF	; 255
     6d6:	85 ea       	ldi	r24, 0xA5	; 165
     6d8:	9e e0       	ldi	r25, 0x0E	; 14
     6da:	21 50       	subi	r18, 0x01	; 1
     6dc:	80 40       	sbci	r24, 0x00	; 0
     6de:	90 40       	sbci	r25, 0x00	; 0
     6e0:	e1 f7       	brne	.-8      	; 0x6da <robo_Honk+0x8>
     6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <robo_Honk+0x12>
     6e4:	00 00       	nop
     6e6:	5b 98       	cbi	0x0b, 3	; 11
     6e8:	2f ef       	ldi	r18, 0xFF	; 255
     6ea:	85 ea       	ldi	r24, 0xA5	; 165
     6ec:	9e e0       	ldi	r25, 0x0E	; 14
     6ee:	21 50       	subi	r18, 0x01	; 1
     6f0:	80 40       	sbci	r24, 0x00	; 0
     6f2:	90 40       	sbci	r25, 0x00	; 0
     6f4:	e1 f7       	brne	.-8      	; 0x6ee <robo_Honk+0x1c>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <robo_Honk+0x26>
     6f8:	00 00       	nop
     6fa:	08 95       	ret

000006fc <robo_checkBattery>:
     6fc:	85 e0       	ldi	r24, 0x05	; 5
     6fe:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     702:	84 3f       	cpi	r24, 0xF4	; 244
     704:	91 40       	sbci	r25, 0x01	; 1
     706:	10 f4       	brcc	.+4      	; 0x70c <robo_checkBattery+0x10>
     708:	28 9a       	sbi	0x05, 0	; 5
     70a:	08 95       	ret
     70c:	28 98       	cbi	0x05, 0	; 5
     70e:	08 95       	ret

00000710 <robo_goPressed>:
     710:	89 b1       	in	r24, 0x09	; 9
     712:	82 fb       	bst	r24, 2
     714:	88 27       	eor	r24, r24
     716:	80 f9       	bld	r24, 0
     718:	91 e0       	ldi	r25, 0x01	; 1
     71a:	89 27       	eor	r24, r25
     71c:	08 95       	ret

0000071e <robo_wait4goPress>:
     71e:	0e 94 88 03 	call	0x710	; 0x710 <robo_goPressed>
     722:	88 23       	and	r24, r24
     724:	e1 f3       	breq	.-8      	; 0x71e <robo_wait4goPress>
     726:	08 95       	ret

00000728 <OS_ticks_init>:
     728:	f8 94       	cli
     72a:	85 e0       	ldi	r24, 0x05	; 5
     72c:	85 bd       	out	0x25, r24	; 37
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     734:	84 e6       	ldi	r24, 0x64	; 100
     736:	86 bd       	out	0x26, r24	; 38
     738:	78 94       	sei
     73a:	08 95       	ret

0000073c <HAL_init>:
     73c:	87 e6       	ldi	r24, 0x67	; 103
     73e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <USART0_init>
     742:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <ADC_init>

00000746 <robo_Setup>:
     746:	0e 94 9e 03 	call	0x73c	; 0x73c <HAL_init>
     74a:	0e 94 2a 02 	call	0x454	; 0x454 <motor_init>
     74e:	53 9a       	sbi	0x0a, 3	; 10
     750:	5b 98       	cbi	0x0b, 3	; 11
     752:	20 9a       	sbi	0x04, 0	; 4
     754:	52 98       	cbi	0x0a, 2	; 10
     756:	5a 9a       	sbi	0x0b, 2	; 11
     758:	24 98       	cbi	0x04, 4	; 4
     75a:	23 98       	cbi	0x04, 3	; 4
     75c:	85 b1       	in	r24, 0x05	; 5
     75e:	88 61       	ori	r24, 0x18	; 24
     760:	85 b9       	out	0x05, r24	; 5
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	0e 94 71 02 	call	0x4e2	; 0x4e2 <motor_set_dir>
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <motor_set_dir>
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	0c 94 c6 02 	jmp	0x58c	; 0x58c <robo_motorSpeed>

0000077e <cprintf>:
     77e:	4f 92       	push	r4
     780:	5f 92       	push	r5
     782:	6f 92       	push	r6
     784:	7f 92       	push	r7
     786:	8f 92       	push	r8
     788:	9f 92       	push	r9
     78a:	af 92       	push	r10
     78c:	bf 92       	push	r11
     78e:	cf 92       	push	r12
     790:	df 92       	push	r13
     792:	ef 92       	push	r14
     794:	ff 92       	push	r15
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
     7a2:	de 01       	movw	r26, r28
     7a4:	53 96       	adiw	r26, 0x13	; 19
     7a6:	ed 91       	ld	r30, X+
     7a8:	fd 91       	ld	r31, X+
     7aa:	8d 01       	movw	r16, r26
     7ac:	5a e0       	ldi	r21, 0x0A	; 10
     7ae:	65 2e       	mov	r6, r21
     7b0:	71 2c       	mov	r7, r1
     7b2:	80 81       	ld	r24, Z
     7b4:	85 32       	cpi	r24, 0x25	; 37
     7b6:	81 f4       	brne	.+32     	; 0x7d8 <cprintf+0x5a>
     7b8:	5f 01       	movw	r10, r30
     7ba:	82 e0       	ldi	r24, 0x02	; 2
     7bc:	a8 0e       	add	r10, r24
     7be:	b1 1c       	adc	r11, r1
     7c0:	81 81       	ldd	r24, Z+1	; 0x01
     7c2:	84 36       	cpi	r24, 0x64	; 100
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <cprintf+0x4a>
     7c6:	50 c0       	rjmp	.+160    	; 0x868 <cprintf+0xea>
     7c8:	90 f4       	brcc	.+36     	; 0x7ee <cprintf+0x70>
     7ca:	83 36       	cpi	r24, 0x63	; 99
     7cc:	61 f4       	brne	.+24     	; 0x7e6 <cprintf+0x68>
     7ce:	f8 01       	movw	r30, r16
     7d0:	80 81       	ld	r24, Z
     7d2:	0e 5f       	subi	r16, 0xFE	; 254
     7d4:	1f 4f       	sbci	r17, 0xFF	; 255
     7d6:	07 c0       	rjmp	.+14     	; 0x7e6 <cprintf+0x68>
     7d8:	88 23       	and	r24, r24
     7da:	09 f4       	brne	.+2      	; 0x7de <cprintf+0x60>
     7dc:	5d c0       	rjmp	.+186    	; 0x898 <cprintf+0x11a>
     7de:	5f 01       	movw	r10, r30
     7e0:	9f ef       	ldi	r25, 0xFF	; 255
     7e2:	a9 1a       	sub	r10, r25
     7e4:	b9 0a       	sbc	r11, r25
     7e6:	0e 94 01 03 	call	0x602	; 0x602 <cputchar>
     7ea:	f5 01       	movw	r30, r10
     7ec:	e2 cf       	rjmp	.-60     	; 0x7b2 <cprintf+0x34>
     7ee:	83 37       	cpi	r24, 0x73	; 115
     7f0:	71 f1       	breq	.+92     	; 0x84e <cprintf+0xd0>
     7f2:	30 e1       	ldi	r19, 0x10	; 16
     7f4:	83 2e       	mov	r8, r19
     7f6:	91 2c       	mov	r9, r1
     7f8:	e1 2c       	mov	r14, r1
     7fa:	40 e1       	ldi	r20, 0x10	; 16
     7fc:	f4 2e       	mov	r15, r20
     7fe:	88 37       	cpi	r24, 0x78	; 120
     800:	91 f7       	brne	.-28     	; 0x7e6 <cprintf+0x68>
     802:	f8 01       	movw	r30, r16
     804:	c0 80       	ld	r12, Z
     806:	d1 80       	ldd	r13, Z+1	; 0x01
     808:	0e 5f       	subi	r16, 0xFE	; 254
     80a:	1f 4f       	sbci	r17, 0xFF	; 255
     80c:	84 36       	cpi	r24, 0x64	; 100
     80e:	59 f4       	brne	.+22     	; 0x826 <cprintf+0xa8>
     810:	d7 fe       	sbrs	r13, 7
     812:	06 c0       	rjmp	.+12     	; 0x820 <cprintf+0xa2>
     814:	d1 94       	neg	r13
     816:	c1 94       	neg	r12
     818:	d1 08       	sbc	r13, r1
     81a:	8d e2       	ldi	r24, 0x2D	; 45
     81c:	0e 94 01 03 	call	0x602	; 0x602 <cputchar>
     820:	ce 14       	cp	r12, r14
     822:	df 04       	cpc	r13, r15
     824:	48 f1       	brcs	.+82     	; 0x878 <cprintf+0xfa>
     826:	c6 01       	movw	r24, r12
     828:	b7 01       	movw	r22, r14
     82a:	0e 94 80 09 	call	0x1300	; 0x1300 <__udivmodhi4>
     82e:	2c 01       	movw	r4, r24
     830:	67 5f       	subi	r22, 0xF7	; 247
     832:	7d 4f       	sbci	r23, 0xFD	; 253
     834:	fb 01       	movw	r30, r22
     836:	80 81       	ld	r24, Z
     838:	0e 94 01 03 	call	0x602	; 0x602 <cputchar>
     83c:	62 01       	movw	r12, r4
     83e:	c7 01       	movw	r24, r14
     840:	b4 01       	movw	r22, r8
     842:	0e 94 80 09 	call	0x1300	; 0x1300 <__udivmodhi4>
     846:	7b 01       	movw	r14, r22
     848:	67 2b       	or	r22, r23
     84a:	69 f7       	brne	.-38     	; 0x826 <cprintf+0xa8>
     84c:	ce cf       	rjmp	.-100    	; 0x7ea <cprintf+0x6c>
     84e:	f8 01       	movw	r30, r16
     850:	e0 80       	ld	r14, Z
     852:	f1 80       	ldd	r15, Z+1	; 0x01
     854:	0e 5f       	subi	r16, 0xFE	; 254
     856:	1f 4f       	sbci	r17, 0xFF	; 255
     858:	f7 01       	movw	r30, r14
     85a:	81 91       	ld	r24, Z+
     85c:	7f 01       	movw	r14, r30
     85e:	88 23       	and	r24, r24
     860:	21 f2       	breq	.-120    	; 0x7ea <cprintf+0x6c>
     862:	0e 94 01 03 	call	0x602	; 0x602 <cputchar>
     866:	f8 cf       	rjmp	.-16     	; 0x858 <cprintf+0xda>
     868:	9a e0       	ldi	r25, 0x0A	; 10
     86a:	89 2e       	mov	r8, r25
     86c:	91 2c       	mov	r9, r1
     86e:	20 e1       	ldi	r18, 0x10	; 16
     870:	e2 2e       	mov	r14, r18
     872:	27 e2       	ldi	r18, 0x27	; 39
     874:	f2 2e       	mov	r15, r18
     876:	c5 cf       	rjmp	.-118    	; 0x802 <cprintf+0x84>
     878:	c7 01       	movw	r24, r14
     87a:	b3 01       	movw	r22, r6
     87c:	0e 94 80 09 	call	0x1300	; 0x1300 <__udivmodhi4>
     880:	7b 01       	movw	r14, r22
     882:	62 30       	cpi	r22, 0x02	; 2
     884:	71 05       	cpc	r23, r1
     886:	60 f6       	brcc	.-104    	; 0x820 <cprintf+0xa2>
     888:	c6 01       	movw	r24, r12
     88a:	0e 94 80 09 	call	0x1300	; 0x1300 <__udivmodhi4>
     88e:	fb 01       	movw	r30, r22
     890:	e7 5f       	subi	r30, 0xF7	; 247
     892:	fd 4f       	sbci	r31, 0xFD	; 253
     894:	80 81       	ld	r24, Z
     896:	a7 cf       	rjmp	.-178    	; 0x7e6 <cprintf+0x68>
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	ff 90       	pop	r15
     8a6:	ef 90       	pop	r14
     8a8:	df 90       	pop	r13
     8aa:	cf 90       	pop	r12
     8ac:	bf 90       	pop	r11
     8ae:	af 90       	pop	r10
     8b0:	9f 90       	pop	r9
     8b2:	8f 90       	pop	r8
     8b4:	7f 90       	pop	r7
     8b6:	6f 90       	pop	r6
     8b8:	5f 90       	pop	r5
     8ba:	4f 90       	pop	r4
     8bc:	08 95       	ret

000008be <OSStartHighRdy>:
     8be:	00 91 32 04 	lds	r16, 0x0432	; 0x800432 <OSRunning>
     8c2:	03 95       	inc	r16
     8c4:	00 93 32 04 	sts	0x0432, r16	; 0x800432 <OSRunning>
     8c8:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <OSTCBHighRdy>
     8cc:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <OSTCBHighRdy+0x1>
     8d0:	c1 91       	ld	r28, Z+
     8d2:	cd bf       	out	0x3d, r28	; 61
     8d4:	d1 91       	ld	r29, Z+
     8d6:	de bf       	out	0x3e, r29	; 62
     8d8:	0f 91       	pop	r16
     8da:	0f bf       	out	0x3f, r16	; 63
     8dc:	ff 91       	pop	r31
     8de:	ef 91       	pop	r30
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	bf 91       	pop	r27
     8e6:	af 91       	pop	r26
     8e8:	9f 91       	pop	r25
     8ea:	8f 91       	pop	r24
     8ec:	7f 91       	pop	r23
     8ee:	6f 91       	pop	r22
     8f0:	5f 91       	pop	r21
     8f2:	4f 91       	pop	r20
     8f4:	3f 91       	pop	r19
     8f6:	2f 91       	pop	r18
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	ff 90       	pop	r15
     8fe:	ef 90       	pop	r14
     900:	df 90       	pop	r13
     902:	cf 90       	pop	r12
     904:	bf 90       	pop	r11
     906:	af 90       	pop	r10
     908:	9f 90       	pop	r9
     90a:	8f 90       	pop	r8
     90c:	7f 90       	pop	r7
     90e:	6f 90       	pop	r6
     910:	5f 90       	pop	r5
     912:	4f 90       	pop	r4
     914:	3f 90       	pop	r3
     916:	2f 90       	pop	r2
     918:	1f 90       	pop	r1
     91a:	0f 90       	pop	r0
     91c:	08 95       	ret

0000091e <OSCtxSw>:
     91e:	0f 92       	push	r0
     920:	1f 92       	push	r1
     922:	2f 92       	push	r2
     924:	3f 92       	push	r3
     926:	4f 92       	push	r4
     928:	5f 92       	push	r5
     92a:	6f 92       	push	r6
     92c:	7f 92       	push	r7
     92e:	8f 92       	push	r8
     930:	9f 92       	push	r9
     932:	af 92       	push	r10
     934:	bf 92       	push	r11
     936:	cf 92       	push	r12
     938:	df 92       	push	r13
     93a:	ef 92       	push	r14
     93c:	ff 92       	push	r15
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	2f 93       	push	r18
     944:	3f 93       	push	r19
     946:	4f 93       	push	r20
     948:	5f 93       	push	r21
     94a:	6f 93       	push	r22
     94c:	7f 93       	push	r23
     94e:	8f 93       	push	r24
     950:	9f 93       	push	r25
     952:	af 93       	push	r26
     954:	bf 93       	push	r27
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	ef 93       	push	r30
     95c:	ff 93       	push	r31
     95e:	0f b7       	in	r16, 0x3f	; 63
     960:	0f 93       	push	r16
     962:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <OSTCBCur>
     966:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <OSTCBCur+0x1>
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	c1 93       	st	Z+, r28
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	d1 93       	st	Z+, r29
     972:	00 91 37 04 	lds	r16, 0x0437	; 0x800437 <OSPrioHighRdy>
     976:	00 93 38 04 	sts	0x0438, r16	; 0x800438 <OSPrioCur>
     97a:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <OSTCBHighRdy>
     97e:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <OSTCBHighRdy+0x1>
     982:	e0 93 4a 04 	sts	0x044A, r30	; 0x80044a <OSTCBCur>
     986:	f0 93 4b 04 	sts	0x044B, r31	; 0x80044b <OSTCBCur+0x1>
     98a:	c1 91       	ld	r28, Z+
     98c:	cd bf       	out	0x3d, r28	; 61
     98e:	d1 91       	ld	r29, Z+
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f 91       	pop	r16
     994:	0f bf       	out	0x3f, r16	; 63
     996:	ff 91       	pop	r31
     998:	ef 91       	pop	r30
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	bf 91       	pop	r27
     9a0:	af 91       	pop	r26
     9a2:	9f 91       	pop	r25
     9a4:	8f 91       	pop	r24
     9a6:	7f 91       	pop	r23
     9a8:	6f 91       	pop	r22
     9aa:	5f 91       	pop	r21
     9ac:	4f 91       	pop	r20
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	8f 90       	pop	r8
     9c6:	7f 90       	pop	r7
     9c8:	6f 90       	pop	r6
     9ca:	5f 90       	pop	r5
     9cc:	4f 90       	pop	r4
     9ce:	3f 90       	pop	r3
     9d0:	2f 90       	pop	r2
     9d2:	1f 90       	pop	r1
     9d4:	0f 90       	pop	r0
     9d6:	08 95       	ret

000009d8 <OSIntCtxSw>:
     9d8:	00 91 37 04 	lds	r16, 0x0437	; 0x800437 <OSPrioHighRdy>
     9dc:	00 93 38 04 	sts	0x0438, r16	; 0x800438 <OSPrioCur>
     9e0:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <OSTCBHighRdy>
     9e4:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <OSTCBHighRdy+0x1>
     9e8:	e0 93 4a 04 	sts	0x044A, r30	; 0x80044a <OSTCBCur>
     9ec:	f0 93 4b 04 	sts	0x044B, r31	; 0x80044b <OSTCBCur+0x1>
     9f0:	c1 91       	ld	r28, Z+
     9f2:	cd bf       	out	0x3d, r28	; 61
     9f4:	d1 91       	ld	r29, Z+
     9f6:	de bf       	out	0x3e, r29	; 62
     9f8:	0f 91       	pop	r16
     9fa:	0f bf       	out	0x3f, r16	; 63
     9fc:	ff 91       	pop	r31
     9fe:	ef 91       	pop	r30
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	bf 91       	pop	r27
     a06:	af 91       	pop	r26
     a08:	9f 91       	pop	r25
     a0a:	8f 91       	pop	r24
     a0c:	7f 91       	pop	r23
     a0e:	6f 91       	pop	r22
     a10:	5f 91       	pop	r21
     a12:	4f 91       	pop	r20
     a14:	3f 91       	pop	r19
     a16:	2f 91       	pop	r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	df 90       	pop	r13
     a22:	cf 90       	pop	r12
     a24:	bf 90       	pop	r11
     a26:	af 90       	pop	r10
     a28:	9f 90       	pop	r9
     a2a:	8f 90       	pop	r8
     a2c:	7f 90       	pop	r7
     a2e:	6f 90       	pop	r6
     a30:	5f 90       	pop	r5
     a32:	4f 90       	pop	r4
     a34:	3f 90       	pop	r3
     a36:	2f 90       	pop	r2
     a38:	1f 90       	pop	r1
     a3a:	0f 90       	pop	r0
     a3c:	08 95       	ret

00000a3e <OSTickISR>:
     a3e:	0f 92       	push	r0
     a40:	1f 92       	push	r1
     a42:	2f 92       	push	r2
     a44:	3f 92       	push	r3
     a46:	4f 92       	push	r4
     a48:	5f 92       	push	r5
     a4a:	6f 92       	push	r6
     a4c:	7f 92       	push	r7
     a4e:	8f 92       	push	r8
     a50:	9f 92       	push	r9
     a52:	af 92       	push	r10
     a54:	bf 92       	push	r11
     a56:	cf 92       	push	r12
     a58:	df 92       	push	r13
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
     a62:	2f 93       	push	r18
     a64:	3f 93       	push	r19
     a66:	4f 93       	push	r20
     a68:	5f 93       	push	r21
     a6a:	6f 93       	push	r22
     a6c:	7f 93       	push	r23
     a6e:	8f 93       	push	r24
     a70:	9f 93       	push	r25
     a72:	af 93       	push	r26
     a74:	bf 93       	push	r27
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	ef 93       	push	r30
     a7c:	ff 93       	push	r31
     a7e:	0f b7       	in	r16, 0x3f	; 63
     a80:	00 68       	ori	r16, 0x80	; 128
     a82:	0f 93       	push	r16
     a84:	00 91 49 04 	lds	r16, 0x0449	; 0x800449 <OSIntNesting>
     a88:	03 95       	inc	r16
     a8a:	00 93 49 04 	sts	0x0449, r16	; 0x800449 <OSIntNesting>
     a8e:	01 30       	cpi	r16, 0x01	; 1
     a90:	41 f4       	brne	.+16     	; 0xaa2 <_not_first_int>
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
     a96:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <OSTCBCur>
     a9a:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <OSTCBCur+0x1>
     a9e:	c1 93       	st	Z+, r28
     aa0:	d1 93       	st	Z+, r29

00000aa2 <_not_first_int>:
     aa2:	04 e6       	ldi	r16, 0x64	; 100
     aa4:	06 bd       	out	0x26, r16	; 38
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	1f 2e       	mov	r1, r31
     aaa:	78 94       	sei
     aac:	0e 94 82 06 	call	0xd04	; 0xd04 <OSTimeTick>
     ab0:	00 00       	nop
     ab2:	0e 94 f5 05 	call	0xbea	; 0xbea <OSIntExit>
     ab6:	0f 91       	pop	r16
     ab8:	0f bf       	out	0x3f, r16	; 63
     aba:	ff 91       	pop	r31
     abc:	ef 91       	pop	r30
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	bf 91       	pop	r27
     ac4:	af 91       	pop	r26
     ac6:	9f 91       	pop	r25
     ac8:	8f 91       	pop	r24
     aca:	7f 91       	pop	r23
     acc:	6f 91       	pop	r22
     ace:	5f 91       	pop	r21
     ad0:	4f 91       	pop	r20
     ad2:	3f 91       	pop	r19
     ad4:	2f 91       	pop	r18
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	df 90       	pop	r13
     ae0:	cf 90       	pop	r12
     ae2:	bf 90       	pop	r11
     ae4:	af 90       	pop	r10
     ae6:	9f 90       	pop	r9
     ae8:	8f 90       	pop	r8
     aea:	7f 90       	pop	r7
     aec:	6f 90       	pop	r6
     aee:	5f 90       	pop	r5
     af0:	4f 90       	pop	r4
     af2:	3f 90       	pop	r3
     af4:	2f 90       	pop	r2
     af6:	1f 90       	pop	r1
     af8:	0f 90       	pop	r0
     afa:	08 95       	ret

00000afc <OSTaskStkInit>:
     afc:	fa 01       	movw	r30, r20
     afe:	80 83       	st	Z, r24
     b00:	31 97       	sbiw	r30, 0x01	; 1
     b02:	90 83       	st	Z, r25
     b04:	31 97       	sbiw	r30, 0x01	; 1
     b06:	10 82       	st	Z, r1
     b08:	31 97       	sbiw	r30, 0x01	; 1
     b0a:	10 82       	st	Z, r1
     b0c:	31 97       	sbiw	r30, 0x01	; 1
     b0e:	10 82       	st	Z, r1
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	10 82       	st	Z, r1
     b14:	31 97       	sbiw	r30, 0x01	; 1
     b16:	10 82       	st	Z, r1
     b18:	31 97       	sbiw	r30, 0x01	; 1
     b1a:	10 82       	st	Z, r1
     b1c:	31 97       	sbiw	r30, 0x01	; 1
     b1e:	10 82       	st	Z, r1
     b20:	31 97       	sbiw	r30, 0x01	; 1
     b22:	10 82       	st	Z, r1
     b24:	31 97       	sbiw	r30, 0x01	; 1
     b26:	10 82       	st	Z, r1
     b28:	31 97       	sbiw	r30, 0x01	; 1
     b2a:	10 82       	st	Z, r1
     b2c:	31 97       	sbiw	r30, 0x01	; 1
     b2e:	10 82       	st	Z, r1
     b30:	31 97       	sbiw	r30, 0x01	; 1
     b32:	10 82       	st	Z, r1
     b34:	31 97       	sbiw	r30, 0x01	; 1
     b36:	10 82       	st	Z, r1
     b38:	31 97       	sbiw	r30, 0x01	; 1
     b3a:	10 82       	st	Z, r1
     b3c:	31 97       	sbiw	r30, 0x01	; 1
     b3e:	10 82       	st	Z, r1
     b40:	31 97       	sbiw	r30, 0x01	; 1
     b42:	10 82       	st	Z, r1
     b44:	31 97       	sbiw	r30, 0x01	; 1
     b46:	10 82       	st	Z, r1
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	10 82       	st	Z, r1
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	10 82       	st	Z, r1
     b50:	31 97       	sbiw	r30, 0x01	; 1
     b52:	10 82       	st	Z, r1
     b54:	31 97       	sbiw	r30, 0x01	; 1
     b56:	10 82       	st	Z, r1
     b58:	31 97       	sbiw	r30, 0x01	; 1
     b5a:	10 82       	st	Z, r1
     b5c:	31 97       	sbiw	r30, 0x01	; 1
     b5e:	10 82       	st	Z, r1
     b60:	31 97       	sbiw	r30, 0x01	; 1
     b62:	10 82       	st	Z, r1
     b64:	31 97       	sbiw	r30, 0x01	; 1
     b66:	60 83       	st	Z, r22
     b68:	31 97       	sbiw	r30, 0x01	; 1
     b6a:	70 83       	st	Z, r23
     b6c:	31 97       	sbiw	r30, 0x01	; 1
     b6e:	10 82       	st	Z, r1
     b70:	31 97       	sbiw	r30, 0x01	; 1
     b72:	10 82       	st	Z, r1
     b74:	31 97       	sbiw	r30, 0x01	; 1
     b76:	10 82       	st	Z, r1
     b78:	31 97       	sbiw	r30, 0x01	; 1
     b7a:	10 82       	st	Z, r1
     b7c:	31 97       	sbiw	r30, 0x01	; 1
     b7e:	10 82       	st	Z, r1
     b80:	31 97       	sbiw	r30, 0x01	; 1
     b82:	10 82       	st	Z, r1
     b84:	31 97       	sbiw	r30, 0x01	; 1
     b86:	80 e8       	ldi	r24, 0x80	; 128
     b88:	80 83       	st	Z, r24
     b8a:	ca 01       	movw	r24, r20
     b8c:	83 97       	sbiw	r24, 0x23	; 35
     b8e:	08 95       	ret

00000b90 <OSTaskCreateHook>:
     b90:	08 95       	ret

00000b92 <OSTaskDelHook>:
     b92:	08 95       	ret

00000b94 <OSTaskSwHook>:
     b94:	08 95       	ret

00000b96 <OSTaskStatHook>:
     b96:	08 95       	ret

00000b98 <OSTimeTickHook>:
     b98:	08 95       	ret

00000b9a <OSInitHookBegin>:
     b9a:	08 95       	ret

00000b9c <OSInitHookEnd>:
     b9c:	08 95       	ret

00000b9e <OSTaskIdleHook>:
     b9e:	08 95       	ret

00000ba0 <OSTCBInitHook>:
     ba0:	08 95       	ret

00000ba2 <OS_TaskIdle>:
     ba2:	f8 94       	cli
     ba4:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <OSIdleCtr>
     ba8:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <OSIdleCtr+0x1>
     bac:	a0 91 35 04 	lds	r26, 0x0435	; 0x800435 <OSIdleCtr+0x2>
     bb0:	b0 91 36 04 	lds	r27, 0x0436	; 0x800436 <OSIdleCtr+0x3>
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	a1 1d       	adc	r26, r1
     bb8:	b1 1d       	adc	r27, r1
     bba:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <OSIdleCtr>
     bbe:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <OSIdleCtr+0x1>
     bc2:	a0 93 35 04 	sts	0x0435, r26	; 0x800435 <OSIdleCtr+0x2>
     bc6:	b0 93 36 04 	sts	0x0436, r27	; 0x800436 <OSIdleCtr+0x3>
     bca:	78 94       	sei
     bcc:	0e 94 cf 05 	call	0xb9e	; 0xb9e <OSTaskIdleHook>
     bd0:	e8 cf       	rjmp	.-48     	; 0xba2 <OS_TaskIdle>

00000bd2 <OSIntEnter>:
     bd2:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <OSRunning>
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	39 f4       	brne	.+14     	; 0xbe8 <OSIntEnter+0x16>
     bda:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <OSIntNesting>
     bde:	8f 3f       	cpi	r24, 0xFF	; 255
     be0:	19 f0       	breq	.+6      	; 0xbe8 <OSIntEnter+0x16>
     be2:	8f 5f       	subi	r24, 0xFF	; 255
     be4:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <OSIntNesting>
     be8:	08 95       	ret

00000bea <OSIntExit>:
     bea:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <OSRunning>
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <OSIntExit+0xa>
     bf2:	4c c0       	rjmp	.+152    	; 0xc8c <OSIntExit+0xa2>
     bf4:	f8 94       	cli
     bf6:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <OSIntNesting>
     bfa:	88 23       	and	r24, r24
     bfc:	19 f0       	breq	.+6      	; 0xc04 <OSIntExit+0x1a>
     bfe:	81 50       	subi	r24, 0x01	; 1
     c00:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <OSIntNesting>
     c04:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <OSIntNesting>
     c08:	81 11       	cpse	r24, r1
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <OSIntExit+0xa0>
     c0c:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <OSLockNesting>
     c10:	81 11       	cpse	r24, r1
     c12:	3b c0       	rjmp	.+118    	; 0xc8a <OSIntExit+0xa0>
     c14:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <OSRdyGrp>
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	ef 5f       	subi	r30, 0xFF	; 255
     c1c:	fe 4f       	sbci	r31, 0xFE	; 254
     c1e:	e0 81       	ld	r30, Z
     c20:	e0 93 48 04 	sts	0x0448, r30	; 0x800448 <OSIntExitY>
     c24:	ae 2f       	mov	r26, r30
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	ab 5b       	subi	r26, 0xBB	; 187
     c2a:	bb 4f       	sbci	r27, 0xFB	; 251
     c2c:	ac 91       	ld	r26, X
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	af 5f       	subi	r26, 0xFF	; 255
     c32:	be 4f       	sbci	r27, 0xFE	; 254
     c34:	ee 0f       	add	r30, r30
     c36:	ee 0f       	add	r30, r30
     c38:	ee 0f       	add	r30, r30
     c3a:	8c 91       	ld	r24, X
     c3c:	e8 0f       	add	r30, r24
     c3e:	e0 93 37 04 	sts	0x0437, r30	; 0x800437 <OSPrioHighRdy>
     c42:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <OSPrioCur>
     c46:	e8 17       	cp	r30, r24
     c48:	01 f1       	breq	.+64     	; 0xc8a <OSIntExit+0xa0>
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	ee 0f       	add	r30, r30
     c4e:	ff 1f       	adc	r31, r31
     c50:	e5 57       	subi	r30, 0x75	; 117
     c52:	fa 4f       	sbci	r31, 0xFA	; 250
     c54:	80 81       	ld	r24, Z
     c56:	91 81       	ldd	r25, Z+1	; 0x01
     c58:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <OSTCBHighRdy+0x1>
     c5c:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <OSTCBHighRdy>
     c60:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <OSCtxSwCtr>
     c64:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <OSCtxSwCtr+0x1>
     c68:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <OSCtxSwCtr+0x2>
     c6c:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <OSCtxSwCtr+0x3>
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	a1 1d       	adc	r26, r1
     c74:	b1 1d       	adc	r27, r1
     c76:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <OSCtxSwCtr>
     c7a:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <OSCtxSwCtr+0x1>
     c7e:	a0 93 3d 04 	sts	0x043D, r26	; 0x80043d <OSCtxSwCtr+0x2>
     c82:	b0 93 3e 04 	sts	0x043E, r27	; 0x80043e <OSCtxSwCtr+0x3>
     c86:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <OSIntCtxSw>
     c8a:	78 94       	sei
     c8c:	08 95       	ret

00000c8e <OSSchedLock>:
     c8e:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <OSRunning>
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	49 f4       	brne	.+18     	; 0xca8 <OSSchedLock+0x1a>
     c96:	f8 94       	cli
     c98:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <OSLockNesting>
     c9c:	8f 3f       	cpi	r24, 0xFF	; 255
     c9e:	19 f0       	breq	.+6      	; 0xca6 <OSSchedLock+0x18>
     ca0:	8f 5f       	subi	r24, 0xFF	; 255
     ca2:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <OSLockNesting>
     ca6:	78 94       	sei
     ca8:	08 95       	ret

00000caa <OSStart>:
     caa:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <OSRunning>
     cae:	81 11       	cpse	r24, r1
     cb0:	28 c0       	rjmp	.+80     	; 0xd02 <OSStart+0x58>
     cb2:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <OSRdyGrp>
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	ef 5f       	subi	r30, 0xFF	; 255
     cba:	fe 4f       	sbci	r31, 0xFE	; 254
     cbc:	e0 81       	ld	r30, Z
     cbe:	ae 2f       	mov	r26, r30
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	ab 5b       	subi	r26, 0xBB	; 187
     cc4:	bb 4f       	sbci	r27, 0xFB	; 251
     cc6:	ac 91       	ld	r26, X
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	af 5f       	subi	r26, 0xFF	; 255
     ccc:	be 4f       	sbci	r27, 0xFE	; 254
     cce:	ee 0f       	add	r30, r30
     cd0:	ee 0f       	add	r30, r30
     cd2:	ee 0f       	add	r30, r30
     cd4:	8c 91       	ld	r24, X
     cd6:	e8 0f       	add	r30, r24
     cd8:	e0 93 37 04 	sts	0x0437, r30	; 0x800437 <OSPrioHighRdy>
     cdc:	e0 93 38 04 	sts	0x0438, r30	; 0x800438 <OSPrioCur>
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	ee 0f       	add	r30, r30
     ce4:	ff 1f       	adc	r31, r31
     ce6:	e5 57       	subi	r30, 0x75	; 117
     ce8:	fa 4f       	sbci	r31, 0xFA	; 250
     cea:	80 81       	ld	r24, Z
     cec:	91 81       	ldd	r25, Z+1	; 0x01
     cee:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <OSTCBHighRdy+0x1>
     cf2:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <OSTCBHighRdy>
     cf6:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <OSTCBCur+0x1>
     cfa:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <OSTCBCur>
     cfe:	0c 94 5f 04 	jmp	0x8be	; 0x8be <OSStartHighRdy>
     d02:	08 95       	ret

00000d04 <OSTimeTick>:
     d04:	0e 94 cc 05 	call	0xb98	; 0xb98 <OSTimeTickHook>
     d08:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <OSRunning>
     d0c:	e0 91 39 04 	lds	r30, 0x0439	; 0x800439 <OSTCBList>
     d10:	f0 91 3a 04 	lds	r31, 0x043A	; 0x80043a <OSTCBList+0x1>
     d14:	21 e0       	ldi	r18, 0x01	; 1
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	01 f1       	breq	.+64     	; 0xd5c <OSTimeTick+0x58>
     d1c:	08 95       	ret
     d1e:	f8 94       	cli
     d20:	86 81       	ldd	r24, Z+6	; 0x06
     d22:	97 81       	ldd	r25, Z+7	; 0x07
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	b1 f0       	breq	.+44     	; 0xd54 <OSTimeTick+0x50>
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	97 83       	std	Z+7, r25	; 0x07
     d2c:	86 83       	std	Z+6, r24	; 0x06
     d2e:	89 2b       	or	r24, r25
     d30:	89 f4       	brne	.+34     	; 0xd54 <OSTimeTick+0x50>
     d32:	80 85       	ldd	r24, Z+8	; 0x08
     d34:	83 fd       	sbrc	r24, 3
     d36:	16 c0       	rjmp	.+44     	; 0xd64 <OSTimeTick+0x60>
     d38:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <OSRdyGrp>
     d3c:	95 85       	ldd	r25, Z+13	; 0x0d
     d3e:	89 2b       	or	r24, r25
     d40:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <OSRdyGrp>
     d44:	a3 85       	ldd	r26, Z+11	; 0x0b
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	ab 5b       	subi	r26, 0xBB	; 187
     d4a:	bb 4f       	sbci	r27, 0xFB	; 251
     d4c:	8c 91       	ld	r24, X
     d4e:	94 85       	ldd	r25, Z+12	; 0x0c
     d50:	89 2b       	or	r24, r25
     d52:	8c 93       	st	X, r24
     d54:	02 80       	ldd	r0, Z+2	; 0x02
     d56:	f3 81       	ldd	r31, Z+3	; 0x03
     d58:	e0 2d       	mov	r30, r0
     d5a:	78 94       	sei
     d5c:	81 85       	ldd	r24, Z+9	; 0x09
     d5e:	80 31       	cpi	r24, 0x10	; 16
     d60:	f1 f6       	brne	.-68     	; 0xd1e <OSTimeTick+0x1a>
     d62:	dc cf       	rjmp	.-72     	; 0xd1c <OSTimeTick+0x18>
     d64:	37 83       	std	Z+7, r19	; 0x07
     d66:	26 83       	std	Z+6, r18	; 0x06
     d68:	f5 cf       	rjmp	.-22     	; 0xd54 <OSTimeTick+0x50>

00000d6a <OSVersion>:
     d6a:	8c ef       	ldi	r24, 0xFC	; 252
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	08 95       	ret

00000d70 <OS_Dummy>:
     d70:	08 95       	ret

00000d72 <OS_Sched>:
     d72:	f8 94       	cli
     d74:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <OSIntNesting>
     d78:	81 11       	cpse	r24, r1
     d7a:	3d c0       	rjmp	.+122    	; 0xdf6 <OS_Sched+0x84>
     d7c:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <OSLockNesting>
     d80:	81 11       	cpse	r24, r1
     d82:	39 c0       	rjmp	.+114    	; 0xdf6 <OS_Sched+0x84>
     d84:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <OSRdyGrp>
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	ef 5f       	subi	r30, 0xFF	; 255
     d8c:	fe 4f       	sbci	r31, 0xFE	; 254
     d8e:	e0 81       	ld	r30, Z
     d90:	ae 2f       	mov	r26, r30
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	ab 5b       	subi	r26, 0xBB	; 187
     d96:	bb 4f       	sbci	r27, 0xFB	; 251
     d98:	ac 91       	ld	r26, X
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	af 5f       	subi	r26, 0xFF	; 255
     d9e:	be 4f       	sbci	r27, 0xFE	; 254
     da0:	ee 0f       	add	r30, r30
     da2:	ee 0f       	add	r30, r30
     da4:	ee 0f       	add	r30, r30
     da6:	8c 91       	ld	r24, X
     da8:	e8 0f       	add	r30, r24
     daa:	e0 93 37 04 	sts	0x0437, r30	; 0x800437 <OSPrioHighRdy>
     dae:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <OSPrioCur>
     db2:	e8 17       	cp	r30, r24
     db4:	01 f1       	breq	.+64     	; 0xdf6 <OS_Sched+0x84>
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	ee 0f       	add	r30, r30
     dba:	ff 1f       	adc	r31, r31
     dbc:	e5 57       	subi	r30, 0x75	; 117
     dbe:	fa 4f       	sbci	r31, 0xFA	; 250
     dc0:	80 81       	ld	r24, Z
     dc2:	91 81       	ldd	r25, Z+1	; 0x01
     dc4:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <OSTCBHighRdy+0x1>
     dc8:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <OSTCBHighRdy>
     dcc:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <OSCtxSwCtr>
     dd0:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <OSCtxSwCtr+0x1>
     dd4:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <OSCtxSwCtr+0x2>
     dd8:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <OSCtxSwCtr+0x3>
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	a1 1d       	adc	r26, r1
     de0:	b1 1d       	adc	r27, r1
     de2:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <OSCtxSwCtr>
     de6:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <OSCtxSwCtr+0x1>
     dea:	a0 93 3d 04 	sts	0x043D, r26	; 0x80043d <OSCtxSwCtr+0x2>
     dee:	b0 93 3e 04 	sts	0x043E, r27	; 0x80043e <OSCtxSwCtr+0x3>
     df2:	0e 94 8f 04 	call	0x91e	; 0x91e <OSCtxSw>
     df6:	78 94       	sei
     df8:	08 95       	ret

00000dfa <OSSchedUnlock>:
     dfa:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <OSRunning>
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	91 f4       	brne	.+36     	; 0xe26 <OSSchedUnlock+0x2c>
     e02:	f8 94       	cli
     e04:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <OSLockNesting>
     e08:	88 23       	and	r24, r24
     e0a:	61 f0       	breq	.+24     	; 0xe24 <OSSchedUnlock+0x2a>
     e0c:	81 50       	subi	r24, 0x01	; 1
     e0e:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <OSLockNesting>
     e12:	81 11       	cpse	r24, r1
     e14:	07 c0       	rjmp	.+14     	; 0xe24 <OSSchedUnlock+0x2a>
     e16:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <OSIntNesting>
     e1a:	81 11       	cpse	r24, r1
     e1c:	03 c0       	rjmp	.+6      	; 0xe24 <OSSchedUnlock+0x2a>
     e1e:	78 94       	sei
     e20:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <OS_Sched>
     e24:	78 94       	sei
     e26:	08 95       	ret

00000e28 <OSTimeDly.part.0>:
     e28:	ac 01       	movw	r20, r24
     e2a:	f8 94       	cli
     e2c:	a0 91 4a 04 	lds	r26, 0x044A	; 0x80044a <OSTCBCur>
     e30:	b0 91 4b 04 	lds	r27, 0x044B	; 0x80044b <OSTCBCur+0x1>
     e34:	1b 96       	adiw	r26, 0x0b	; 11
     e36:	ec 91       	ld	r30, X
     e38:	1b 97       	sbiw	r26, 0x0b	; 11
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	1c 96       	adiw	r26, 0x0c	; 12
     e3e:	9c 91       	ld	r25, X
     e40:	1c 97       	sbiw	r26, 0x0c	; 12
     e42:	90 95       	com	r25
     e44:	eb 5b       	subi	r30, 0xBB	; 187
     e46:	fb 4f       	sbci	r31, 0xFB	; 251
     e48:	80 81       	ld	r24, Z
     e4a:	98 23       	and	r25, r24
     e4c:	90 83       	st	Z, r25
     e4e:	91 11       	cpse	r25, r1
     e50:	0a c0       	rjmp	.+20     	; 0xe66 <OSTimeDly.part.0+0x3e>
     e52:	1d 96       	adiw	r26, 0x0d	; 13
     e54:	9c 91       	ld	r25, X
     e56:	1d 97       	sbiw	r26, 0x0d	; 13
     e58:	29 2f       	mov	r18, r25
     e5a:	20 95       	com	r18
     e5c:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <OSRdyGrp>
     e60:	92 23       	and	r25, r18
     e62:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <OSRdyGrp>
     e66:	17 96       	adiw	r26, 0x07	; 7
     e68:	5c 93       	st	X, r21
     e6a:	4e 93       	st	-X, r20
     e6c:	16 97       	sbiw	r26, 0x06	; 6
     e6e:	78 94       	sei
     e70:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <OS_Sched>

00000e74 <OS_TCBInit>:
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	f8 94       	cli
     e7c:	c0 91 3f 04 	lds	r28, 0x043F	; 0x80043f <OSTCBFreeList>
     e80:	d0 91 40 04 	lds	r29, 0x0440	; 0x800440 <OSTCBFreeList+0x1>
     e84:	20 97       	sbiw	r28, 0x00	; 0
     e86:	09 f4       	brne	.+2      	; 0xe8a <OS_TCBInit+0x16>
     e88:	54 c0       	rjmp	.+168    	; 0xf32 <OS_TCBInit+0xbe>
     e8a:	18 2f       	mov	r17, r24
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	9b 81       	ldd	r25, Y+3	; 0x03
     e90:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <OSTCBFreeList+0x1>
     e94:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <OSTCBFreeList>
     e98:	78 94       	sei
     e9a:	79 83       	std	Y+1, r23	; 0x01
     e9c:	68 83       	st	Y, r22
     e9e:	19 87       	std	Y+9, r17	; 0x09
     ea0:	18 86       	std	Y+8, r1	; 0x08
     ea2:	1f 82       	std	Y+7, r1	; 0x07
     ea4:	1e 82       	std	Y+6, r1	; 0x06
     ea6:	1e 86       	std	Y+14, r1	; 0x0e
     ea8:	e1 2f       	mov	r30, r17
     eaa:	e6 95       	lsr	r30
     eac:	e6 95       	lsr	r30
     eae:	e6 95       	lsr	r30
     eb0:	eb 87       	std	Y+11, r30	; 0x0b
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	ef 5f       	subi	r30, 0xFF	; 255
     eb6:	fd 4f       	sbci	r31, 0xFD	; 253
     eb8:	80 81       	ld	r24, Z
     eba:	8d 87       	std	Y+13, r24	; 0x0d
     ebc:	e1 2f       	mov	r30, r17
     ebe:	e7 70       	andi	r30, 0x07	; 7
     ec0:	ea 87       	std	Y+10, r30	; 0x0a
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	ef 5f       	subi	r30, 0xFF	; 255
     ec6:	fd 4f       	sbci	r31, 0xFD	; 253
     ec8:	80 81       	ld	r24, Z
     eca:	8c 87       	std	Y+12, r24	; 0x0c
     ecc:	ce 01       	movw	r24, r28
     ece:	0e 94 d0 05 	call	0xba0	; 0xba0 <OSTCBInitHook>
     ed2:	ce 01       	movw	r24, r28
     ed4:	0e 94 c8 05 	call	0xb90	; 0xb90 <OSTaskCreateHook>
     ed8:	f8 94       	cli
     eda:	e1 2f       	mov	r30, r17
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	ee 0f       	add	r30, r30
     ee0:	ff 1f       	adc	r31, r31
     ee2:	e5 57       	subi	r30, 0x75	; 117
     ee4:	fa 4f       	sbci	r31, 0xFA	; 250
     ee6:	d1 83       	std	Z+1, r29	; 0x01
     ee8:	c0 83       	st	Z, r28
     eea:	e0 91 39 04 	lds	r30, 0x0439	; 0x800439 <OSTCBList>
     eee:	f0 91 3a 04 	lds	r31, 0x043A	; 0x80043a <OSTCBList+0x1>
     ef2:	fb 83       	std	Y+3, r31	; 0x03
     ef4:	ea 83       	std	Y+2, r30	; 0x02
     ef6:	1d 82       	std	Y+5, r1	; 0x05
     ef8:	1c 82       	std	Y+4, r1	; 0x04
     efa:	30 97       	sbiw	r30, 0x00	; 0
     efc:	11 f0       	breq	.+4      	; 0xf02 <OS_TCBInit+0x8e>
     efe:	d5 83       	std	Z+5, r29	; 0x05
     f00:	c4 83       	std	Z+4, r28	; 0x04
     f02:	d0 93 3a 04 	sts	0x043A, r29	; 0x80043a <OSTCBList+0x1>
     f06:	c0 93 39 04 	sts	0x0439, r28	; 0x800439 <OSTCBList>
     f0a:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <OSRdyGrp>
     f0e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f10:	89 2b       	or	r24, r25
     f12:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <OSRdyGrp>
     f16:	eb 85       	ldd	r30, Y+11	; 0x0b
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	eb 5b       	subi	r30, 0xBB	; 187
     f1c:	fb 4f       	sbci	r31, 0xFB	; 251
     f1e:	80 81       	ld	r24, Z
     f20:	9c 85       	ldd	r25, Y+12	; 0x0c
     f22:	89 2b       	or	r24, r25
     f24:	80 83       	st	Z, r24
     f26:	78 94       	sei
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	1f 91       	pop	r17
     f30:	08 95       	ret
     f32:	78 94       	sei
     f34:	86 e4       	ldi	r24, 0x46	; 70
     f36:	f9 cf       	rjmp	.-14     	; 0xf2a <OS_TCBInit+0xb6>

00000f38 <OSTaskCreate>:
     f38:	9f 92       	push	r9
     f3a:	af 92       	push	r10
     f3c:	bf 92       	push	r11
     f3e:	cf 92       	push	r12
     f40:	df 92       	push	r13
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	f8 94       	cli
     f50:	c2 2f       	mov	r28, r18
     f52:	d0 e0       	ldi	r29, 0x00	; 0
     f54:	cc 0f       	add	r28, r28
     f56:	dd 1f       	adc	r29, r29
     f58:	c5 57       	subi	r28, 0x75	; 117
     f5a:	da 4f       	sbci	r29, 0xFA	; 250
     f5c:	e8 81       	ld	r30, Y
     f5e:	f9 81       	ldd	r31, Y+1	; 0x01
     f60:	ef 2b       	or	r30, r31
     f62:	09 f0       	breq	.+2      	; 0xf66 <OSTaskCreate+0x2e>
     f64:	3b c0       	rjmp	.+118    	; 0xfdc <OSTaskCreate+0xa4>
     f66:	92 2e       	mov	r9, r18
     f68:	21 e0       	ldi	r18, 0x01	; 1
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	39 83       	std	Y+1, r19	; 0x01
     f6e:	28 83       	st	Y, r18
     f70:	78 94       	sei
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	0e 94 7e 05 	call	0xafc	; 0xafc <OSTaskStkInit>
     f7a:	b1 2c       	mov	r11, r1
     f7c:	a1 2c       	mov	r10, r1
     f7e:	d1 2c       	mov	r13, r1
     f80:	c1 2c       	mov	r12, r1
     f82:	e1 2c       	mov	r14, r1
     f84:	f1 2c       	mov	r15, r1
     f86:	87 01       	movw	r16, r14
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	bc 01       	movw	r22, r24
     f92:	89 2d       	mov	r24, r9
     f94:	0e 94 3a 07 	call	0xe74	; 0xe74 <OS_TCBInit>
     f98:	18 2f       	mov	r17, r24
     f9a:	81 11       	cpse	r24, r1
     f9c:	1a c0       	rjmp	.+52     	; 0xfd2 <OSTaskCreate+0x9a>
     f9e:	f8 94       	cli
     fa0:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSTaskCtr>
     fa4:	8f 5f       	subi	r24, 0xFF	; 255
     fa6:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <OSTaskCtr>
     faa:	78 94       	sei
     fac:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <OSRunning>
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	11 f4       	brne	.+4      	; 0xfb8 <OSTaskCreate+0x80>
     fb4:	0e 94 b9 06 	call	0xd72	; 0xd72 <OS_Sched>
     fb8:	81 2f       	mov	r24, r17
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	ff 90       	pop	r15
     fc4:	ef 90       	pop	r14
     fc6:	df 90       	pop	r13
     fc8:	cf 90       	pop	r12
     fca:	bf 90       	pop	r11
     fcc:	af 90       	pop	r10
     fce:	9f 90       	pop	r9
     fd0:	08 95       	ret
     fd2:	f8 94       	cli
     fd4:	19 82       	std	Y+1, r1	; 0x01
     fd6:	18 82       	st	Y, r1
     fd8:	78 94       	sei
     fda:	ee cf       	rjmp	.-36     	; 0xfb8 <OSTaskCreate+0x80>
     fdc:	78 94       	sei
     fde:	18 e2       	ldi	r17, 0x28	; 40
     fe0:	eb cf       	rjmp	.-42     	; 0xfb8 <OSTaskCreate+0x80>

00000fe2 <OSInit>:
     fe2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <OSInitHookBegin>
     fe6:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <OSIntNesting>
     fea:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <OSLockNesting>
     fee:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <OSTaskCtr>
     ff2:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <OSRunning>
     ff6:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <OSCtxSwCtr>
     ffa:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <OSCtxSwCtr+0x1>
     ffe:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <OSCtxSwCtr+0x2>
    1002:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <OSCtxSwCtr+0x3>
    1006:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <OSIdleCtr>
    100a:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <OSIdleCtr+0x1>
    100e:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <OSIdleCtr+0x2>
    1012:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <OSIdleCtr+0x3>
    1016:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <OSRdyGrp>
    101a:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <OSRdyTbl>
    101e:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <OSRdyTbl+0x1>
    1022:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <OSRdyTbl+0x2>
    1026:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <OSPrioCur>
    102a:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <OSPrioHighRdy>
    102e:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <OSTCBHighRdy+0x1>
    1032:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <OSTCBHighRdy>
    1036:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <OSTCBCur+0x1>
    103a:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <OSTCBCur>
    103e:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <OSTCBList+0x1>
    1042:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <OSTCBList>
    1046:	eb e8       	ldi	r30, 0x8B	; 139
    1048:	f5 e0       	ldi	r31, 0x05	; 5
    104a:	11 92       	st	Z+, r1
    104c:	11 92       	st	Z+, r1
    104e:	85 e0       	ldi	r24, 0x05	; 5
    1050:	ed 3a       	cpi	r30, 0xAD	; 173
    1052:	f8 07       	cpc	r31, r24
    1054:	d1 f7       	brne	.-12     	; 0x104a <OSInit+0x68>
    1056:	ec e8       	ldi	r30, 0x8C	; 140
    1058:	f4 e0       	ldi	r31, 0x04	; 4
    105a:	cf 01       	movw	r24, r30
    105c:	0f 96       	adiw	r24, 0x0f	; 15
    105e:	93 83       	std	Z+3, r25	; 0x03
    1060:	82 83       	std	Z+2, r24	; 0x02
    1062:	fc 01       	movw	r30, r24
    1064:	85 e0       	ldi	r24, 0x05	; 5
    1066:	ec 37       	cpi	r30, 0x7C	; 124
    1068:	f8 07       	cpc	r31, r24
    106a:	b9 f7       	brne	.-18     	; 0x105a <OSInit+0x78>
    106c:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <OSTCBTbl+0xf3>
    1070:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <OSTCBTbl+0xf2>
    1074:	8c e8       	ldi	r24, 0x8C	; 140
    1076:	94 e0       	ldi	r25, 0x04	; 4
    1078:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <OSTCBFreeList+0x1>
    107c:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <OSTCBFreeList>
    1080:	20 e1       	ldi	r18, 0x10	; 16
    1082:	4b e8       	ldi	r20, 0x8B	; 139
    1084:	54 e0       	ldi	r21, 0x04	; 4
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	81 ed       	ldi	r24, 0xD1	; 209
    108c:	95 e0       	ldi	r25, 0x05	; 5
    108e:	0e 94 9c 07 	call	0xf38	; 0xf38 <OSTaskCreate>
    1092:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <OSInitHookEnd>

00001096 <OSTaskDel>:
    1096:	ff 92       	push	r15
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	f0 90 49 04 	lds	r15, 0x0449	; 0x800449 <OSIntNesting>
    10a4:	f1 10       	cpse	r15, r1
    10a6:	76 c0       	rjmp	.+236    	; 0x1194 <OSTaskDel+0xfe>
    10a8:	f8 94       	cli
    10aa:	8f 3f       	cpi	r24, 0xFF	; 255
    10ac:	29 f4       	brne	.+10     	; 0x10b8 <OSTaskDel+0x22>
    10ae:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <OSTCBCur>
    10b2:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <OSTCBCur+0x1>
    10b6:	81 85       	ldd	r24, Z+9	; 0x09
    10b8:	08 2f       	mov	r16, r24
    10ba:	10 e0       	ldi	r17, 0x00	; 0
    10bc:	00 0f       	add	r16, r16
    10be:	11 1f       	adc	r17, r17
    10c0:	f8 01       	movw	r30, r16
    10c2:	e5 57       	subi	r30, 0x75	; 117
    10c4:	fa 4f       	sbci	r31, 0xFA	; 250
    10c6:	c0 81       	ld	r28, Z
    10c8:	d1 81       	ldd	r29, Z+1	; 0x01
    10ca:	20 97       	sbiw	r28, 0x00	; 0
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <OSTaskDel+0x3a>
    10ce:	5e c0       	rjmp	.+188    	; 0x118c <OSTaskDel+0xf6>
    10d0:	eb 85       	ldd	r30, Y+11	; 0x0b
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    10d6:	80 95       	com	r24
    10d8:	eb 5b       	subi	r30, 0xBB	; 187
    10da:	fb 4f       	sbci	r31, 0xFB	; 251
    10dc:	90 81       	ld	r25, Z
    10de:	89 23       	and	r24, r25
    10e0:	80 83       	st	Z, r24
    10e2:	81 11       	cpse	r24, r1
    10e4:	08 c0       	rjmp	.+16     	; 0x10f6 <OSTaskDel+0x60>
    10e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e8:	98 2f       	mov	r25, r24
    10ea:	90 95       	com	r25
    10ec:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <OSRdyGrp>
    10f0:	89 23       	and	r24, r25
    10f2:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <OSRdyGrp>
    10f6:	1f 82       	std	Y+7, r1	; 0x07
    10f8:	1e 82       	std	Y+6, r1	; 0x06
    10fa:	18 86       	std	Y+8, r1	; 0x08
    10fc:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <OSLockNesting>
    1100:	8f 3f       	cpi	r24, 0xFF	; 255
    1102:	19 f0       	breq	.+6      	; 0x110a <OSTaskDel+0x74>
    1104:	8f 5f       	subi	r24, 0xFF	; 255
    1106:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <OSLockNesting>
    110a:	78 94       	sei
    110c:	f8 94       	cli
    110e:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <OSLockNesting>
    1112:	88 23       	and	r24, r24
    1114:	19 f0       	breq	.+6      	; 0x111c <OSTaskDel+0x86>
    1116:	81 50       	subi	r24, 0x01	; 1
    1118:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <OSLockNesting>
    111c:	ce 01       	movw	r24, r28
    111e:	0e 94 c9 05 	call	0xb92	; 0xb92 <OSTaskDelHook>
    1122:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSTaskCtr>
    1126:	81 50       	subi	r24, 0x01	; 1
    1128:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <OSTaskCtr>
    112c:	f8 01       	movw	r30, r16
    112e:	e5 57       	subi	r30, 0x75	; 117
    1130:	fa 4f       	sbci	r31, 0xFA	; 250
    1132:	11 82       	std	Z+1, r1	; 0x01
    1134:	10 82       	st	Z, r1
    1136:	ec 81       	ldd	r30, Y+4	; 0x04
    1138:	fd 81       	ldd	r31, Y+5	; 0x05
    113a:	aa 81       	ldd	r26, Y+2	; 0x02
    113c:	bb 81       	ldd	r27, Y+3	; 0x03
    113e:	30 97       	sbiw	r30, 0x00	; 0
    1140:	e1 f4       	brne	.+56     	; 0x117a <OSTaskDel+0xe4>
    1142:	15 96       	adiw	r26, 0x05	; 5
    1144:	1c 92       	st	X, r1
    1146:	1e 92       	st	-X, r1
    1148:	14 97       	sbiw	r26, 0x04	; 4
    114a:	b0 93 3a 04 	sts	0x043A, r27	; 0x80043a <OSTCBList+0x1>
    114e:	a0 93 39 04 	sts	0x0439, r26	; 0x800439 <OSTCBList>
    1152:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <OSTCBFreeList>
    1156:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <OSTCBFreeList+0x1>
    115a:	9b 83       	std	Y+3, r25	; 0x03
    115c:	8a 83       	std	Y+2, r24	; 0x02
    115e:	d0 93 40 04 	sts	0x0440, r29	; 0x800440 <OSTCBFreeList+0x1>
    1162:	c0 93 3f 04 	sts	0x043F, r28	; 0x80043f <OSTCBFreeList>
    1166:	78 94       	sei
    1168:	0e 94 b9 06 	call	0xd72	; 0xd72 <OS_Sched>
    116c:	8f 2d       	mov	r24, r15
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	ff 90       	pop	r15
    1178:	08 95       	ret
    117a:	b3 83       	std	Z+3, r27	; 0x03
    117c:	a2 83       	std	Z+2, r26	; 0x02
    117e:	aa 81       	ldd	r26, Y+2	; 0x02
    1180:	bb 81       	ldd	r27, Y+3	; 0x03
    1182:	15 96       	adiw	r26, 0x05	; 5
    1184:	fc 93       	st	X, r31
    1186:	ee 93       	st	-X, r30
    1188:	14 97       	sbiw	r26, 0x04	; 4
    118a:	e3 cf       	rjmp	.-58     	; 0x1152 <OSTaskDel+0xbc>
    118c:	78 94       	sei
    118e:	9c e3       	ldi	r25, 0x3C	; 60
    1190:	f9 2e       	mov	r15, r25
    1192:	ec cf       	rjmp	.-40     	; 0x116c <OSTaskDel+0xd6>
    1194:	8f e3       	ldi	r24, 0x3F	; 63
    1196:	f8 2e       	mov	r15, r24
    1198:	e9 cf       	rjmp	.-46     	; 0x116c <OSTaskDel+0xd6>

0000119a <OSTaskDelReq>:
    119a:	8f 3f       	cpi	r24, 0xFF	; 255
    119c:	41 f4       	brne	.+16     	; 0x11ae <OSTaskDelReq+0x14>
    119e:	f8 94       	cli
    11a0:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <OSTCBCur>
    11a4:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <OSTCBCur+0x1>
    11a8:	86 85       	ldd	r24, Z+14	; 0x0e
    11aa:	78 94       	sei
    11ac:	08 95       	ret
    11ae:	f8 94       	cli
    11b0:	e8 2f       	mov	r30, r24
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	ee 0f       	add	r30, r30
    11b6:	ff 1f       	adc	r31, r31
    11b8:	e5 57       	subi	r30, 0x75	; 117
    11ba:	fa 4f       	sbci	r31, 0xFA	; 250
    11bc:	01 90       	ld	r0, Z+
    11be:	f0 81       	ld	r31, Z
    11c0:	e0 2d       	mov	r30, r0
    11c2:	8b e0       	ldi	r24, 0x0B	; 11
    11c4:	30 97       	sbiw	r30, 0x00	; 0
    11c6:	89 f3       	breq	.-30     	; 0x11aa <OSTaskDelReq+0x10>
    11c8:	8e e3       	ldi	r24, 0x3E	; 62
    11ca:	86 87       	std	Z+14, r24	; 0x0e
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	ed cf       	rjmp	.-38     	; 0x11aa <OSTaskDelReq+0x10>

000011d0 <OSTimeDly>:
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	11 f0       	breq	.+4      	; 0x11d8 <OSTimeDly+0x8>
    11d4:	0c 94 14 07 	jmp	0xe28	; 0xe28 <OSTimeDly.part.0>
    11d8:	08 95       	ret

000011da <OSTimeDlyHMSM>:
    11da:	cf 92       	push	r12
    11dc:	df 92       	push	r13
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	81 11       	cpse	r24, r1
    11e4:	0d c0       	rjmp	.+26     	; 0x1200 <OSTimeDlyHMSM+0x26>
    11e6:	61 11       	cpse	r22, r1
    11e8:	0b c0       	rjmp	.+22     	; 0x1200 <OSTimeDlyHMSM+0x26>
    11ea:	41 11       	cpse	r20, r1
    11ec:	0c c0       	rjmp	.+24     	; 0x1206 <OSTimeDlyHMSM+0x2c>
    11ee:	21 15       	cp	r18, r1
    11f0:	31 05       	cpc	r19, r1
    11f2:	61 f4       	brne	.+24     	; 0x120c <OSTimeDlyHMSM+0x32>
    11f4:	84 e5       	ldi	r24, 0x54	; 84
    11f6:	ff 90       	pop	r15
    11f8:	ef 90       	pop	r14
    11fa:	df 90       	pop	r13
    11fc:	cf 90       	pop	r12
    11fe:	08 95       	ret
    1200:	6c 33       	cpi	r22, 0x3C	; 60
    1202:	08 f0       	brcs	.+2      	; 0x1206 <OSTimeDlyHMSM+0x2c>
    1204:	4f c0       	rjmp	.+158    	; 0x12a4 <OSTimeDlyHMSM+0xca>
    1206:	4c 33       	cpi	r20, 0x3C	; 60
    1208:	08 f0       	brcs	.+2      	; 0x120c <OSTimeDlyHMSM+0x32>
    120a:	4e c0       	rjmp	.+156    	; 0x12a8 <OSTimeDlyHMSM+0xce>
    120c:	28 3e       	cpi	r18, 0xE8	; 232
    120e:	93 e0       	ldi	r25, 0x03	; 3
    1210:	39 07       	cpc	r19, r25
    1212:	08 f0       	brcs	.+2      	; 0x1216 <OSTimeDlyHMSM+0x3c>
    1214:	4b c0       	rjmp	.+150    	; 0x12ac <OSTimeDlyHMSM+0xd2>
    1216:	f9 01       	movw	r30, r18
    1218:	58 2f       	mov	r21, r24
    121a:	26 2f       	mov	r18, r22
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	ac e3       	ldi	r26, 0x3C	; 60
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__umulhisi3>
    1226:	6b 01       	movw	r12, r22
    1228:	7c 01       	movw	r14, r24
    122a:	c4 0e       	add	r12, r20
    122c:	d1 1c       	adc	r13, r1
    122e:	e1 1c       	adc	r14, r1
    1230:	f1 1c       	adc	r15, r1
    1232:	25 2f       	mov	r18, r21
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	a0 e1       	ldi	r26, 0x10	; 16
    1238:	be e0       	ldi	r27, 0x0E	; 14
    123a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__umulhisi3>
    123e:	a7 01       	movw	r20, r14
    1240:	96 01       	movw	r18, r12
    1242:	26 0f       	add	r18, r22
    1244:	37 1f       	adc	r19, r23
    1246:	48 1f       	adc	r20, r24
    1248:	59 1f       	adc	r21, r25
    124a:	a4 e6       	ldi	r26, 0x64	; 100
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	0e 94 df 09 	call	0x13be	; 0x13be <__muluhisi3>
    1252:	6b 01       	movw	r12, r22
    1254:	7c 01       	movw	r14, r24
    1256:	9f 01       	movw	r18, r30
    1258:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__umulhisi3>
    125c:	6c 50       	subi	r22, 0x0C	; 12
    125e:	7e 4f       	sbci	r23, 0xFE	; 254
    1260:	8f 4f       	sbci	r24, 0xFF	; 255
    1262:	9f 4f       	sbci	r25, 0xFF	; 255
    1264:	28 ee       	ldi	r18, 0xE8	; 232
    1266:	33 e0       	ldi	r19, 0x03	; 3
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	0e 94 a8 09 	call	0x1350	; 0x1350 <__udivmodsi4>
    1270:	d7 01       	movw	r26, r14
    1272:	c6 01       	movw	r24, r12
    1274:	82 0f       	add	r24, r18
    1276:	93 1f       	adc	r25, r19
    1278:	a4 1f       	adc	r26, r20
    127a:	b5 1f       	adc	r27, r21
    127c:	7d 01       	movw	r14, r26
    127e:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <OSTimeDly>
    1282:	e1 14       	cp	r14, r1
    1284:	f1 04       	cpc	r15, r1
    1286:	11 f4       	brne	.+4      	; 0x128c <OSTimeDlyHMSM+0xb2>
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	b5 cf       	rjmp	.-150    	; 0x11f6 <OSTimeDlyHMSM+0x1c>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e8       	ldi	r25, 0x80	; 128
    1290:	0e 94 14 07 	call	0xe28	; 0xe28 <OSTimeDly.part.0>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e8       	ldi	r25, 0x80	; 128
    1298:	0e 94 14 07 	call	0xe28	; 0xe28 <OSTimeDly.part.0>
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	e8 1a       	sub	r14, r24
    12a0:	f1 08       	sbc	r15, r1
    12a2:	ef cf       	rjmp	.-34     	; 0x1282 <OSTimeDlyHMSM+0xa8>
    12a4:	81 e5       	ldi	r24, 0x51	; 81
    12a6:	a7 cf       	rjmp	.-178    	; 0x11f6 <OSTimeDlyHMSM+0x1c>
    12a8:	82 e5       	ldi	r24, 0x52	; 82
    12aa:	a5 cf       	rjmp	.-182    	; 0x11f6 <OSTimeDlyHMSM+0x1c>
    12ac:	83 e5       	ldi	r24, 0x53	; 83
    12ae:	a3 cf       	rjmp	.-186    	; 0x11f6 <OSTimeDlyHMSM+0x1c>

000012b0 <main>:

}

int main( void )
{
 robo_Setup(); /* initialize HAL for RoboKar */
    12b0:	0e 94 a3 03 	call	0x746	; 0x746 <robo_Setup>
 OSInit(); /* initialize UCOS-II kernel */
    12b4:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <OSInit>

 robo_motorSpeed(STOP_SPEED, STOP_SPEED); /* Stop the robot, value STOP_SPEED == 0 */
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	0e 94 c6 02 	call	0x58c	; 0x58c <robo_motorSpeed>
 myrobot.rspeed = STOP_SPEED; /* Initialize myrobot states */
    12c4:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <myrobot+0x1>
    12c8:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <myrobot>
 myrobot.lspeed = STOP_SPEED;
    12cc:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <myrobot+0x3>
    12d0:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <myrobot+0x2>
 myrobot.obstacle = 0; /* No collision */
    12d4:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <myrobot+0x4>
 count =0;
    12d8:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <count+0x1>
    12dc:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <count>
 OSTaskCreate(TaskStart, /* create TaskStart Task */
    12e0:	21 e0       	ldi	r18, 0x01	; 1
    12e2:	48 ea       	ldi	r20, 0xA8	; 168
    12e4:	53 e0       	ldi	r21, 0x03	; 3
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	8f ec       	ldi	r24, 0xCF	; 207
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	0e 94 9c 07 	call	0xf38	; 0xf38 <OSTaskCreate>
 (void *)0,
 (void *)&TaskStartStk[TASK_STK_SZ - 1],
 TASK_START_PRIO);
 robo_Honk(); robo_wait4goPress(); /* Wait for to GO */
    12f2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <robo_Honk>
    12f6:	0e 94 8f 03 	call	0x71e	; 0x71e <robo_wait4goPress>
 OSStart(); /* Start multitasking */
    12fa:	0e 94 55 06 	call	0xcaa	; 0xcaa <OSStart>
    12fe:	ff cf       	rjmp	.-2      	; 0x12fe <main+0x4e>

00001300 <__udivmodhi4>:
    1300:	aa 1b       	sub	r26, r26
    1302:	bb 1b       	sub	r27, r27
    1304:	51 e1       	ldi	r21, 0x11	; 17
    1306:	07 c0       	rjmp	.+14     	; 0x1316 <__udivmodhi4_ep>

00001308 <__udivmodhi4_loop>:
    1308:	aa 1f       	adc	r26, r26
    130a:	bb 1f       	adc	r27, r27
    130c:	a6 17       	cp	r26, r22
    130e:	b7 07       	cpc	r27, r23
    1310:	10 f0       	brcs	.+4      	; 0x1316 <__udivmodhi4_ep>
    1312:	a6 1b       	sub	r26, r22
    1314:	b7 0b       	sbc	r27, r23

00001316 <__udivmodhi4_ep>:
    1316:	88 1f       	adc	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	5a 95       	dec	r21
    131c:	a9 f7       	brne	.-22     	; 0x1308 <__udivmodhi4_loop>
    131e:	80 95       	com	r24
    1320:	90 95       	com	r25
    1322:	bc 01       	movw	r22, r24
    1324:	cd 01       	movw	r24, r26
    1326:	08 95       	ret

00001328 <__divmodhi4>:
    1328:	97 fb       	bst	r25, 7
    132a:	07 2e       	mov	r0, r23
    132c:	16 f4       	brtc	.+4      	; 0x1332 <__divmodhi4+0xa>
    132e:	00 94       	com	r0
    1330:	07 d0       	rcall	.+14     	; 0x1340 <__divmodhi4_neg1>
    1332:	77 fd       	sbrc	r23, 7
    1334:	09 d0       	rcall	.+18     	; 0x1348 <__divmodhi4_neg2>
    1336:	0e 94 80 09 	call	0x1300	; 0x1300 <__udivmodhi4>
    133a:	07 fc       	sbrc	r0, 7
    133c:	05 d0       	rcall	.+10     	; 0x1348 <__divmodhi4_neg2>
    133e:	3e f4       	brtc	.+14     	; 0x134e <__divmodhi4_exit>

00001340 <__divmodhi4_neg1>:
    1340:	90 95       	com	r25
    1342:	81 95       	neg	r24
    1344:	9f 4f       	sbci	r25, 0xFF	; 255
    1346:	08 95       	ret

00001348 <__divmodhi4_neg2>:
    1348:	70 95       	com	r23
    134a:	61 95       	neg	r22
    134c:	7f 4f       	sbci	r23, 0xFF	; 255

0000134e <__divmodhi4_exit>:
    134e:	08 95       	ret

00001350 <__udivmodsi4>:
    1350:	a1 e2       	ldi	r26, 0x21	; 33
    1352:	1a 2e       	mov	r1, r26
    1354:	aa 1b       	sub	r26, r26
    1356:	bb 1b       	sub	r27, r27
    1358:	fd 01       	movw	r30, r26
    135a:	0d c0       	rjmp	.+26     	; 0x1376 <__udivmodsi4_ep>

0000135c <__udivmodsi4_loop>:
    135c:	aa 1f       	adc	r26, r26
    135e:	bb 1f       	adc	r27, r27
    1360:	ee 1f       	adc	r30, r30
    1362:	ff 1f       	adc	r31, r31
    1364:	a2 17       	cp	r26, r18
    1366:	b3 07       	cpc	r27, r19
    1368:	e4 07       	cpc	r30, r20
    136a:	f5 07       	cpc	r31, r21
    136c:	20 f0       	brcs	.+8      	; 0x1376 <__udivmodsi4_ep>
    136e:	a2 1b       	sub	r26, r18
    1370:	b3 0b       	sbc	r27, r19
    1372:	e4 0b       	sbc	r30, r20
    1374:	f5 0b       	sbc	r31, r21

00001376 <__udivmodsi4_ep>:
    1376:	66 1f       	adc	r22, r22
    1378:	77 1f       	adc	r23, r23
    137a:	88 1f       	adc	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	1a 94       	dec	r1
    1380:	69 f7       	brne	.-38     	; 0x135c <__udivmodsi4_loop>
    1382:	60 95       	com	r22
    1384:	70 95       	com	r23
    1386:	80 95       	com	r24
    1388:	90 95       	com	r25
    138a:	9b 01       	movw	r18, r22
    138c:	ac 01       	movw	r20, r24
    138e:	bd 01       	movw	r22, r26
    1390:	cf 01       	movw	r24, r30
    1392:	08 95       	ret

00001394 <__tablejump2__>:
    1394:	ee 0f       	add	r30, r30
    1396:	ff 1f       	adc	r31, r31
    1398:	05 90       	lpm	r0, Z+
    139a:	f4 91       	lpm	r31, Z
    139c:	e0 2d       	mov	r30, r0
    139e:	09 94       	ijmp

000013a0 <__umulhisi3>:
    13a0:	a2 9f       	mul	r26, r18
    13a2:	b0 01       	movw	r22, r0
    13a4:	b3 9f       	mul	r27, r19
    13a6:	c0 01       	movw	r24, r0
    13a8:	a3 9f       	mul	r26, r19
    13aa:	70 0d       	add	r23, r0
    13ac:	81 1d       	adc	r24, r1
    13ae:	11 24       	eor	r1, r1
    13b0:	91 1d       	adc	r25, r1
    13b2:	b2 9f       	mul	r27, r18
    13b4:	70 0d       	add	r23, r0
    13b6:	81 1d       	adc	r24, r1
    13b8:	11 24       	eor	r1, r1
    13ba:	91 1d       	adc	r25, r1
    13bc:	08 95       	ret

000013be <__muluhisi3>:
    13be:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__umulhisi3>
    13c2:	a5 9f       	mul	r26, r21
    13c4:	90 0d       	add	r25, r0
    13c6:	b4 9f       	mul	r27, r20
    13c8:	90 0d       	add	r25, r0
    13ca:	a4 9f       	mul	r26, r20
    13cc:	80 0d       	add	r24, r0
    13ce:	91 1d       	adc	r25, r1
    13d0:	11 24       	eor	r1, r1
    13d2:	08 95       	ret

000013d4 <_exit>:
    13d4:	f8 94       	cli

000013d6 <__stop_program>:
    13d6:	ff cf       	rjmp	.-2      	; 0x13d6 <__stop_program>
