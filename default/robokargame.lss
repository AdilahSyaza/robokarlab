
robokargame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800100  000013ec  00001480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000038d  00800220  00800220  000015a0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015b4  2**2
                  CONTENTS, READONLY
  5 .avr.prop     00000016  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000168  00000000  00000000  00001610  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001608  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000862  00000000  00000000  00002d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b8a  00000000  00000000  000035e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e0  00000000  00000000  0000416c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000064d  00000000  00000000  0000424c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000228  00000000  00000000  00004899  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00004ac1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 29 05 	jmp	0xa52	; 0xa52 <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ee       	ldi	r30, 0xEC	; 236
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 32       	cpi	r26, 0x20	; 32
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	a0 e2       	ldi	r26, 0x20	; 32
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 3a       	cpi	r26, 0xAD	; 173
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 62 09 	call	0x12c4	; 0x12c4 <main>
      9e:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CheckCollision>:
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ){ /* obstacle? */
     myrobot.obstacle = 1; /* signal obstacle present */
      a6:	c1 e0       	ldi	r28, 0x01	; 1
/*------High pririority task----------*/
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ){ /* obstacle? */
      a8:	0e 94 2b 03 	call	0x656	; 0x656 <robo_proxSensor>
      ac:	01 97       	sbiw	r24, 0x01	; 1
      ae:	51 f4       	brne	.+20     	; 0xc4 <CheckCollision+0x1e>
     myrobot.obstacle = 1; /* signal obstacle present */
      b0:	c0 93 a6 02 	sts	0x02A6, r28	; 0x8002a6 <myrobot+0x4>
 }else
     myrobot.obstacle = 0; /* signal no obstacle */

 OSTimeDlyHMSM(0, 0, 0, 100); /* Task period ~ 100 ms */
      b4:	24 e6       	ldi	r18, 0x64	; 100
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	40 e0       	ldi	r20, 0x00	; 0
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 f7 08 	call	0x11ee	; 0x11ee <OSTimeDlyHMSM>
/*------High pririority task----------*/
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ){ /* obstacle? */
      c2:	f2 cf       	rjmp	.-28     	; 0xa8 <CheckCollision+0x2>
     myrobot.obstacle = 1; /* signal obstacle present */
 }else
     myrobot.obstacle = 0; /* signal no obstacle */
      c4:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <myrobot+0x4>
      c8:	f5 cf       	rjmp	.-22     	; 0xb4 <CheckCollision+0xe>

000000ca <CntrlMotors>:

 for(;;)
 {
  speed_r = myrobot.rspeed;
  speed_l = myrobot.lspeed;
  robo_motorSpeed(speed_l, speed_r);
      ca:	60 91 a2 02 	lds	r22, 0x02A2	; 0x8002a2 <myrobot>
      ce:	70 91 a3 02 	lds	r23, 0x02A3	; 0x8002a3 <myrobot+0x1>
      d2:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <myrobot+0x2>
      d6:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <myrobot+0x3>
      da:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <robo_motorSpeed>
  OSTimeDlyHMSM(0, 0, 0, 10); /* Task period ~ 250 ms */
      de:	2a e0       	ldi	r18, 0x0A	; 10
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <OSTimeDlyHMSM>
      ec:	ee cf       	rjmp	.-36     	; 0xca <CntrlMotors>

000000ee <Navig>:
/* --- Task for navigating robot ----
* Write you own navigation task here
*/

void Navig (void *data)
{
      ee:	2f 92       	push	r2
      f0:	3f 92       	push	r3
      f2:	4f 92       	push	r4
      f4:	5f 92       	push	r5
      f6:	6f 92       	push	r6
      f8:	7f 92       	push	r7
      fa:	8f 92       	push	r8
      fc:	9f 92       	push	r9
      fe:	af 92       	push	r10
     100:	bf 92       	push	r11
     102:	cf 92       	push	r12
     104:	df 92       	push	r13
     106:	ef 92       	push	r14
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
	    
	  }

		else if (robo_lineSensor() == 7)
	  {
	  	myrobot.rspeed = 90; 
     112:	4a e5       	ldi	r20, 0x5A	; 90
     114:	44 2e       	mov	r4, r20
     116:	51 2c       	mov	r5, r1
	   	myrobot.lspeed = 50;
     118:	02 e3       	ldi	r16, 0x32	; 50
     11a:	10 e0       	ldi	r17, 0x00	; 0
	   myrobot.lspeed = 70; /* corner right */
	  }else if (robo_lineSensor() == 0)
	  {

			myrobot.rspeed = -70; 
	    	myrobot.lspeed = -20;
     11c:	5c ee       	ldi	r21, 0xEC	; 236
     11e:	a5 2e       	mov	r10, r21
     120:	bb 24       	eor	r11, r11
     122:	ba 94       	dec	r11
	   myrobot.lspeed = -20; /* corner left */

	  }else if (robo_lineSensor() == 3)
	  {
	    count = 0;
	    myrobot.rspeed = -30; 
     124:	62 ee       	ldi	r22, 0xE2	; 226
     126:	e6 2e       	mov	r14, r22
     128:	ff 24       	eor	r15, r15
     12a:	fa 94       	dec	r15
	   myrobot.lspeed = 70; /* corner right */
     12c:	c6 e4       	ldi	r28, 0x46	; 70
     12e:	d0 e0       	ldi	r29, 0x00	; 0
	   myrobot.lspeed = 70; /* turn right */

	  }else if (robo_lineSensor() == 6)
	  {

	    myrobot.rspeed = 55; 
     130:	87 e3       	ldi	r24, 0x37	; 55
     132:	68 2e       	mov	r6, r24
     134:	71 2c       	mov	r7, r1
	    myrobot.rspeed = 70 ;/* turn left */
	   myrobot.lspeed =  -40;
	  }else if (robo_lineSensor() == 1)
	  {

	    myrobot.rspeed = -40; 
     136:	98 ed       	ldi	r25, 0xD8	; 216
     138:	c9 2e       	mov	r12, r25
     13a:	dd 24       	eor	r13, r13
     13c:	da 94       	dec	r13
		    case 4:	//turn left
		        myrobot.rspeed = 50;          
		        myrobot.lspeed = -30;
				break;
			case 7:
		        myrobot.rspeed = 60;       
     13e:	2c e3       	ldi	r18, 0x3C	; 60
     140:	82 2e       	mov	r8, r18
     142:	91 2c       	mov	r9, r1
		        myrobot.lspeed = 45;
     144:	3d e2       	ldi	r19, 0x2D	; 45
     146:	23 2e       	mov	r2, r19
     148:	31 2c       	mov	r3, r1
void Navig (void *data)
{

 for (;;)
 {
 	cprintf("%d \n", robo_lineSensor());
     14a:	0e 94 4e 03 	call	0x69c	; 0x69c <robo_lineSensor>
     14e:	9f 93       	push	r25
     150:	8f 93       	push	r24
     152:	8a e1       	ldi	r24, 0x1A	; 26
     154:	92 e0       	ldi	r25, 0x02	; 2
     156:	9f 93       	push	r25
     158:	8f 93       	push	r24
     15a:	0e 94 c9 03 	call	0x792	; 0x792 <cprintf>
  if (myrobot.obstacle == 1) /* If blocked then reverse */
     15e:	0f 90       	pop	r0
     160:	0f 90       	pop	r0
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <myrobot+0x4>
     16a:	81 30       	cpi	r24, 0x01	; 1
     16c:	09 f0       	breq	.+2      	; 0x170 <Navig+0x82>
     16e:	4a c0       	rjmp	.+148    	; 0x204 <Navig+0x116>
  {
  	if (pastLight == 1) /* If blocked then stop */
     170:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     174:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <__data_end+0x1>
     178:	01 97       	sbiw	r24, 0x01	; 1
     17a:	19 f5       	brne	.+70     	; 0x1c2 <Navig+0xd4>
		  {
		  	myrobot.rspeed = 0; /* stop */
     17c:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <myrobot+0x1>
     180:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <myrobot>
		   myrobot.lspeed = 0;
     184:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <myrobot+0x3>
     188:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <myrobot+0x2>
			robo_Honk();
     18c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <robo_Honk>
	  }
	  
  }
  

	OSTimeDlyHMSM(0, 0, 0, 10);
     190:	2a e0       	ldi	r18, 0x0A	; 10
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	40 e0       	ldi	r20, 0x00	; 0
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	80 e0       	ldi	r24, 0x00	; 0
	
  /* OSTimeDlyHMSM(0, 0, 0, 10); Task period ~ 500 ms */
 }
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	1f 91       	pop	r17
     1a0:	0f 91       	pop	r16
     1a2:	ff 90       	pop	r15
     1a4:	ef 90       	pop	r14
     1a6:	df 90       	pop	r13
     1a8:	cf 90       	pop	r12
     1aa:	bf 90       	pop	r11
     1ac:	af 90       	pop	r10
     1ae:	9f 90       	pop	r9
     1b0:	8f 90       	pop	r8
     1b2:	7f 90       	pop	r7
     1b4:	6f 90       	pop	r6
     1b6:	5f 90       	pop	r5
     1b8:	4f 90       	pop	r4
     1ba:	3f 90       	pop	r3
     1bc:	2f 90       	pop	r2
	  }
	  
  }
  

	OSTimeDlyHMSM(0, 0, 0, 10);
     1be:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <OSTimeDlyHMSM>
		  	myrobot.rspeed = 0; /* stop */
		   myrobot.lspeed = 0;
			robo_Honk();
			break;
		  }else{
		  myrobot.rspeed = -20; /* REVERSE */
     1c2:	b0 92 a3 02 	sts	0x02A3, r11	; 0x8002a3 <myrobot+0x1>
     1c6:	a0 92 a2 02 	sts	0x02A2, r10	; 0x8002a2 <myrobot>
		   myrobot.lspeed = 80;
     1ca:	80 e5       	ldi	r24, 0x50	; 80
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <myrobot+0x3>
     1d2:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <myrobot+0x2>
			OSTimeDlyHMSM(0, 0, 0, 250);
     1d6:	2a ef       	ldi	r18, 0xFA	; 250
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	40 e0       	ldi	r20, 0x00	; 0
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	0e 94 f7 08 	call	0x11ee	; 0x11ee <OSTimeDlyHMSM>
		   myrobot.rspeed = 70;
     1e4:	d0 93 a3 02 	sts	0x02A3, r29	; 0x8002a3 <myrobot+0x1>
     1e8:	c0 93 a2 02 	sts	0x02A2, r28	; 0x8002a2 <myrobot>
			myrobot.lspeed = 70;
     1ec:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <myrobot+0x3>
     1f0:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <myrobot+0x2>
			OSTimeDlyHMSM(0, 0, 1, 0);
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	41 e0       	ldi	r20, 0x01	; 1

		else if (robo_lineSensor() == 7)
	  {
	  	myrobot.rspeed = 90; 
	   	myrobot.lspeed = 50;
		OSTimeDlyHMSM(0, 0, 0, 20);
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	0e 94 f7 08 	call	0x11ee	; 0x11ee <OSTimeDlyHMSM>
     202:	22 c0       	rjmp	.+68     	; 0x248 <Navig+0x15a>
			OSTimeDlyHMSM(0, 0, 1, 0);
		  }
  	
   
  }else{
  robo_LED_off();
     204:	28 98       	cbi	0x05, 0	; 5
  	
	if(pastLight==1){
     206:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     20a:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <__data_end+0x1>
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	09 f0       	breq	.+2      	; 0x214 <Navig+0x126>
     212:	6c c0       	rjmp	.+216    	; 0x2ec <Navig+0x1fe>

		switch (robo_lineSensor()) {
     214:	0e 94 4e 03 	call	0x69c	; 0x69c <robo_lineSensor>
     218:	88 30       	cpi	r24, 0x08	; 8
     21a:	91 05       	cpc	r25, r1
     21c:	a8 f4       	brcc	.+42     	; 0x248 <Navig+0x15a>
     21e:	fc 01       	movw	r30, r24
     220:	ec 5e       	subi	r30, 0xEC	; 236
     222:	fe 4f       	sbci	r31, 0xFE	; 254
     224:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__tablejump2__>
     228:	6b 01       	movw	r12, r22
     22a:	1c 01       	movw	r2, r24
     22c:	47 01       	movw	r8, r14
     22e:	42 01       	movw	r8, r4
     230:	59 01       	movw	r10, r18
     232:	24 01       	movw	r4, r8
     234:	50 01       	movw	r10, r0
     236:	62 01       	movw	r12, r4
			case 1:	//turn right
				myrobot.rspeed = -30;          
     238:	f0 92 a3 02 	sts	0x02A3, r15	; 0x8002a3 <myrobot+0x1>
     23c:	e0 92 a2 02 	sts	0x02A2, r14	; 0x8002a2 <myrobot>
		        myrobot.lspeed = 50;
				break;
		    case 3:	//corner right
		        myrobot.rspeed = -40;          
		        myrobot.lspeed = 50;
     240:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <myrobot+0x3>
     244:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <myrobot+0x2>
	  }
  

	// for light sensor
	
	  if (robo_lightSensor() > 80)
     248:	0e 94 37 03 	call	0x66e	; 0x66e <robo_lightSensor>
     24c:	81 35       	cpi	r24, 0x51	; 81
     24e:	91 05       	cpc	r25, r1
     250:	0c f4       	brge	.+2      	; 0x254 <Navig+0x166>
     252:	7b cf       	rjmp	.-266    	; 0x14a <Navig+0x5c>
	  {
	   myrobot.rspeed = 70;
     254:	d0 93 a3 02 	sts	0x02A3, r29	; 0x8002a3 <myrobot+0x1>
     258:	c0 93 a2 02 	sts	0x02A2, r28	; 0x8002a2 <myrobot>
	   myrobot.lspeed = 10;
     25c:	8a e0       	ldi	r24, 0x0A	; 10
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <myrobot+0x3>
     264:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <myrobot+0x2>
	   OSTimeDlyHMSM(0, 0, 0, 100);
     268:	24 e6       	ldi	r18, 0x64	; 100
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	40 e0       	ldi	r20, 0x00	; 0
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	0e 94 f7 08 	call	0x11ee	; 0x11ee <OSTimeDlyHMSM>
	   pastLight = 1;
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <__data_end+0x1>
     27e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__data_end>
     282:	56 cf       	rjmp	.-340    	; 0x130 <Navig+0x42>
			case 1:	//turn right
				myrobot.rspeed = -30;          
		        myrobot.lspeed = 50;
				break;
		    case 3:	//corner right
		        myrobot.rspeed = -40;          
     284:	d0 92 a3 02 	sts	0x02A3, r13	; 0x8002a3 <myrobot+0x1>
     288:	c0 92 a2 02 	sts	0x02A2, r12	; 0x8002a2 <myrobot>
     28c:	d9 cf       	rjmp	.-78     	; 0x240 <Navig+0x152>
		        myrobot.lspeed = 50;
				break;
		    case 2:	//forward
				myrobot.rspeed = 70;          
     28e:	d0 93 a3 02 	sts	0x02A3, r29	; 0x8002a3 <myrobot+0x1>
     292:	c0 93 a2 02 	sts	0x02A2, r28	; 0x8002a2 <myrobot>
		        myrobot.lspeed = 60;
     296:	90 92 a5 02 	sts	0x02A5, r9	; 0x8002a5 <myrobot+0x3>
     29a:	80 92 a4 02 	sts	0x02A4, r8	; 0x8002a4 <myrobot+0x2>
				break;
     29e:	d4 cf       	rjmp	.-88     	; 0x248 <Navig+0x15a>
		    case 6:	//corner left
				myrobot.rspeed = 55;          
     2a0:	70 92 a3 02 	sts	0x02A3, r7	; 0x8002a3 <myrobot+0x1>
     2a4:	60 92 a2 02 	sts	0x02A2, r6	; 0x8002a2 <myrobot>
	   myrobot.lspeed = 90;
	  }else if (robo_lineSensor() == 4)
	  {
	   count = 0;
	    myrobot.rspeed = 70 ;/* turn left */
	   myrobot.lspeed =  -40;
     2a8:	d0 92 a5 02 	sts	0x02A5, r13	; 0x8002a5 <myrobot+0x3>
     2ac:	c0 92 a4 02 	sts	0x02A4, r12	; 0x8002a4 <myrobot+0x2>
     2b0:	cb cf       	rjmp	.-106    	; 0x248 <Navig+0x15a>
		    case 6:	//corner left
				myrobot.rspeed = 55;          
		        myrobot.lspeed = -40;
				break;
		    case 4:	//turn left
		        myrobot.rspeed = 50;          
     2b2:	10 93 a3 02 	sts	0x02A3, r17	; 0x8002a3 <myrobot+0x1>
     2b6:	00 93 a2 02 	sts	0x02A2, r16	; 0x8002a2 <myrobot>
		        myrobot.lspeed = -30;
     2ba:	f0 92 a5 02 	sts	0x02A5, r15	; 0x8002a5 <myrobot+0x3>
     2be:	e0 92 a4 02 	sts	0x02A4, r14	; 0x8002a4 <myrobot+0x2>
				break;
     2c2:	c2 cf       	rjmp	.-124    	; 0x248 <Navig+0x15a>
			case 7:
		        myrobot.rspeed = 60;       
     2c4:	90 92 a3 02 	sts	0x02A3, r9	; 0x8002a3 <myrobot+0x1>
     2c8:	80 92 a2 02 	sts	0x02A2, r8	; 0x8002a2 <myrobot>
		        myrobot.lspeed = 45;
     2cc:	30 92 a5 02 	sts	0x02A5, r3	; 0x8002a5 <myrobot+0x3>
     2d0:	20 92 a4 02 	sts	0x02A4, r2	; 0x8002a4 <myrobot+0x2>
				//printf("%d\n", robo_lineSensor());
				break;
     2d4:	b9 cf       	rjmp	.-142    	; 0x248 <Navig+0x15a>
		    case 0:	//reverse
		        myrobot.rspeed = -30;          
     2d6:	f0 92 a3 02 	sts	0x02A3, r15	; 0x8002a3 <myrobot+0x1>
     2da:	e0 92 a2 02 	sts	0x02A2, r14	; 0x8002a2 <myrobot>
		        myrobot.lspeed = -50;
     2de:	8e ec       	ldi	r24, 0xCE	; 206
     2e0:	9f ef       	ldi	r25, 0xFF	; 255
     2e2:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <myrobot+0x3>
     2e6:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <myrobot+0x2>
				//printf("%d\n", robo_lineSensor());
				break;
     2ea:	ae cf       	rjmp	.-164    	; 0x248 <Navig+0x15a>
		

	}
	else{

	if (robo_lineSensor() == 2) /* go straight */
     2ec:	0e 94 4e 03 	call	0x69c	; 0x69c <robo_lineSensor>
     2f0:	02 97       	sbiw	r24, 0x02	; 2
     2f2:	79 f4       	brne	.+30     	; 0x312 <Navig+0x224>
	  {
	   count = 0;
     2f4:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <count+0x1>
     2f8:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <count>
	   myrobot.rspeed = 75;
     2fc:	8b e4       	ldi	r24, 0x4B	; 75
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <myrobot+0x1>
     304:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <myrobot>
	   myrobot.lspeed = 90;
     308:	50 92 a5 02 	sts	0x02A5, r5	; 0x8002a5 <myrobot+0x3>
     30c:	40 92 a4 02 	sts	0x02A4, r4	; 0x8002a4 <myrobot+0x2>
     310:	9b cf       	rjmp	.-202    	; 0x248 <Navig+0x15a>
	  }else if (robo_lineSensor() == 4)
     312:	0e 94 4e 03 	call	0x69c	; 0x69c <robo_lineSensor>
     316:	04 97       	sbiw	r24, 0x04	; 4
     318:	49 f4       	brne	.+18     	; 0x32c <Navig+0x23e>
	  {
	   count = 0;
     31a:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <count+0x1>
     31e:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <count>
	    myrobot.rspeed = 70 ;/* turn left */
     322:	d0 93 a3 02 	sts	0x02A3, r29	; 0x8002a3 <myrobot+0x1>
     326:	c0 93 a2 02 	sts	0x02A2, r28	; 0x8002a2 <myrobot>
     32a:	be cf       	rjmp	.-132    	; 0x2a8 <Navig+0x1ba>
	   myrobot.lspeed =  -40;
	  }else if (robo_lineSensor() == 1)
     32c:	0e 94 4e 03 	call	0x69c	; 0x69c <robo_lineSensor>
     330:	01 97       	sbiw	r24, 0x01	; 1
     332:	49 f4       	brne	.+18     	; 0x346 <Navig+0x258>
	  {

	    myrobot.rspeed = -40; 
     334:	d0 92 a3 02 	sts	0x02A3, r13	; 0x8002a3 <myrobot+0x1>
     338:	c0 92 a2 02 	sts	0x02A2, r12	; 0x8002a2 <myrobot>

	  }else if (robo_lineSensor() == 3)
	  {
	    count = 0;
	    myrobot.rspeed = -30; 
	   myrobot.lspeed = 70; /* corner right */
     33c:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <myrobot+0x3>
     340:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <myrobot+0x2>
     344:	81 cf       	rjmp	.-254    	; 0x248 <Navig+0x15a>
	  {

	    myrobot.rspeed = -40; 
	   myrobot.lspeed = 70; /* turn right */

	  }else if (robo_lineSensor() == 6)
     346:	0e 94 4e 03 	call	0x69c	; 0x69c <robo_lineSensor>
     34a:	06 97       	sbiw	r24, 0x06	; 6
     34c:	49 f4       	brne	.+18     	; 0x360 <Navig+0x272>
	  {

	    myrobot.rspeed = 55; 
     34e:	70 92 a3 02 	sts	0x02A3, r7	; 0x8002a3 <myrobot+0x1>
     352:	60 92 a2 02 	sts	0x02A2, r6	; 0x8002a2 <myrobot>
	   myrobot.lspeed = 70; /* corner right */
	  }else if (robo_lineSensor() == 0)
	  {

			myrobot.rspeed = -70; 
	    	myrobot.lspeed = -20;
     356:	b0 92 a5 02 	sts	0x02A5, r11	; 0x8002a5 <myrobot+0x3>
     35a:	a0 92 a4 02 	sts	0x02A4, r10	; 0x8002a4 <myrobot+0x2>
     35e:	74 cf       	rjmp	.-280    	; 0x248 <Navig+0x15a>
	  {

	    myrobot.rspeed = 55; 
	   myrobot.lspeed = -20; /* corner left */

	  }else if (robo_lineSensor() == 3)
     360:	0e 94 4e 03 	call	0x69c	; 0x69c <robo_lineSensor>
     364:	03 97       	sbiw	r24, 0x03	; 3
     366:	49 f4       	brne	.+18     	; 0x37a <Navig+0x28c>
	  {
	    count = 0;
     368:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <count+0x1>
     36c:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <count>
	    myrobot.rspeed = -30; 
     370:	f0 92 a3 02 	sts	0x02A3, r15	; 0x8002a3 <myrobot+0x1>
     374:	e0 92 a2 02 	sts	0x02A2, r14	; 0x8002a2 <myrobot>
     378:	e1 cf       	rjmp	.-62     	; 0x33c <Navig+0x24e>
	   myrobot.lspeed = 70; /* corner right */
	  }else if (robo_lineSensor() == 0)
     37a:	0e 94 4e 03 	call	0x69c	; 0x69c <robo_lineSensor>
     37e:	89 2b       	or	r24, r25
     380:	39 f4       	brne	.+14     	; 0x390 <Navig+0x2a2>
	  {

			myrobot.rspeed = -70; 
     382:	8a eb       	ldi	r24, 0xBA	; 186
     384:	9f ef       	ldi	r25, 0xFF	; 255
     386:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <myrobot+0x1>
     38a:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <myrobot>
     38e:	e3 cf       	rjmp	.-58     	; 0x356 <Navig+0x268>
	    	myrobot.lspeed = -20;
	    
	  }

		else if (robo_lineSensor() == 7)
     390:	0e 94 4e 03 	call	0x69c	; 0x69c <robo_lineSensor>
     394:	07 97       	sbiw	r24, 0x07	; 7
     396:	09 f0       	breq	.+2      	; 0x39a <Navig+0x2ac>
     398:	57 cf       	rjmp	.-338    	; 0x248 <Navig+0x15a>
	  {
	  	myrobot.rspeed = 90; 
     39a:	50 92 a3 02 	sts	0x02A3, r5	; 0x8002a3 <myrobot+0x1>
     39e:	40 92 a2 02 	sts	0x02A2, r4	; 0x8002a2 <myrobot>
	   	myrobot.lspeed = 50;
     3a2:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <myrobot+0x3>
     3a6:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <myrobot+0x2>
		OSTimeDlyHMSM(0, 0, 0, 20);
     3aa:	24 e1       	ldi	r18, 0x14	; 20
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	40 e0       	ldi	r20, 0x00	; 0
     3b0:	24 cf       	rjmp	.-440    	; 0x1fa <Navig+0x10c>

000003b2 <TaskStart>:


/*------Highest pririority task----------*/
/* Create all other tasks here */
void TaskStart( void *data )
{
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	00 d0       	rcall	.+0      	; 0x3b8 <TaskStart+0x6>
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
 OS_ticks_init(); /* enable RTOS timer tick */
     3bc:	0e 94 9e 03 	call	0x73c	; 0x73c <OS_ticks_init>
	int  counter;
 OSTaskCreate(CheckCollision , /* Task function */
     3c0:	22 e0       	ldi	r18, 0x02	; 2
     3c2:	41 ea       	ldi	r20, 0xA1	; 161
     3c4:	52 e0       	ldi	r21, 0x02	; 2
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	83 e5       	ldi	r24, 0x53	; 83
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 a6 07 	call	0xf4c	; 0xf4c <OSTaskCreate>
 (void *)0, /* nothing passed to task */
 (void *)&ChkCollideStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_CHKCOLLIDE_PRIO); /* priority of task */

 OSTaskCreate(CntrlMotors , /* Task function */
     3d2:	23 e0       	ldi	r18, 0x03	; 3
     3d4:	46 e2       	ldi	r20, 0x26	; 38
     3d6:	53 e0       	ldi	r21, 0x03	; 3
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	85 e6       	ldi	r24, 0x65	; 101
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <OSTaskCreate>
 (void *)0, /* nothing passed to task */
 (void *)&CtrlmotorStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_CTRLMOTOR_PRIO); /* priority of task */

 OSTaskCreate(Navig, /* Task function */
     3e4:	24 e0       	ldi	r18, 0x04	; 4
     3e6:	48 e2       	ldi	r20, 0x28	; 40
     3e8:	54 e0       	ldi	r21, 0x04	; 4
     3ea:	be 01       	movw	r22, r28
     3ec:	6f 5f       	subi	r22, 0xFF	; 255
     3ee:	7f 4f       	sbci	r23, 0xFF	; 255
     3f0:	87 e7       	ldi	r24, 0x77	; 119
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <OSTaskCreate>
 TASK_NAVIG_PRIO); /* priority of task */

 while(1)
 {
  OSTimeDlyHMSM(0, 0, 5, 0); /* Task period ~ 5 secs, argument position: HOURS, MINUTES, SECONDS, and MILLISECONDS S*/ 
  robo_LED_toggle(); /* Show that we are alive */
     3f8:	11 e0       	ldi	r17, 0x01	; 1
 (void *)&NavigStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_NAVIG_PRIO); /* priority of task */

 while(1)
 {
  OSTimeDlyHMSM(0, 0, 5, 0); /* Task period ~ 5 secs, argument position: HOURS, MINUTES, SECONDS, and MILLISECONDS S*/ 
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	45 e0       	ldi	r20, 0x05	; 5
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	0e 94 f7 08 	call	0x11ee	; 0x11ee <OSTimeDlyHMSM>
  robo_LED_toggle(); /* Show that we are alive */
     408:	85 b1       	in	r24, 0x05	; 5
     40a:	81 27       	eor	r24, r17
     40c:	85 b9       	out	0x05, r24	; 5
     40e:	f5 cf       	rjmp	.-22     	; 0x3fa <TaskStart+0x48>

00000410 <ADC_init>:
     410:	80 e4       	ldi	r24, 0x40	; 64
     412:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     416:	86 e8       	ldi	r24, 0x86	; 134
     418:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     41c:	08 95       	ret

0000041e <ADC_read>:
     41e:	f8 94       	cli
     420:	80 64       	ori	r24, 0x40	; 64
     422:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     426:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     42a:	80 64       	ori	r24, 0x40	; 64
     42c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     430:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     434:	84 ff       	sbrs	r24, 4
     436:	fc cf       	rjmp	.-8      	; 0x430 <ADC_read+0x12>
     438:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     43c:	80 61       	ori	r24, 0x10	; 16
     43e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     442:	78 94       	sei
     444:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     448:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     44c:	93 70       	andi	r25, 0x03	; 3
     44e:	08 95       	ret

00000450 <PWM8_write>:
     450:	81 11       	cpse	r24, r1
     452:	05 c0       	rjmp	.+10     	; 0x45e <PWM8_write+0xe>
     454:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     458:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     45c:	08 95       	ret
     45e:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     462:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     466:	08 95       	ret

00000468 <motor_init>:
     468:	8a b1       	in	r24, 0x0a	; 10
     46a:	80 6f       	ori	r24, 0xF0	; 240
     46c:	8a b9       	out	0x0a, r24	; 10
     46e:	8b b1       	in	r24, 0x0b	; 11
     470:	8f 70       	andi	r24, 0x0F	; 15
     472:	8b b9       	out	0x0b, r24	; 11
     474:	81 ea       	ldi	r24, 0xA1	; 161
     476:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     47a:	83 e0       	ldi	r24, 0x03	; 3
     47c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     480:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     484:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     488:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     48c:	a8 e8       	ldi	r26, 0x88	; 136
     48e:	b0 e0       	ldi	r27, 0x00	; 0
     490:	1c 92       	st	X, r1
     492:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     496:	ea e8       	ldi	r30, 0x8A	; 138
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	10 82       	st	Z, r1
     49c:	84 b1       	in	r24, 0x04	; 4
     49e:	86 60       	ori	r24, 0x06	; 6
     4a0:	84 b9       	out	0x04, r24	; 4
     4a2:	11 96       	adiw	r26, 0x01	; 1
     4a4:	1c 92       	st	X, r1
     4a6:	1e 92       	st	-X, r1
     4a8:	11 82       	std	Z+1, r1	; 0x01
     4aa:	10 82       	st	Z, r1
     4ac:	08 95       	ret

000004ae <motor_set_speed>:
     4ae:	77 ff       	sbrs	r23, 7
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <motor_set_speed+0x8>
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	65 36       	cpi	r22, 0x65	; 101
     4b8:	71 05       	cpc	r23, r1
     4ba:	14 f0       	brlt	.+4      	; 0x4c0 <motor_set_speed+0x12>
     4bc:	64 e6       	ldi	r22, 0x64	; 100
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	9b 01       	movw	r18, r22
     4c2:	22 0f       	add	r18, r18
     4c4:	33 1f       	adc	r19, r19
     4c6:	75 95       	asr	r23
     4c8:	67 95       	ror	r22
     4ca:	62 0f       	add	r22, r18
     4cc:	73 1f       	adc	r23, r19
     4ce:	81 11       	cpse	r24, r1
     4d0:	09 c0       	rjmp	.+18     	; 0x4e4 <motor_set_speed+0x36>
     4d2:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     4d6:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     4da:	70 93 2a 04 	sts	0x042A, r23	; 0x80042a <rightWst+0x1>
     4de:	60 93 29 04 	sts	0x0429, r22	; 0x800429 <rightWst>
     4e2:	08 95       	ret
     4e4:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     4e8:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     4ec:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <leftWst+0x1>
     4f0:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <leftWst>
     4f4:	08 95       	ret

000004f6 <motor_set_dir>:
     4f6:	cf 93       	push	r28
     4f8:	c6 2f       	mov	r28, r22
     4fa:	26 2f       	mov	r18, r22
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	81 11       	cpse	r24, r1
     500:	2b c0       	rjmp	.+86     	; 0x558 <motor_set_dir+0x62>
     502:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <rightWst+0x2>
     506:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <rightWst+0x3>
     50a:	82 17       	cp	r24, r18
     50c:	93 07       	cpc	r25, r19
     50e:	59 f0       	breq	.+22     	; 0x526 <motor_set_dir+0x30>
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	0e 94 57 02 	call	0x4ae	; 0x4ae <motor_set_speed>
     51a:	8f e9       	ldi	r24, 0x9F	; 159
     51c:	9f e0       	ldi	r25, 0x0F	; 15
     51e:	01 97       	sbiw	r24, 0x01	; 1
     520:	f1 f7       	brne	.-4      	; 0x51e <motor_set_dir+0x28>
     522:	00 c0       	rjmp	.+0      	; 0x524 <motor_set_dir+0x2e>
     524:	00 00       	nop
     526:	c1 11       	cpse	r28, r1
     528:	0e c0       	rjmp	.+28     	; 0x546 <motor_set_dir+0x50>
     52a:	5e 98       	cbi	0x0b, 6	; 11
     52c:	5f 9a       	sbi	0x0b, 7	; 11
     52e:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <rightWst+0x3>
     532:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <rightWst+0x2>
     536:	8f e3       	ldi	r24, 0x3F	; 63
     538:	9c e9       	ldi	r25, 0x9C	; 156
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	f1 f7       	brne	.-4      	; 0x53a <motor_set_dir+0x44>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <motor_set_dir+0x4a>
     540:	00 00       	nop
     542:	cf 91       	pop	r28
     544:	08 95       	ret
     546:	5e 9a       	sbi	0x0b, 6	; 11
     548:	5f 98       	cbi	0x0b, 7	; 11
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <rightWst+0x3>
     552:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <rightWst+0x2>
     556:	ef cf       	rjmp	.-34     	; 0x536 <motor_set_dir+0x40>
     558:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <leftWst+0x2>
     55c:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <leftWst+0x3>
     560:	82 17       	cp	r24, r18
     562:	93 07       	cpc	r25, r19
     564:	59 f0       	breq	.+22     	; 0x57c <motor_set_dir+0x86>
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	0e 94 57 02 	call	0x4ae	; 0x4ae <motor_set_speed>
     570:	8f e9       	ldi	r24, 0x9F	; 159
     572:	9f e0       	ldi	r25, 0x0F	; 15
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <motor_set_dir+0x7e>
     578:	00 c0       	rjmp	.+0      	; 0x57a <motor_set_dir+0x84>
     57a:	00 00       	nop
     57c:	c1 11       	cpse	r28, r1
     57e:	07 c0       	rjmp	.+14     	; 0x58e <motor_set_dir+0x98>
     580:	5c 9a       	sbi	0x0b, 4	; 11
     582:	5d 98       	cbi	0x0b, 5	; 11
     584:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <leftWst+0x3>
     588:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <leftWst+0x2>
     58c:	d4 cf       	rjmp	.-88     	; 0x536 <motor_set_dir+0x40>
     58e:	5c 98       	cbi	0x0b, 4	; 11
     590:	5d 9a       	sbi	0x0b, 5	; 11
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <leftWst+0x3>
     59a:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <leftWst+0x2>
     59e:	cb cf       	rjmp	.-106    	; 0x536 <motor_set_dir+0x40>

000005a0 <robo_motorSpeed>:
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	ec 01       	movw	r28, r24
     5aa:	8b 01       	movw	r16, r22
     5ac:	97 ff       	sbrs	r25, 7
     5ae:	1c c0       	rjmp	.+56     	; 0x5e8 <robo_motorSpeed+0x48>
     5b0:	61 e0       	ldi	r22, 0x01	; 1
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <motor_set_dir>
     5b8:	d1 95       	neg	r29
     5ba:	c1 95       	neg	r28
     5bc:	d1 09       	sbc	r29, r1
     5be:	17 ff       	sbrs	r17, 7
     5c0:	18 c0       	rjmp	.+48     	; 0x5f2 <robo_motorSpeed+0x52>
     5c2:	61 e0       	ldi	r22, 0x01	; 1
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <motor_set_dir>
     5ca:	11 95       	neg	r17
     5cc:	01 95       	neg	r16
     5ce:	11 09       	sbc	r17, r1
     5d0:	b8 01       	movw	r22, r16
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0e 94 57 02 	call	0x4ae	; 0x4ae <motor_set_speed>
     5d8:	be 01       	movw	r22, r28
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <motor_set_speed>
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <motor_set_dir>
     5f0:	e6 cf       	rjmp	.-52     	; 0x5be <robo_motorSpeed+0x1e>
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <motor_set_dir>
     5fa:	ea cf       	rjmp	.-44     	; 0x5d0 <robo_motorSpeed+0x30>

000005fc <USART0_init>:
     5fc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     600:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     604:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     608:	88 e1       	ldi	r24, 0x18	; 24
     60a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     60e:	86 e0       	ldi	r24, 0x06	; 6
     610:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     614:	08 95       	ret

00000616 <cputchar>:
     616:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     61a:	95 ff       	sbrs	r25, 5
     61c:	fc cf       	rjmp	.-8      	; 0x616 <cputchar>
     61e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     622:	08 95       	ret

00000624 <cgetchar>:
     624:	cf 93       	push	r28
     626:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     62a:	87 ff       	sbrs	r24, 7
     62c:	fc cf       	rjmp	.-8      	; 0x626 <cgetchar+0x2>
     62e:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     632:	8c 2f       	mov	r24, r28
     634:	0e 94 0b 03 	call	0x616	; 0x616 <cputchar>
     638:	8c 2f       	mov	r24, r28
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <cputs>:
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	ec 01       	movw	r28, r24
     644:	89 91       	ld	r24, Y+
     646:	81 11       	cpse	r24, r1
     648:	03 c0       	rjmp	.+6      	; 0x650 <cputs+0x12>
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret
     650:	0e 94 0b 03 	call	0x616	; 0x616 <cputchar>
     654:	f7 cf       	rjmp	.-18     	; 0x644 <cputs+0x6>

00000656 <robo_proxSensor>:
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	0e 94 0f 02 	call	0x41e	; 0x41e <ADC_read>
     65c:	21 e0       	ldi	r18, 0x01	; 1
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	84 36       	cpi	r24, 0x64	; 100
     662:	91 05       	cpc	r25, r1
     664:	10 f0       	brcs	.+4      	; 0x66a <robo_proxSensor+0x14>
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	c9 01       	movw	r24, r18
     66c:	08 95       	ret

0000066e <robo_lightSensor>:
     66e:	84 e0       	ldi	r24, 0x04	; 4
     670:	0e 94 0f 02 	call	0x41e	; 0x41e <ADC_read>
     674:	2b ef       	ldi	r18, 0xFB	; 251
     676:	ac 01       	movw	r20, r24
     678:	24 03       	mulsu	r18, r20
     67a:	c0 01       	movw	r24, r0
     67c:	25 9f       	mul	r18, r21
     67e:	90 0d       	add	r25, r0
     680:	11 24       	eor	r1, r1
     682:	85 50       	subi	r24, 0x05	; 5
     684:	9c 4e       	sbci	r25, 0xEC	; 236
     686:	63 e3       	ldi	r22, 0x33	; 51
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	0e 94 9e 09 	call	0x133c	; 0x133c <__divmodhi4>
     68e:	cb 01       	movw	r24, r22
     690:	65 36       	cpi	r22, 0x65	; 101
     692:	71 05       	cpc	r23, r1
     694:	14 f0       	brlt	.+4      	; 0x69a <robo_lightSensor+0x2c>
     696:	84 e6       	ldi	r24, 0x64	; 100
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	08 95       	ret

0000069c <robo_lineSensor>:
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	c0 e0       	ldi	r28, 0x00	; 0
     6a2:	d1 e0       	ldi	r29, 0x01	; 1
     6a4:	cc 0f       	add	r28, r28
     6a6:	8d 2f       	mov	r24, r29
     6a8:	0e 94 0f 02 	call	0x41e	; 0x41e <ADC_read>
     6ac:	8c 32       	cpi	r24, 0x2C	; 44
     6ae:	91 40       	sbci	r25, 0x01	; 1
     6b0:	0c f4       	brge	.+2      	; 0x6b4 <robo_lineSensor+0x18>
     6b2:	c1 60       	ori	r28, 0x01	; 1
     6b4:	df 5f       	subi	r29, 0xFF	; 255
     6b6:	d4 30       	cpi	r29, 0x04	; 4
     6b8:	a9 f7       	brne	.-22     	; 0x6a4 <robo_lineSensor+0x8>
     6ba:	8c 2f       	mov	r24, r28
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <robo_bumpSensorR>:
     6c4:	83 b1       	in	r24, 0x03	; 3
     6c6:	82 95       	swap	r24
     6c8:	8f 70       	andi	r24, 0x0F	; 15
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	89 27       	eor	r24, r25
     6ce:	81 70       	andi	r24, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	08 95       	ret

000006d4 <robo_bumpSensorL>:
     6d4:	83 b1       	in	r24, 0x03	; 3
     6d6:	86 95       	lsr	r24
     6d8:	86 95       	lsr	r24
     6da:	86 95       	lsr	r24
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	89 27       	eor	r24, r25
     6e0:	81 70       	andi	r24, 0x01	; 1
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	08 95       	ret

000006e6 <robo_Honk>:
     6e6:	5b 9a       	sbi	0x0b, 3	; 11
     6e8:	2f ef       	ldi	r18, 0xFF	; 255
     6ea:	85 ea       	ldi	r24, 0xA5	; 165
     6ec:	9e e0       	ldi	r25, 0x0E	; 14
     6ee:	21 50       	subi	r18, 0x01	; 1
     6f0:	80 40       	sbci	r24, 0x00	; 0
     6f2:	90 40       	sbci	r25, 0x00	; 0
     6f4:	e1 f7       	brne	.-8      	; 0x6ee <robo_Honk+0x8>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <robo_Honk+0x12>
     6f8:	00 00       	nop
     6fa:	5b 98       	cbi	0x0b, 3	; 11
     6fc:	2f ef       	ldi	r18, 0xFF	; 255
     6fe:	85 ea       	ldi	r24, 0xA5	; 165
     700:	9e e0       	ldi	r25, 0x0E	; 14
     702:	21 50       	subi	r18, 0x01	; 1
     704:	80 40       	sbci	r24, 0x00	; 0
     706:	90 40       	sbci	r25, 0x00	; 0
     708:	e1 f7       	brne	.-8      	; 0x702 <robo_Honk+0x1c>
     70a:	00 c0       	rjmp	.+0      	; 0x70c <robo_Honk+0x26>
     70c:	00 00       	nop
     70e:	08 95       	ret

00000710 <robo_checkBattery>:
     710:	85 e0       	ldi	r24, 0x05	; 5
     712:	0e 94 0f 02 	call	0x41e	; 0x41e <ADC_read>
     716:	84 3f       	cpi	r24, 0xF4	; 244
     718:	91 40       	sbci	r25, 0x01	; 1
     71a:	10 f4       	brcc	.+4      	; 0x720 <robo_checkBattery+0x10>
     71c:	28 9a       	sbi	0x05, 0	; 5
     71e:	08 95       	ret
     720:	28 98       	cbi	0x05, 0	; 5
     722:	08 95       	ret

00000724 <robo_goPressed>:
     724:	89 b1       	in	r24, 0x09	; 9
     726:	82 fb       	bst	r24, 2
     728:	88 27       	eor	r24, r24
     72a:	80 f9       	bld	r24, 0
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	89 27       	eor	r24, r25
     730:	08 95       	ret

00000732 <robo_wait4goPress>:
     732:	0e 94 92 03 	call	0x724	; 0x724 <robo_goPressed>
     736:	88 23       	and	r24, r24
     738:	e1 f3       	breq	.-8      	; 0x732 <robo_wait4goPress>
     73a:	08 95       	ret

0000073c <OS_ticks_init>:
     73c:	f8 94       	cli
     73e:	85 e0       	ldi	r24, 0x05	; 5
     740:	85 bd       	out	0x25, r24	; 37
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     748:	84 e6       	ldi	r24, 0x64	; 100
     74a:	86 bd       	out	0x26, r24	; 38
     74c:	78 94       	sei
     74e:	08 95       	ret

00000750 <HAL_init>:
     750:	87 e6       	ldi	r24, 0x67	; 103
     752:	0e 94 fe 02 	call	0x5fc	; 0x5fc <USART0_init>
     756:	0c 94 08 02 	jmp	0x410	; 0x410 <ADC_init>

0000075a <robo_Setup>:
     75a:	0e 94 a8 03 	call	0x750	; 0x750 <HAL_init>
     75e:	0e 94 34 02 	call	0x468	; 0x468 <motor_init>
     762:	53 9a       	sbi	0x0a, 3	; 10
     764:	5b 98       	cbi	0x0b, 3	; 11
     766:	20 9a       	sbi	0x04, 0	; 4
     768:	52 98       	cbi	0x0a, 2	; 10
     76a:	5a 9a       	sbi	0x0b, 2	; 11
     76c:	24 98       	cbi	0x04, 4	; 4
     76e:	23 98       	cbi	0x04, 3	; 4
     770:	85 b1       	in	r24, 0x05	; 5
     772:	88 61       	ori	r24, 0x18	; 24
     774:	85 b9       	out	0x05, r24	; 5
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <motor_set_dir>
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <motor_set_dir>
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <robo_motorSpeed>

00000792 <cprintf>:
     792:	4f 92       	push	r4
     794:	5f 92       	push	r5
     796:	6f 92       	push	r6
     798:	7f 92       	push	r7
     79a:	8f 92       	push	r8
     79c:	9f 92       	push	r9
     79e:	af 92       	push	r10
     7a0:	bf 92       	push	r11
     7a2:	cf 92       	push	r12
     7a4:	df 92       	push	r13
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
     7b6:	de 01       	movw	r26, r28
     7b8:	53 96       	adiw	r26, 0x13	; 19
     7ba:	ed 91       	ld	r30, X+
     7bc:	fd 91       	ld	r31, X+
     7be:	8d 01       	movw	r16, r26
     7c0:	5a e0       	ldi	r21, 0x0A	; 10
     7c2:	65 2e       	mov	r6, r21
     7c4:	71 2c       	mov	r7, r1
     7c6:	80 81       	ld	r24, Z
     7c8:	85 32       	cpi	r24, 0x25	; 37
     7ca:	81 f4       	brne	.+32     	; 0x7ec <cprintf+0x5a>
     7cc:	5f 01       	movw	r10, r30
     7ce:	82 e0       	ldi	r24, 0x02	; 2
     7d0:	a8 0e       	add	r10, r24
     7d2:	b1 1c       	adc	r11, r1
     7d4:	81 81       	ldd	r24, Z+1	; 0x01
     7d6:	84 36       	cpi	r24, 0x64	; 100
     7d8:	09 f4       	brne	.+2      	; 0x7dc <cprintf+0x4a>
     7da:	50 c0       	rjmp	.+160    	; 0x87c <cprintf+0xea>
     7dc:	90 f4       	brcc	.+36     	; 0x802 <cprintf+0x70>
     7de:	83 36       	cpi	r24, 0x63	; 99
     7e0:	61 f4       	brne	.+24     	; 0x7fa <cprintf+0x68>
     7e2:	f8 01       	movw	r30, r16
     7e4:	80 81       	ld	r24, Z
     7e6:	0e 5f       	subi	r16, 0xFE	; 254
     7e8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ea:	07 c0       	rjmp	.+14     	; 0x7fa <cprintf+0x68>
     7ec:	88 23       	and	r24, r24
     7ee:	09 f4       	brne	.+2      	; 0x7f2 <cprintf+0x60>
     7f0:	5d c0       	rjmp	.+186    	; 0x8ac <cprintf+0x11a>
     7f2:	5f 01       	movw	r10, r30
     7f4:	9f ef       	ldi	r25, 0xFF	; 255
     7f6:	a9 1a       	sub	r10, r25
     7f8:	b9 0a       	sbc	r11, r25
     7fa:	0e 94 0b 03 	call	0x616	; 0x616 <cputchar>
     7fe:	f5 01       	movw	r30, r10
     800:	e2 cf       	rjmp	.-60     	; 0x7c6 <cprintf+0x34>
     802:	83 37       	cpi	r24, 0x73	; 115
     804:	71 f1       	breq	.+92     	; 0x862 <cprintf+0xd0>
     806:	30 e1       	ldi	r19, 0x10	; 16
     808:	83 2e       	mov	r8, r19
     80a:	91 2c       	mov	r9, r1
     80c:	e1 2c       	mov	r14, r1
     80e:	40 e1       	ldi	r20, 0x10	; 16
     810:	f4 2e       	mov	r15, r20
     812:	88 37       	cpi	r24, 0x78	; 120
     814:	91 f7       	brne	.-28     	; 0x7fa <cprintf+0x68>
     816:	f8 01       	movw	r30, r16
     818:	c0 80       	ld	r12, Z
     81a:	d1 80       	ldd	r13, Z+1	; 0x01
     81c:	0e 5f       	subi	r16, 0xFE	; 254
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	84 36       	cpi	r24, 0x64	; 100
     822:	59 f4       	brne	.+22     	; 0x83a <cprintf+0xa8>
     824:	d7 fe       	sbrs	r13, 7
     826:	06 c0       	rjmp	.+12     	; 0x834 <cprintf+0xa2>
     828:	d1 94       	neg	r13
     82a:	c1 94       	neg	r12
     82c:	d1 08       	sbc	r13, r1
     82e:	8d e2       	ldi	r24, 0x2D	; 45
     830:	0e 94 0b 03 	call	0x616	; 0x616 <cputchar>
     834:	ce 14       	cp	r12, r14
     836:	df 04       	cpc	r13, r15
     838:	48 f1       	brcs	.+82     	; 0x88c <cprintf+0xfa>
     83a:	c6 01       	movw	r24, r12
     83c:	b7 01       	movw	r22, r14
     83e:	0e 94 8a 09 	call	0x1314	; 0x1314 <__udivmodhi4>
     842:	2c 01       	movw	r4, r24
     844:	67 5f       	subi	r22, 0xF7	; 247
     846:	7d 4f       	sbci	r23, 0xFD	; 253
     848:	fb 01       	movw	r30, r22
     84a:	80 81       	ld	r24, Z
     84c:	0e 94 0b 03 	call	0x616	; 0x616 <cputchar>
     850:	62 01       	movw	r12, r4
     852:	c7 01       	movw	r24, r14
     854:	b4 01       	movw	r22, r8
     856:	0e 94 8a 09 	call	0x1314	; 0x1314 <__udivmodhi4>
     85a:	7b 01       	movw	r14, r22
     85c:	67 2b       	or	r22, r23
     85e:	69 f7       	brne	.-38     	; 0x83a <cprintf+0xa8>
     860:	ce cf       	rjmp	.-100    	; 0x7fe <cprintf+0x6c>
     862:	f8 01       	movw	r30, r16
     864:	e0 80       	ld	r14, Z
     866:	f1 80       	ldd	r15, Z+1	; 0x01
     868:	0e 5f       	subi	r16, 0xFE	; 254
     86a:	1f 4f       	sbci	r17, 0xFF	; 255
     86c:	f7 01       	movw	r30, r14
     86e:	81 91       	ld	r24, Z+
     870:	7f 01       	movw	r14, r30
     872:	88 23       	and	r24, r24
     874:	21 f2       	breq	.-120    	; 0x7fe <cprintf+0x6c>
     876:	0e 94 0b 03 	call	0x616	; 0x616 <cputchar>
     87a:	f8 cf       	rjmp	.-16     	; 0x86c <cprintf+0xda>
     87c:	9a e0       	ldi	r25, 0x0A	; 10
     87e:	89 2e       	mov	r8, r25
     880:	91 2c       	mov	r9, r1
     882:	20 e1       	ldi	r18, 0x10	; 16
     884:	e2 2e       	mov	r14, r18
     886:	27 e2       	ldi	r18, 0x27	; 39
     888:	f2 2e       	mov	r15, r18
     88a:	c5 cf       	rjmp	.-118    	; 0x816 <cprintf+0x84>
     88c:	c7 01       	movw	r24, r14
     88e:	b3 01       	movw	r22, r6
     890:	0e 94 8a 09 	call	0x1314	; 0x1314 <__udivmodhi4>
     894:	7b 01       	movw	r14, r22
     896:	62 30       	cpi	r22, 0x02	; 2
     898:	71 05       	cpc	r23, r1
     89a:	60 f6       	brcc	.-104    	; 0x834 <cprintf+0xa2>
     89c:	c6 01       	movw	r24, r12
     89e:	0e 94 8a 09 	call	0x1314	; 0x1314 <__udivmodhi4>
     8a2:	fb 01       	movw	r30, r22
     8a4:	e7 5f       	subi	r30, 0xF7	; 247
     8a6:	fd 4f       	sbci	r31, 0xFD	; 253
     8a8:	80 81       	ld	r24, Z
     8aa:	a7 cf       	rjmp	.-178    	; 0x7fa <cprintf+0x68>
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	df 90       	pop	r13
     8be:	cf 90       	pop	r12
     8c0:	bf 90       	pop	r11
     8c2:	af 90       	pop	r10
     8c4:	9f 90       	pop	r9
     8c6:	8f 90       	pop	r8
     8c8:	7f 90       	pop	r7
     8ca:	6f 90       	pop	r6
     8cc:	5f 90       	pop	r5
     8ce:	4f 90       	pop	r4
     8d0:	08 95       	ret

000008d2 <OSStartHighRdy>:
     8d2:	00 91 32 04 	lds	r16, 0x0432	; 0x800432 <OSRunning>
     8d6:	03 95       	inc	r16
     8d8:	00 93 32 04 	sts	0x0432, r16	; 0x800432 <OSRunning>
     8dc:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <OSTCBHighRdy>
     8e0:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <OSTCBHighRdy+0x1>
     8e4:	c1 91       	ld	r28, Z+
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	d1 91       	ld	r29, Z+
     8ea:	de bf       	out	0x3e, r29	; 62
     8ec:	0f 91       	pop	r16
     8ee:	0f bf       	out	0x3f, r16	; 63
     8f0:	ff 91       	pop	r31
     8f2:	ef 91       	pop	r30
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	bf 91       	pop	r27
     8fa:	af 91       	pop	r26
     8fc:	9f 91       	pop	r25
     8fe:	8f 91       	pop	r24
     900:	7f 91       	pop	r23
     902:	6f 91       	pop	r22
     904:	5f 91       	pop	r21
     906:	4f 91       	pop	r20
     908:	3f 91       	pop	r19
     90a:	2f 91       	pop	r18
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	df 90       	pop	r13
     916:	cf 90       	pop	r12
     918:	bf 90       	pop	r11
     91a:	af 90       	pop	r10
     91c:	9f 90       	pop	r9
     91e:	8f 90       	pop	r8
     920:	7f 90       	pop	r7
     922:	6f 90       	pop	r6
     924:	5f 90       	pop	r5
     926:	4f 90       	pop	r4
     928:	3f 90       	pop	r3
     92a:	2f 90       	pop	r2
     92c:	1f 90       	pop	r1
     92e:	0f 90       	pop	r0
     930:	08 95       	ret

00000932 <OSCtxSw>:
     932:	0f 92       	push	r0
     934:	1f 92       	push	r1
     936:	2f 92       	push	r2
     938:	3f 92       	push	r3
     93a:	4f 92       	push	r4
     93c:	5f 92       	push	r5
     93e:	6f 92       	push	r6
     940:	7f 92       	push	r7
     942:	8f 92       	push	r8
     944:	9f 92       	push	r9
     946:	af 92       	push	r10
     948:	bf 92       	push	r11
     94a:	cf 92       	push	r12
     94c:	df 92       	push	r13
     94e:	ef 92       	push	r14
     950:	ff 92       	push	r15
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	2f 93       	push	r18
     958:	3f 93       	push	r19
     95a:	4f 93       	push	r20
     95c:	5f 93       	push	r21
     95e:	6f 93       	push	r22
     960:	7f 93       	push	r23
     962:	8f 93       	push	r24
     964:	9f 93       	push	r25
     966:	af 93       	push	r26
     968:	bf 93       	push	r27
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	ef 93       	push	r30
     970:	ff 93       	push	r31
     972:	0f b7       	in	r16, 0x3f	; 63
     974:	0f 93       	push	r16
     976:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <OSTCBCur>
     97a:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <OSTCBCur+0x1>
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	c1 93       	st	Z+, r28
     982:	de b7       	in	r29, 0x3e	; 62
     984:	d1 93       	st	Z+, r29
     986:	00 91 37 04 	lds	r16, 0x0437	; 0x800437 <OSPrioHighRdy>
     98a:	00 93 38 04 	sts	0x0438, r16	; 0x800438 <OSPrioCur>
     98e:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <OSTCBHighRdy>
     992:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <OSTCBHighRdy+0x1>
     996:	e0 93 4a 04 	sts	0x044A, r30	; 0x80044a <OSTCBCur>
     99a:	f0 93 4b 04 	sts	0x044B, r31	; 0x80044b <OSTCBCur+0x1>
     99e:	c1 91       	ld	r28, Z+
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	d1 91       	ld	r29, Z+
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f 91       	pop	r16
     9a8:	0f bf       	out	0x3f, r16	; 63
     9aa:	ff 91       	pop	r31
     9ac:	ef 91       	pop	r30
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	bf 91       	pop	r27
     9b4:	af 91       	pop	r26
     9b6:	9f 91       	pop	r25
     9b8:	8f 91       	pop	r24
     9ba:	7f 91       	pop	r23
     9bc:	6f 91       	pop	r22
     9be:	5f 91       	pop	r21
     9c0:	4f 91       	pop	r20
     9c2:	3f 91       	pop	r19
     9c4:	2f 91       	pop	r18
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	ff 90       	pop	r15
     9cc:	ef 90       	pop	r14
     9ce:	df 90       	pop	r13
     9d0:	cf 90       	pop	r12
     9d2:	bf 90       	pop	r11
     9d4:	af 90       	pop	r10
     9d6:	9f 90       	pop	r9
     9d8:	8f 90       	pop	r8
     9da:	7f 90       	pop	r7
     9dc:	6f 90       	pop	r6
     9de:	5f 90       	pop	r5
     9e0:	4f 90       	pop	r4
     9e2:	3f 90       	pop	r3
     9e4:	2f 90       	pop	r2
     9e6:	1f 90       	pop	r1
     9e8:	0f 90       	pop	r0
     9ea:	08 95       	ret

000009ec <OSIntCtxSw>:
     9ec:	00 91 37 04 	lds	r16, 0x0437	; 0x800437 <OSPrioHighRdy>
     9f0:	00 93 38 04 	sts	0x0438, r16	; 0x800438 <OSPrioCur>
     9f4:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <OSTCBHighRdy>
     9f8:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <OSTCBHighRdy+0x1>
     9fc:	e0 93 4a 04 	sts	0x044A, r30	; 0x80044a <OSTCBCur>
     a00:	f0 93 4b 04 	sts	0x044B, r31	; 0x80044b <OSTCBCur+0x1>
     a04:	c1 91       	ld	r28, Z+
     a06:	cd bf       	out	0x3d, r28	; 61
     a08:	d1 91       	ld	r29, Z+
     a0a:	de bf       	out	0x3e, r29	; 62
     a0c:	0f 91       	pop	r16
     a0e:	0f bf       	out	0x3f, r16	; 63
     a10:	ff 91       	pop	r31
     a12:	ef 91       	pop	r30
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	bf 91       	pop	r27
     a1a:	af 91       	pop	r26
     a1c:	9f 91       	pop	r25
     a1e:	8f 91       	pop	r24
     a20:	7f 91       	pop	r23
     a22:	6f 91       	pop	r22
     a24:	5f 91       	pop	r21
     a26:	4f 91       	pop	r20
     a28:	3f 91       	pop	r19
     a2a:	2f 91       	pop	r18
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	ff 90       	pop	r15
     a32:	ef 90       	pop	r14
     a34:	df 90       	pop	r13
     a36:	cf 90       	pop	r12
     a38:	bf 90       	pop	r11
     a3a:	af 90       	pop	r10
     a3c:	9f 90       	pop	r9
     a3e:	8f 90       	pop	r8
     a40:	7f 90       	pop	r7
     a42:	6f 90       	pop	r6
     a44:	5f 90       	pop	r5
     a46:	4f 90       	pop	r4
     a48:	3f 90       	pop	r3
     a4a:	2f 90       	pop	r2
     a4c:	1f 90       	pop	r1
     a4e:	0f 90       	pop	r0
     a50:	08 95       	ret

00000a52 <OSTickISR>:
     a52:	0f 92       	push	r0
     a54:	1f 92       	push	r1
     a56:	2f 92       	push	r2
     a58:	3f 92       	push	r3
     a5a:	4f 92       	push	r4
     a5c:	5f 92       	push	r5
     a5e:	6f 92       	push	r6
     a60:	7f 92       	push	r7
     a62:	8f 92       	push	r8
     a64:	9f 92       	push	r9
     a66:	af 92       	push	r10
     a68:	bf 92       	push	r11
     a6a:	cf 92       	push	r12
     a6c:	df 92       	push	r13
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	2f 93       	push	r18
     a78:	3f 93       	push	r19
     a7a:	4f 93       	push	r20
     a7c:	5f 93       	push	r21
     a7e:	6f 93       	push	r22
     a80:	7f 93       	push	r23
     a82:	8f 93       	push	r24
     a84:	9f 93       	push	r25
     a86:	af 93       	push	r26
     a88:	bf 93       	push	r27
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	ef 93       	push	r30
     a90:	ff 93       	push	r31
     a92:	0f b7       	in	r16, 0x3f	; 63
     a94:	00 68       	ori	r16, 0x80	; 128
     a96:	0f 93       	push	r16
     a98:	00 91 49 04 	lds	r16, 0x0449	; 0x800449 <OSIntNesting>
     a9c:	03 95       	inc	r16
     a9e:	00 93 49 04 	sts	0x0449, r16	; 0x800449 <OSIntNesting>
     aa2:	01 30       	cpi	r16, 0x01	; 1
     aa4:	41 f4       	brne	.+16     	; 0xab6 <_not_first_int>
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
     aaa:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <OSTCBCur>
     aae:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <OSTCBCur+0x1>
     ab2:	c1 93       	st	Z+, r28
     ab4:	d1 93       	st	Z+, r29

00000ab6 <_not_first_int>:
     ab6:	04 e6       	ldi	r16, 0x64	; 100
     ab8:	06 bd       	out	0x26, r16	; 38
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	1f 2e       	mov	r1, r31
     abe:	78 94       	sei
     ac0:	0e 94 8c 06 	call	0xd18	; 0xd18 <OSTimeTick>
     ac4:	00 00       	nop
     ac6:	0e 94 ff 05 	call	0xbfe	; 0xbfe <OSIntExit>
     aca:	0f 91       	pop	r16
     acc:	0f bf       	out	0x3f, r16	; 63
     ace:	ff 91       	pop	r31
     ad0:	ef 91       	pop	r30
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	bf 91       	pop	r27
     ad8:	af 91       	pop	r26
     ada:	9f 91       	pop	r25
     adc:	8f 91       	pop	r24
     ade:	7f 91       	pop	r23
     ae0:	6f 91       	pop	r22
     ae2:	5f 91       	pop	r21
     ae4:	4f 91       	pop	r20
     ae6:	3f 91       	pop	r19
     ae8:	2f 91       	pop	r18
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	ff 90       	pop	r15
     af0:	ef 90       	pop	r14
     af2:	df 90       	pop	r13
     af4:	cf 90       	pop	r12
     af6:	bf 90       	pop	r11
     af8:	af 90       	pop	r10
     afa:	9f 90       	pop	r9
     afc:	8f 90       	pop	r8
     afe:	7f 90       	pop	r7
     b00:	6f 90       	pop	r6
     b02:	5f 90       	pop	r5
     b04:	4f 90       	pop	r4
     b06:	3f 90       	pop	r3
     b08:	2f 90       	pop	r2
     b0a:	1f 90       	pop	r1
     b0c:	0f 90       	pop	r0
     b0e:	08 95       	ret

00000b10 <OSTaskStkInit>:
     b10:	fa 01       	movw	r30, r20
     b12:	80 83       	st	Z, r24
     b14:	31 97       	sbiw	r30, 0x01	; 1
     b16:	90 83       	st	Z, r25
     b18:	31 97       	sbiw	r30, 0x01	; 1
     b1a:	10 82       	st	Z, r1
     b1c:	31 97       	sbiw	r30, 0x01	; 1
     b1e:	10 82       	st	Z, r1
     b20:	31 97       	sbiw	r30, 0x01	; 1
     b22:	10 82       	st	Z, r1
     b24:	31 97       	sbiw	r30, 0x01	; 1
     b26:	10 82       	st	Z, r1
     b28:	31 97       	sbiw	r30, 0x01	; 1
     b2a:	10 82       	st	Z, r1
     b2c:	31 97       	sbiw	r30, 0x01	; 1
     b2e:	10 82       	st	Z, r1
     b30:	31 97       	sbiw	r30, 0x01	; 1
     b32:	10 82       	st	Z, r1
     b34:	31 97       	sbiw	r30, 0x01	; 1
     b36:	10 82       	st	Z, r1
     b38:	31 97       	sbiw	r30, 0x01	; 1
     b3a:	10 82       	st	Z, r1
     b3c:	31 97       	sbiw	r30, 0x01	; 1
     b3e:	10 82       	st	Z, r1
     b40:	31 97       	sbiw	r30, 0x01	; 1
     b42:	10 82       	st	Z, r1
     b44:	31 97       	sbiw	r30, 0x01	; 1
     b46:	10 82       	st	Z, r1
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	10 82       	st	Z, r1
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	10 82       	st	Z, r1
     b50:	31 97       	sbiw	r30, 0x01	; 1
     b52:	10 82       	st	Z, r1
     b54:	31 97       	sbiw	r30, 0x01	; 1
     b56:	10 82       	st	Z, r1
     b58:	31 97       	sbiw	r30, 0x01	; 1
     b5a:	10 82       	st	Z, r1
     b5c:	31 97       	sbiw	r30, 0x01	; 1
     b5e:	10 82       	st	Z, r1
     b60:	31 97       	sbiw	r30, 0x01	; 1
     b62:	10 82       	st	Z, r1
     b64:	31 97       	sbiw	r30, 0x01	; 1
     b66:	10 82       	st	Z, r1
     b68:	31 97       	sbiw	r30, 0x01	; 1
     b6a:	10 82       	st	Z, r1
     b6c:	31 97       	sbiw	r30, 0x01	; 1
     b6e:	10 82       	st	Z, r1
     b70:	31 97       	sbiw	r30, 0x01	; 1
     b72:	10 82       	st	Z, r1
     b74:	31 97       	sbiw	r30, 0x01	; 1
     b76:	10 82       	st	Z, r1
     b78:	31 97       	sbiw	r30, 0x01	; 1
     b7a:	60 83       	st	Z, r22
     b7c:	31 97       	sbiw	r30, 0x01	; 1
     b7e:	70 83       	st	Z, r23
     b80:	31 97       	sbiw	r30, 0x01	; 1
     b82:	10 82       	st	Z, r1
     b84:	31 97       	sbiw	r30, 0x01	; 1
     b86:	10 82       	st	Z, r1
     b88:	31 97       	sbiw	r30, 0x01	; 1
     b8a:	10 82       	st	Z, r1
     b8c:	31 97       	sbiw	r30, 0x01	; 1
     b8e:	10 82       	st	Z, r1
     b90:	31 97       	sbiw	r30, 0x01	; 1
     b92:	10 82       	st	Z, r1
     b94:	31 97       	sbiw	r30, 0x01	; 1
     b96:	10 82       	st	Z, r1
     b98:	31 97       	sbiw	r30, 0x01	; 1
     b9a:	80 e8       	ldi	r24, 0x80	; 128
     b9c:	80 83       	st	Z, r24
     b9e:	ca 01       	movw	r24, r20
     ba0:	83 97       	sbiw	r24, 0x23	; 35
     ba2:	08 95       	ret

00000ba4 <OSTaskCreateHook>:
     ba4:	08 95       	ret

00000ba6 <OSTaskDelHook>:
     ba6:	08 95       	ret

00000ba8 <OSTaskSwHook>:
     ba8:	08 95       	ret

00000baa <OSTaskStatHook>:
     baa:	08 95       	ret

00000bac <OSTimeTickHook>:
     bac:	08 95       	ret

00000bae <OSInitHookBegin>:
     bae:	08 95       	ret

00000bb0 <OSInitHookEnd>:
     bb0:	08 95       	ret

00000bb2 <OSTaskIdleHook>:
     bb2:	08 95       	ret

00000bb4 <OSTCBInitHook>:
     bb4:	08 95       	ret

00000bb6 <OS_TaskIdle>:
     bb6:	f8 94       	cli
     bb8:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <OSIdleCtr>
     bbc:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <OSIdleCtr+0x1>
     bc0:	a0 91 35 04 	lds	r26, 0x0435	; 0x800435 <OSIdleCtr+0x2>
     bc4:	b0 91 36 04 	lds	r27, 0x0436	; 0x800436 <OSIdleCtr+0x3>
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	a1 1d       	adc	r26, r1
     bcc:	b1 1d       	adc	r27, r1
     bce:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <OSIdleCtr>
     bd2:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <OSIdleCtr+0x1>
     bd6:	a0 93 35 04 	sts	0x0435, r26	; 0x800435 <OSIdleCtr+0x2>
     bda:	b0 93 36 04 	sts	0x0436, r27	; 0x800436 <OSIdleCtr+0x3>
     bde:	78 94       	sei
     be0:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <OSTaskIdleHook>
     be4:	e8 cf       	rjmp	.-48     	; 0xbb6 <OS_TaskIdle>

00000be6 <OSIntEnter>:
     be6:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <OSRunning>
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	39 f4       	brne	.+14     	; 0xbfc <OSIntEnter+0x16>
     bee:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <OSIntNesting>
     bf2:	8f 3f       	cpi	r24, 0xFF	; 255
     bf4:	19 f0       	breq	.+6      	; 0xbfc <OSIntEnter+0x16>
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <OSIntNesting>
     bfc:	08 95       	ret

00000bfe <OSIntExit>:
     bfe:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <OSRunning>
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	09 f0       	breq	.+2      	; 0xc08 <OSIntExit+0xa>
     c06:	4c c0       	rjmp	.+152    	; 0xca0 <OSIntExit+0xa2>
     c08:	f8 94       	cli
     c0a:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <OSIntNesting>
     c0e:	88 23       	and	r24, r24
     c10:	19 f0       	breq	.+6      	; 0xc18 <OSIntExit+0x1a>
     c12:	81 50       	subi	r24, 0x01	; 1
     c14:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <OSIntNesting>
     c18:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <OSIntNesting>
     c1c:	81 11       	cpse	r24, r1
     c1e:	3f c0       	rjmp	.+126    	; 0xc9e <OSIntExit+0xa0>
     c20:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <OSLockNesting>
     c24:	81 11       	cpse	r24, r1
     c26:	3b c0       	rjmp	.+118    	; 0xc9e <OSIntExit+0xa0>
     c28:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <OSRdyGrp>
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	ef 5f       	subi	r30, 0xFF	; 255
     c30:	fe 4f       	sbci	r31, 0xFE	; 254
     c32:	e0 81       	ld	r30, Z
     c34:	e0 93 48 04 	sts	0x0448, r30	; 0x800448 <OSIntExitY>
     c38:	ae 2f       	mov	r26, r30
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	ab 5b       	subi	r26, 0xBB	; 187
     c3e:	bb 4f       	sbci	r27, 0xFB	; 251
     c40:	ac 91       	ld	r26, X
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	af 5f       	subi	r26, 0xFF	; 255
     c46:	be 4f       	sbci	r27, 0xFE	; 254
     c48:	ee 0f       	add	r30, r30
     c4a:	ee 0f       	add	r30, r30
     c4c:	ee 0f       	add	r30, r30
     c4e:	8c 91       	ld	r24, X
     c50:	e8 0f       	add	r30, r24
     c52:	e0 93 37 04 	sts	0x0437, r30	; 0x800437 <OSPrioHighRdy>
     c56:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <OSPrioCur>
     c5a:	e8 17       	cp	r30, r24
     c5c:	01 f1       	breq	.+64     	; 0xc9e <OSIntExit+0xa0>
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	ee 0f       	add	r30, r30
     c62:	ff 1f       	adc	r31, r31
     c64:	e5 57       	subi	r30, 0x75	; 117
     c66:	fa 4f       	sbci	r31, 0xFA	; 250
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <OSTCBHighRdy+0x1>
     c70:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <OSTCBHighRdy>
     c74:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <OSCtxSwCtr>
     c78:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <OSCtxSwCtr+0x1>
     c7c:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <OSCtxSwCtr+0x2>
     c80:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <OSCtxSwCtr+0x3>
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	a1 1d       	adc	r26, r1
     c88:	b1 1d       	adc	r27, r1
     c8a:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <OSCtxSwCtr>
     c8e:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <OSCtxSwCtr+0x1>
     c92:	a0 93 3d 04 	sts	0x043D, r26	; 0x80043d <OSCtxSwCtr+0x2>
     c96:	b0 93 3e 04 	sts	0x043E, r27	; 0x80043e <OSCtxSwCtr+0x3>
     c9a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <OSIntCtxSw>
     c9e:	78 94       	sei
     ca0:	08 95       	ret

00000ca2 <OSSchedLock>:
     ca2:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <OSRunning>
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	49 f4       	brne	.+18     	; 0xcbc <OSSchedLock+0x1a>
     caa:	f8 94       	cli
     cac:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <OSLockNesting>
     cb0:	8f 3f       	cpi	r24, 0xFF	; 255
     cb2:	19 f0       	breq	.+6      	; 0xcba <OSSchedLock+0x18>
     cb4:	8f 5f       	subi	r24, 0xFF	; 255
     cb6:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <OSLockNesting>
     cba:	78 94       	sei
     cbc:	08 95       	ret

00000cbe <OSStart>:
     cbe:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <OSRunning>
     cc2:	81 11       	cpse	r24, r1
     cc4:	28 c0       	rjmp	.+80     	; 0xd16 <OSStart+0x58>
     cc6:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <OSRdyGrp>
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	ef 5f       	subi	r30, 0xFF	; 255
     cce:	fe 4f       	sbci	r31, 0xFE	; 254
     cd0:	e0 81       	ld	r30, Z
     cd2:	ae 2f       	mov	r26, r30
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	ab 5b       	subi	r26, 0xBB	; 187
     cd8:	bb 4f       	sbci	r27, 0xFB	; 251
     cda:	ac 91       	ld	r26, X
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	af 5f       	subi	r26, 0xFF	; 255
     ce0:	be 4f       	sbci	r27, 0xFE	; 254
     ce2:	ee 0f       	add	r30, r30
     ce4:	ee 0f       	add	r30, r30
     ce6:	ee 0f       	add	r30, r30
     ce8:	8c 91       	ld	r24, X
     cea:	e8 0f       	add	r30, r24
     cec:	e0 93 37 04 	sts	0x0437, r30	; 0x800437 <OSPrioHighRdy>
     cf0:	e0 93 38 04 	sts	0x0438, r30	; 0x800438 <OSPrioCur>
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	ee 0f       	add	r30, r30
     cf8:	ff 1f       	adc	r31, r31
     cfa:	e5 57       	subi	r30, 0x75	; 117
     cfc:	fa 4f       	sbci	r31, 0xFA	; 250
     cfe:	80 81       	ld	r24, Z
     d00:	91 81       	ldd	r25, Z+1	; 0x01
     d02:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <OSTCBHighRdy+0x1>
     d06:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <OSTCBHighRdy>
     d0a:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <OSTCBCur+0x1>
     d0e:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <OSTCBCur>
     d12:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <OSStartHighRdy>
     d16:	08 95       	ret

00000d18 <OSTimeTick>:
     d18:	0e 94 d6 05 	call	0xbac	; 0xbac <OSTimeTickHook>
     d1c:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <OSRunning>
     d20:	e0 91 39 04 	lds	r30, 0x0439	; 0x800439 <OSTCBList>
     d24:	f0 91 3a 04 	lds	r31, 0x043A	; 0x80043a <OSTCBList+0x1>
     d28:	21 e0       	ldi	r18, 0x01	; 1
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	01 f1       	breq	.+64     	; 0xd70 <OSTimeTick+0x58>
     d30:	08 95       	ret
     d32:	f8 94       	cli
     d34:	86 81       	ldd	r24, Z+6	; 0x06
     d36:	97 81       	ldd	r25, Z+7	; 0x07
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	b1 f0       	breq	.+44     	; 0xd68 <OSTimeTick+0x50>
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	97 83       	std	Z+7, r25	; 0x07
     d40:	86 83       	std	Z+6, r24	; 0x06
     d42:	89 2b       	or	r24, r25
     d44:	89 f4       	brne	.+34     	; 0xd68 <OSTimeTick+0x50>
     d46:	80 85       	ldd	r24, Z+8	; 0x08
     d48:	83 fd       	sbrc	r24, 3
     d4a:	16 c0       	rjmp	.+44     	; 0xd78 <OSTimeTick+0x60>
     d4c:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <OSRdyGrp>
     d50:	95 85       	ldd	r25, Z+13	; 0x0d
     d52:	89 2b       	or	r24, r25
     d54:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <OSRdyGrp>
     d58:	a3 85       	ldd	r26, Z+11	; 0x0b
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	ab 5b       	subi	r26, 0xBB	; 187
     d5e:	bb 4f       	sbci	r27, 0xFB	; 251
     d60:	8c 91       	ld	r24, X
     d62:	94 85       	ldd	r25, Z+12	; 0x0c
     d64:	89 2b       	or	r24, r25
     d66:	8c 93       	st	X, r24
     d68:	02 80       	ldd	r0, Z+2	; 0x02
     d6a:	f3 81       	ldd	r31, Z+3	; 0x03
     d6c:	e0 2d       	mov	r30, r0
     d6e:	78 94       	sei
     d70:	81 85       	ldd	r24, Z+9	; 0x09
     d72:	80 31       	cpi	r24, 0x10	; 16
     d74:	f1 f6       	brne	.-68     	; 0xd32 <OSTimeTick+0x1a>
     d76:	dc cf       	rjmp	.-72     	; 0xd30 <OSTimeTick+0x18>
     d78:	37 83       	std	Z+7, r19	; 0x07
     d7a:	26 83       	std	Z+6, r18	; 0x06
     d7c:	f5 cf       	rjmp	.-22     	; 0xd68 <OSTimeTick+0x50>

00000d7e <OSVersion>:
     d7e:	8c ef       	ldi	r24, 0xFC	; 252
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	08 95       	ret

00000d84 <OS_Dummy>:
     d84:	08 95       	ret

00000d86 <OS_Sched>:
     d86:	f8 94       	cli
     d88:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <OSIntNesting>
     d8c:	81 11       	cpse	r24, r1
     d8e:	3d c0       	rjmp	.+122    	; 0xe0a <OS_Sched+0x84>
     d90:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <OSLockNesting>
     d94:	81 11       	cpse	r24, r1
     d96:	39 c0       	rjmp	.+114    	; 0xe0a <OS_Sched+0x84>
     d98:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <OSRdyGrp>
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	ef 5f       	subi	r30, 0xFF	; 255
     da0:	fe 4f       	sbci	r31, 0xFE	; 254
     da2:	e0 81       	ld	r30, Z
     da4:	ae 2f       	mov	r26, r30
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	ab 5b       	subi	r26, 0xBB	; 187
     daa:	bb 4f       	sbci	r27, 0xFB	; 251
     dac:	ac 91       	ld	r26, X
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	af 5f       	subi	r26, 0xFF	; 255
     db2:	be 4f       	sbci	r27, 0xFE	; 254
     db4:	ee 0f       	add	r30, r30
     db6:	ee 0f       	add	r30, r30
     db8:	ee 0f       	add	r30, r30
     dba:	8c 91       	ld	r24, X
     dbc:	e8 0f       	add	r30, r24
     dbe:	e0 93 37 04 	sts	0x0437, r30	; 0x800437 <OSPrioHighRdy>
     dc2:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <OSPrioCur>
     dc6:	e8 17       	cp	r30, r24
     dc8:	01 f1       	breq	.+64     	; 0xe0a <OS_Sched+0x84>
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	ee 0f       	add	r30, r30
     dce:	ff 1f       	adc	r31, r31
     dd0:	e5 57       	subi	r30, 0x75	; 117
     dd2:	fa 4f       	sbci	r31, 0xFA	; 250
     dd4:	80 81       	ld	r24, Z
     dd6:	91 81       	ldd	r25, Z+1	; 0x01
     dd8:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <OSTCBHighRdy+0x1>
     ddc:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <OSTCBHighRdy>
     de0:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <OSCtxSwCtr>
     de4:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <OSCtxSwCtr+0x1>
     de8:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <OSCtxSwCtr+0x2>
     dec:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <OSCtxSwCtr+0x3>
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	a1 1d       	adc	r26, r1
     df4:	b1 1d       	adc	r27, r1
     df6:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <OSCtxSwCtr>
     dfa:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <OSCtxSwCtr+0x1>
     dfe:	a0 93 3d 04 	sts	0x043D, r26	; 0x80043d <OSCtxSwCtr+0x2>
     e02:	b0 93 3e 04 	sts	0x043E, r27	; 0x80043e <OSCtxSwCtr+0x3>
     e06:	0e 94 99 04 	call	0x932	; 0x932 <OSCtxSw>
     e0a:	78 94       	sei
     e0c:	08 95       	ret

00000e0e <OSSchedUnlock>:
     e0e:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <OSRunning>
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	91 f4       	brne	.+36     	; 0xe3a <OSSchedUnlock+0x2c>
     e16:	f8 94       	cli
     e18:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <OSLockNesting>
     e1c:	88 23       	and	r24, r24
     e1e:	61 f0       	breq	.+24     	; 0xe38 <OSSchedUnlock+0x2a>
     e20:	81 50       	subi	r24, 0x01	; 1
     e22:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <OSLockNesting>
     e26:	81 11       	cpse	r24, r1
     e28:	07 c0       	rjmp	.+14     	; 0xe38 <OSSchedUnlock+0x2a>
     e2a:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <OSIntNesting>
     e2e:	81 11       	cpse	r24, r1
     e30:	03 c0       	rjmp	.+6      	; 0xe38 <OSSchedUnlock+0x2a>
     e32:	78 94       	sei
     e34:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <OS_Sched>
     e38:	78 94       	sei
     e3a:	08 95       	ret

00000e3c <OSTimeDly.part.0>:
     e3c:	ac 01       	movw	r20, r24
     e3e:	f8 94       	cli
     e40:	a0 91 4a 04 	lds	r26, 0x044A	; 0x80044a <OSTCBCur>
     e44:	b0 91 4b 04 	lds	r27, 0x044B	; 0x80044b <OSTCBCur+0x1>
     e48:	1b 96       	adiw	r26, 0x0b	; 11
     e4a:	ec 91       	ld	r30, X
     e4c:	1b 97       	sbiw	r26, 0x0b	; 11
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	1c 96       	adiw	r26, 0x0c	; 12
     e52:	9c 91       	ld	r25, X
     e54:	1c 97       	sbiw	r26, 0x0c	; 12
     e56:	90 95       	com	r25
     e58:	eb 5b       	subi	r30, 0xBB	; 187
     e5a:	fb 4f       	sbci	r31, 0xFB	; 251
     e5c:	80 81       	ld	r24, Z
     e5e:	98 23       	and	r25, r24
     e60:	90 83       	st	Z, r25
     e62:	91 11       	cpse	r25, r1
     e64:	0a c0       	rjmp	.+20     	; 0xe7a <OSTimeDly.part.0+0x3e>
     e66:	1d 96       	adiw	r26, 0x0d	; 13
     e68:	9c 91       	ld	r25, X
     e6a:	1d 97       	sbiw	r26, 0x0d	; 13
     e6c:	29 2f       	mov	r18, r25
     e6e:	20 95       	com	r18
     e70:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <OSRdyGrp>
     e74:	92 23       	and	r25, r18
     e76:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <OSRdyGrp>
     e7a:	17 96       	adiw	r26, 0x07	; 7
     e7c:	5c 93       	st	X, r21
     e7e:	4e 93       	st	-X, r20
     e80:	16 97       	sbiw	r26, 0x06	; 6
     e82:	78 94       	sei
     e84:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <OS_Sched>

00000e88 <OS_TCBInit>:
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	f8 94       	cli
     e90:	c0 91 3f 04 	lds	r28, 0x043F	; 0x80043f <OSTCBFreeList>
     e94:	d0 91 40 04 	lds	r29, 0x0440	; 0x800440 <OSTCBFreeList+0x1>
     e98:	20 97       	sbiw	r28, 0x00	; 0
     e9a:	09 f4       	brne	.+2      	; 0xe9e <OS_TCBInit+0x16>
     e9c:	54 c0       	rjmp	.+168    	; 0xf46 <OS_TCBInit+0xbe>
     e9e:	18 2f       	mov	r17, r24
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	9b 81       	ldd	r25, Y+3	; 0x03
     ea4:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <OSTCBFreeList+0x1>
     ea8:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <OSTCBFreeList>
     eac:	78 94       	sei
     eae:	79 83       	std	Y+1, r23	; 0x01
     eb0:	68 83       	st	Y, r22
     eb2:	19 87       	std	Y+9, r17	; 0x09
     eb4:	18 86       	std	Y+8, r1	; 0x08
     eb6:	1f 82       	std	Y+7, r1	; 0x07
     eb8:	1e 82       	std	Y+6, r1	; 0x06
     eba:	1e 86       	std	Y+14, r1	; 0x0e
     ebc:	e1 2f       	mov	r30, r17
     ebe:	e6 95       	lsr	r30
     ec0:	e6 95       	lsr	r30
     ec2:	e6 95       	lsr	r30
     ec4:	eb 87       	std	Y+11, r30	; 0x0b
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	ef 5f       	subi	r30, 0xFF	; 255
     eca:	fd 4f       	sbci	r31, 0xFD	; 253
     ecc:	80 81       	ld	r24, Z
     ece:	8d 87       	std	Y+13, r24	; 0x0d
     ed0:	e1 2f       	mov	r30, r17
     ed2:	e7 70       	andi	r30, 0x07	; 7
     ed4:	ea 87       	std	Y+10, r30	; 0x0a
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	ef 5f       	subi	r30, 0xFF	; 255
     eda:	fd 4f       	sbci	r31, 0xFD	; 253
     edc:	80 81       	ld	r24, Z
     ede:	8c 87       	std	Y+12, r24	; 0x0c
     ee0:	ce 01       	movw	r24, r28
     ee2:	0e 94 da 05 	call	0xbb4	; 0xbb4 <OSTCBInitHook>
     ee6:	ce 01       	movw	r24, r28
     ee8:	0e 94 d2 05 	call	0xba4	; 0xba4 <OSTaskCreateHook>
     eec:	f8 94       	cli
     eee:	e1 2f       	mov	r30, r17
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	ee 0f       	add	r30, r30
     ef4:	ff 1f       	adc	r31, r31
     ef6:	e5 57       	subi	r30, 0x75	; 117
     ef8:	fa 4f       	sbci	r31, 0xFA	; 250
     efa:	d1 83       	std	Z+1, r29	; 0x01
     efc:	c0 83       	st	Z, r28
     efe:	e0 91 39 04 	lds	r30, 0x0439	; 0x800439 <OSTCBList>
     f02:	f0 91 3a 04 	lds	r31, 0x043A	; 0x80043a <OSTCBList+0x1>
     f06:	fb 83       	std	Y+3, r31	; 0x03
     f08:	ea 83       	std	Y+2, r30	; 0x02
     f0a:	1d 82       	std	Y+5, r1	; 0x05
     f0c:	1c 82       	std	Y+4, r1	; 0x04
     f0e:	30 97       	sbiw	r30, 0x00	; 0
     f10:	11 f0       	breq	.+4      	; 0xf16 <OS_TCBInit+0x8e>
     f12:	d5 83       	std	Z+5, r29	; 0x05
     f14:	c4 83       	std	Z+4, r28	; 0x04
     f16:	d0 93 3a 04 	sts	0x043A, r29	; 0x80043a <OSTCBList+0x1>
     f1a:	c0 93 39 04 	sts	0x0439, r28	; 0x800439 <OSTCBList>
     f1e:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <OSRdyGrp>
     f22:	9d 85       	ldd	r25, Y+13	; 0x0d
     f24:	89 2b       	or	r24, r25
     f26:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <OSRdyGrp>
     f2a:	eb 85       	ldd	r30, Y+11	; 0x0b
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	eb 5b       	subi	r30, 0xBB	; 187
     f30:	fb 4f       	sbci	r31, 0xFB	; 251
     f32:	80 81       	ld	r24, Z
     f34:	9c 85       	ldd	r25, Y+12	; 0x0c
     f36:	89 2b       	or	r24, r25
     f38:	80 83       	st	Z, r24
     f3a:	78 94       	sei
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	08 95       	ret
     f46:	78 94       	sei
     f48:	86 e4       	ldi	r24, 0x46	; 70
     f4a:	f9 cf       	rjmp	.-14     	; 0xf3e <OS_TCBInit+0xb6>

00000f4c <OSTaskCreate>:
     f4c:	9f 92       	push	r9
     f4e:	af 92       	push	r10
     f50:	bf 92       	push	r11
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	f8 94       	cli
     f64:	c2 2f       	mov	r28, r18
     f66:	d0 e0       	ldi	r29, 0x00	; 0
     f68:	cc 0f       	add	r28, r28
     f6a:	dd 1f       	adc	r29, r29
     f6c:	c5 57       	subi	r28, 0x75	; 117
     f6e:	da 4f       	sbci	r29, 0xFA	; 250
     f70:	e8 81       	ld	r30, Y
     f72:	f9 81       	ldd	r31, Y+1	; 0x01
     f74:	ef 2b       	or	r30, r31
     f76:	09 f0       	breq	.+2      	; 0xf7a <OSTaskCreate+0x2e>
     f78:	3b c0       	rjmp	.+118    	; 0xff0 <OSTaskCreate+0xa4>
     f7a:	92 2e       	mov	r9, r18
     f7c:	21 e0       	ldi	r18, 0x01	; 1
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	39 83       	std	Y+1, r19	; 0x01
     f82:	28 83       	st	Y, r18
     f84:	78 94       	sei
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	0e 94 88 05 	call	0xb10	; 0xb10 <OSTaskStkInit>
     f8e:	b1 2c       	mov	r11, r1
     f90:	a1 2c       	mov	r10, r1
     f92:	d1 2c       	mov	r13, r1
     f94:	c1 2c       	mov	r12, r1
     f96:	e1 2c       	mov	r14, r1
     f98:	f1 2c       	mov	r15, r1
     f9a:	87 01       	movw	r16, r14
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	bc 01       	movw	r22, r24
     fa6:	89 2d       	mov	r24, r9
     fa8:	0e 94 44 07 	call	0xe88	; 0xe88 <OS_TCBInit>
     fac:	18 2f       	mov	r17, r24
     fae:	81 11       	cpse	r24, r1
     fb0:	1a c0       	rjmp	.+52     	; 0xfe6 <OSTaskCreate+0x9a>
     fb2:	f8 94       	cli
     fb4:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSTaskCtr>
     fb8:	8f 5f       	subi	r24, 0xFF	; 255
     fba:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <OSTaskCtr>
     fbe:	78 94       	sei
     fc0:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <OSRunning>
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	11 f4       	brne	.+4      	; 0xfcc <OSTaskCreate+0x80>
     fc8:	0e 94 c3 06 	call	0xd86	; 0xd86 <OS_Sched>
     fcc:	81 2f       	mov	r24, r17
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	ff 90       	pop	r15
     fd8:	ef 90       	pop	r14
     fda:	df 90       	pop	r13
     fdc:	cf 90       	pop	r12
     fde:	bf 90       	pop	r11
     fe0:	af 90       	pop	r10
     fe2:	9f 90       	pop	r9
     fe4:	08 95       	ret
     fe6:	f8 94       	cli
     fe8:	19 82       	std	Y+1, r1	; 0x01
     fea:	18 82       	st	Y, r1
     fec:	78 94       	sei
     fee:	ee cf       	rjmp	.-36     	; 0xfcc <OSTaskCreate+0x80>
     ff0:	78 94       	sei
     ff2:	18 e2       	ldi	r17, 0x28	; 40
     ff4:	eb cf       	rjmp	.-42     	; 0xfcc <OSTaskCreate+0x80>

00000ff6 <OSInit>:
     ff6:	0e 94 d7 05 	call	0xbae	; 0xbae <OSInitHookBegin>
     ffa:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <OSIntNesting>
     ffe:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <OSLockNesting>
    1002:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <OSTaskCtr>
    1006:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <OSRunning>
    100a:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <OSCtxSwCtr>
    100e:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <OSCtxSwCtr+0x1>
    1012:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <OSCtxSwCtr+0x2>
    1016:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <OSCtxSwCtr+0x3>
    101a:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <OSIdleCtr>
    101e:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <OSIdleCtr+0x1>
    1022:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <OSIdleCtr+0x2>
    1026:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <OSIdleCtr+0x3>
    102a:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <OSRdyGrp>
    102e:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <OSRdyTbl>
    1032:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <OSRdyTbl+0x1>
    1036:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <OSRdyTbl+0x2>
    103a:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <OSPrioCur>
    103e:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <OSPrioHighRdy>
    1042:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <OSTCBHighRdy+0x1>
    1046:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <OSTCBHighRdy>
    104a:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <OSTCBCur+0x1>
    104e:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <OSTCBCur>
    1052:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <OSTCBList+0x1>
    1056:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <OSTCBList>
    105a:	eb e8       	ldi	r30, 0x8B	; 139
    105c:	f5 e0       	ldi	r31, 0x05	; 5
    105e:	11 92       	st	Z+, r1
    1060:	11 92       	st	Z+, r1
    1062:	85 e0       	ldi	r24, 0x05	; 5
    1064:	ed 3a       	cpi	r30, 0xAD	; 173
    1066:	f8 07       	cpc	r31, r24
    1068:	d1 f7       	brne	.-12     	; 0x105e <OSInit+0x68>
    106a:	ec e8       	ldi	r30, 0x8C	; 140
    106c:	f4 e0       	ldi	r31, 0x04	; 4
    106e:	cf 01       	movw	r24, r30
    1070:	0f 96       	adiw	r24, 0x0f	; 15
    1072:	93 83       	std	Z+3, r25	; 0x03
    1074:	82 83       	std	Z+2, r24	; 0x02
    1076:	fc 01       	movw	r30, r24
    1078:	85 e0       	ldi	r24, 0x05	; 5
    107a:	ec 37       	cpi	r30, 0x7C	; 124
    107c:	f8 07       	cpc	r31, r24
    107e:	b9 f7       	brne	.-18     	; 0x106e <OSInit+0x78>
    1080:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <OSTCBTbl+0xf3>
    1084:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <OSTCBTbl+0xf2>
    1088:	8c e8       	ldi	r24, 0x8C	; 140
    108a:	94 e0       	ldi	r25, 0x04	; 4
    108c:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <OSTCBFreeList+0x1>
    1090:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <OSTCBFreeList>
    1094:	20 e1       	ldi	r18, 0x10	; 16
    1096:	4b e8       	ldi	r20, 0x8B	; 139
    1098:	54 e0       	ldi	r21, 0x04	; 4
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	8b ed       	ldi	r24, 0xDB	; 219
    10a0:	95 e0       	ldi	r25, 0x05	; 5
    10a2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <OSTaskCreate>
    10a6:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <OSInitHookEnd>

000010aa <OSTaskDel>:
    10aa:	ff 92       	push	r15
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	f0 90 49 04 	lds	r15, 0x0449	; 0x800449 <OSIntNesting>
    10b8:	f1 10       	cpse	r15, r1
    10ba:	76 c0       	rjmp	.+236    	; 0x11a8 <OSTaskDel+0xfe>
    10bc:	f8 94       	cli
    10be:	8f 3f       	cpi	r24, 0xFF	; 255
    10c0:	29 f4       	brne	.+10     	; 0x10cc <OSTaskDel+0x22>
    10c2:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <OSTCBCur>
    10c6:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <OSTCBCur+0x1>
    10ca:	81 85       	ldd	r24, Z+9	; 0x09
    10cc:	08 2f       	mov	r16, r24
    10ce:	10 e0       	ldi	r17, 0x00	; 0
    10d0:	00 0f       	add	r16, r16
    10d2:	11 1f       	adc	r17, r17
    10d4:	f8 01       	movw	r30, r16
    10d6:	e5 57       	subi	r30, 0x75	; 117
    10d8:	fa 4f       	sbci	r31, 0xFA	; 250
    10da:	c0 81       	ld	r28, Z
    10dc:	d1 81       	ldd	r29, Z+1	; 0x01
    10de:	20 97       	sbiw	r28, 0x00	; 0
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <OSTaskDel+0x3a>
    10e2:	5e c0       	rjmp	.+188    	; 0x11a0 <OSTaskDel+0xf6>
    10e4:	eb 85       	ldd	r30, Y+11	; 0x0b
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ea:	80 95       	com	r24
    10ec:	eb 5b       	subi	r30, 0xBB	; 187
    10ee:	fb 4f       	sbci	r31, 0xFB	; 251
    10f0:	90 81       	ld	r25, Z
    10f2:	89 23       	and	r24, r25
    10f4:	80 83       	st	Z, r24
    10f6:	81 11       	cpse	r24, r1
    10f8:	08 c0       	rjmp	.+16     	; 0x110a <OSTaskDel+0x60>
    10fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    10fc:	98 2f       	mov	r25, r24
    10fe:	90 95       	com	r25
    1100:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <OSRdyGrp>
    1104:	89 23       	and	r24, r25
    1106:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <OSRdyGrp>
    110a:	1f 82       	std	Y+7, r1	; 0x07
    110c:	1e 82       	std	Y+6, r1	; 0x06
    110e:	18 86       	std	Y+8, r1	; 0x08
    1110:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <OSLockNesting>
    1114:	8f 3f       	cpi	r24, 0xFF	; 255
    1116:	19 f0       	breq	.+6      	; 0x111e <OSTaskDel+0x74>
    1118:	8f 5f       	subi	r24, 0xFF	; 255
    111a:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <OSLockNesting>
    111e:	78 94       	sei
    1120:	f8 94       	cli
    1122:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <OSLockNesting>
    1126:	88 23       	and	r24, r24
    1128:	19 f0       	breq	.+6      	; 0x1130 <OSTaskDel+0x86>
    112a:	81 50       	subi	r24, 0x01	; 1
    112c:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <OSLockNesting>
    1130:	ce 01       	movw	r24, r28
    1132:	0e 94 d3 05 	call	0xba6	; 0xba6 <OSTaskDelHook>
    1136:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSTaskCtr>
    113a:	81 50       	subi	r24, 0x01	; 1
    113c:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <OSTaskCtr>
    1140:	f8 01       	movw	r30, r16
    1142:	e5 57       	subi	r30, 0x75	; 117
    1144:	fa 4f       	sbci	r31, 0xFA	; 250
    1146:	11 82       	std	Z+1, r1	; 0x01
    1148:	10 82       	st	Z, r1
    114a:	ec 81       	ldd	r30, Y+4	; 0x04
    114c:	fd 81       	ldd	r31, Y+5	; 0x05
    114e:	aa 81       	ldd	r26, Y+2	; 0x02
    1150:	bb 81       	ldd	r27, Y+3	; 0x03
    1152:	30 97       	sbiw	r30, 0x00	; 0
    1154:	e1 f4       	brne	.+56     	; 0x118e <OSTaskDel+0xe4>
    1156:	15 96       	adiw	r26, 0x05	; 5
    1158:	1c 92       	st	X, r1
    115a:	1e 92       	st	-X, r1
    115c:	14 97       	sbiw	r26, 0x04	; 4
    115e:	b0 93 3a 04 	sts	0x043A, r27	; 0x80043a <OSTCBList+0x1>
    1162:	a0 93 39 04 	sts	0x0439, r26	; 0x800439 <OSTCBList>
    1166:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <OSTCBFreeList>
    116a:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <OSTCBFreeList+0x1>
    116e:	9b 83       	std	Y+3, r25	; 0x03
    1170:	8a 83       	std	Y+2, r24	; 0x02
    1172:	d0 93 40 04 	sts	0x0440, r29	; 0x800440 <OSTCBFreeList+0x1>
    1176:	c0 93 3f 04 	sts	0x043F, r28	; 0x80043f <OSTCBFreeList>
    117a:	78 94       	sei
    117c:	0e 94 c3 06 	call	0xd86	; 0xd86 <OS_Sched>
    1180:	8f 2d       	mov	r24, r15
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	ff 90       	pop	r15
    118c:	08 95       	ret
    118e:	b3 83       	std	Z+3, r27	; 0x03
    1190:	a2 83       	std	Z+2, r26	; 0x02
    1192:	aa 81       	ldd	r26, Y+2	; 0x02
    1194:	bb 81       	ldd	r27, Y+3	; 0x03
    1196:	15 96       	adiw	r26, 0x05	; 5
    1198:	fc 93       	st	X, r31
    119a:	ee 93       	st	-X, r30
    119c:	14 97       	sbiw	r26, 0x04	; 4
    119e:	e3 cf       	rjmp	.-58     	; 0x1166 <OSTaskDel+0xbc>
    11a0:	78 94       	sei
    11a2:	9c e3       	ldi	r25, 0x3C	; 60
    11a4:	f9 2e       	mov	r15, r25
    11a6:	ec cf       	rjmp	.-40     	; 0x1180 <OSTaskDel+0xd6>
    11a8:	8f e3       	ldi	r24, 0x3F	; 63
    11aa:	f8 2e       	mov	r15, r24
    11ac:	e9 cf       	rjmp	.-46     	; 0x1180 <OSTaskDel+0xd6>

000011ae <OSTaskDelReq>:
    11ae:	8f 3f       	cpi	r24, 0xFF	; 255
    11b0:	41 f4       	brne	.+16     	; 0x11c2 <OSTaskDelReq+0x14>
    11b2:	f8 94       	cli
    11b4:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <OSTCBCur>
    11b8:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <OSTCBCur+0x1>
    11bc:	86 85       	ldd	r24, Z+14	; 0x0e
    11be:	78 94       	sei
    11c0:	08 95       	ret
    11c2:	f8 94       	cli
    11c4:	e8 2f       	mov	r30, r24
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	ee 0f       	add	r30, r30
    11ca:	ff 1f       	adc	r31, r31
    11cc:	e5 57       	subi	r30, 0x75	; 117
    11ce:	fa 4f       	sbci	r31, 0xFA	; 250
    11d0:	01 90       	ld	r0, Z+
    11d2:	f0 81       	ld	r31, Z
    11d4:	e0 2d       	mov	r30, r0
    11d6:	8b e0       	ldi	r24, 0x0B	; 11
    11d8:	30 97       	sbiw	r30, 0x00	; 0
    11da:	89 f3       	breq	.-30     	; 0x11be <OSTaskDelReq+0x10>
    11dc:	8e e3       	ldi	r24, 0x3E	; 62
    11de:	86 87       	std	Z+14, r24	; 0x0e
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	ed cf       	rjmp	.-38     	; 0x11be <OSTaskDelReq+0x10>

000011e4 <OSTimeDly>:
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	11 f0       	breq	.+4      	; 0x11ec <OSTimeDly+0x8>
    11e8:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <OSTimeDly.part.0>
    11ec:	08 95       	ret

000011ee <OSTimeDlyHMSM>:
    11ee:	cf 92       	push	r12
    11f0:	df 92       	push	r13
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	81 11       	cpse	r24, r1
    11f8:	0d c0       	rjmp	.+26     	; 0x1214 <OSTimeDlyHMSM+0x26>
    11fa:	61 11       	cpse	r22, r1
    11fc:	0b c0       	rjmp	.+22     	; 0x1214 <OSTimeDlyHMSM+0x26>
    11fe:	41 11       	cpse	r20, r1
    1200:	0c c0       	rjmp	.+24     	; 0x121a <OSTimeDlyHMSM+0x2c>
    1202:	21 15       	cp	r18, r1
    1204:	31 05       	cpc	r19, r1
    1206:	61 f4       	brne	.+24     	; 0x1220 <OSTimeDlyHMSM+0x32>
    1208:	84 e5       	ldi	r24, 0x54	; 84
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	df 90       	pop	r13
    1210:	cf 90       	pop	r12
    1212:	08 95       	ret
    1214:	6c 33       	cpi	r22, 0x3C	; 60
    1216:	08 f0       	brcs	.+2      	; 0x121a <OSTimeDlyHMSM+0x2c>
    1218:	4f c0       	rjmp	.+158    	; 0x12b8 <OSTimeDlyHMSM+0xca>
    121a:	4c 33       	cpi	r20, 0x3C	; 60
    121c:	08 f0       	brcs	.+2      	; 0x1220 <OSTimeDlyHMSM+0x32>
    121e:	4e c0       	rjmp	.+156    	; 0x12bc <OSTimeDlyHMSM+0xce>
    1220:	28 3e       	cpi	r18, 0xE8	; 232
    1222:	93 e0       	ldi	r25, 0x03	; 3
    1224:	39 07       	cpc	r19, r25
    1226:	08 f0       	brcs	.+2      	; 0x122a <OSTimeDlyHMSM+0x3c>
    1228:	4b c0       	rjmp	.+150    	; 0x12c0 <OSTimeDlyHMSM+0xd2>
    122a:	f9 01       	movw	r30, r18
    122c:	58 2f       	mov	r21, r24
    122e:	26 2f       	mov	r18, r22
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	ac e3       	ldi	r26, 0x3C	; 60
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__umulhisi3>
    123a:	6b 01       	movw	r12, r22
    123c:	7c 01       	movw	r14, r24
    123e:	c4 0e       	add	r12, r20
    1240:	d1 1c       	adc	r13, r1
    1242:	e1 1c       	adc	r14, r1
    1244:	f1 1c       	adc	r15, r1
    1246:	25 2f       	mov	r18, r21
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	a0 e1       	ldi	r26, 0x10	; 16
    124c:	be e0       	ldi	r27, 0x0E	; 14
    124e:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__umulhisi3>
    1252:	a7 01       	movw	r20, r14
    1254:	96 01       	movw	r18, r12
    1256:	26 0f       	add	r18, r22
    1258:	37 1f       	adc	r19, r23
    125a:	48 1f       	adc	r20, r24
    125c:	59 1f       	adc	r21, r25
    125e:	a4 e6       	ldi	r26, 0x64	; 100
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__muluhisi3>
    1266:	6b 01       	movw	r12, r22
    1268:	7c 01       	movw	r14, r24
    126a:	9f 01       	movw	r18, r30
    126c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__umulhisi3>
    1270:	6c 50       	subi	r22, 0x0C	; 12
    1272:	7e 4f       	sbci	r23, 0xFE	; 254
    1274:	8f 4f       	sbci	r24, 0xFF	; 255
    1276:	9f 4f       	sbci	r25, 0xFF	; 255
    1278:	28 ee       	ldi	r18, 0xE8	; 232
    127a:	33 e0       	ldi	r19, 0x03	; 3
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	0e 94 b2 09 	call	0x1364	; 0x1364 <__udivmodsi4>
    1284:	d7 01       	movw	r26, r14
    1286:	c6 01       	movw	r24, r12
    1288:	82 0f       	add	r24, r18
    128a:	93 1f       	adc	r25, r19
    128c:	a4 1f       	adc	r26, r20
    128e:	b5 1f       	adc	r27, r21
    1290:	7d 01       	movw	r14, r26
    1292:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <OSTimeDly>
    1296:	e1 14       	cp	r14, r1
    1298:	f1 04       	cpc	r15, r1
    129a:	11 f4       	brne	.+4      	; 0x12a0 <OSTimeDlyHMSM+0xb2>
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	b5 cf       	rjmp	.-150    	; 0x120a <OSTimeDlyHMSM+0x1c>
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	90 e8       	ldi	r25, 0x80	; 128
    12a4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <OSTimeDly.part.0>
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	90 e8       	ldi	r25, 0x80	; 128
    12ac:	0e 94 1e 07 	call	0xe3c	; 0xe3c <OSTimeDly.part.0>
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	e8 1a       	sub	r14, r24
    12b4:	f1 08       	sbc	r15, r1
    12b6:	ef cf       	rjmp	.-34     	; 0x1296 <OSTimeDlyHMSM+0xa8>
    12b8:	81 e5       	ldi	r24, 0x51	; 81
    12ba:	a7 cf       	rjmp	.-178    	; 0x120a <OSTimeDlyHMSM+0x1c>
    12bc:	82 e5       	ldi	r24, 0x52	; 82
    12be:	a5 cf       	rjmp	.-182    	; 0x120a <OSTimeDlyHMSM+0x1c>
    12c0:	83 e5       	ldi	r24, 0x53	; 83
    12c2:	a3 cf       	rjmp	.-186    	; 0x120a <OSTimeDlyHMSM+0x1c>

000012c4 <main>:

}

int main( void )
{
 robo_Setup(); /* initialize HAL for RoboKar */
    12c4:	0e 94 ad 03 	call	0x75a	; 0x75a <robo_Setup>
 OSInit(); /* initialize UCOS-II kernel */
    12c8:	0e 94 fb 07 	call	0xff6	; 0xff6 <OSInit>

 robo_motorSpeed(STOP_SPEED, STOP_SPEED); /* Stop the robot, value STOP_SPEED == 0 */
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <robo_motorSpeed>
 myrobot.rspeed = STOP_SPEED; /* Initialize myrobot states */
    12d8:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <myrobot+0x1>
    12dc:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <myrobot>
 myrobot.lspeed = STOP_SPEED;
    12e0:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <myrobot+0x3>
    12e4:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <myrobot+0x2>
 myrobot.obstacle = 0; /* No collision */
    12e8:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <myrobot+0x4>
 count =0;
    12ec:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <count+0x1>
    12f0:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <count>
 OSTaskCreate(TaskStart, /* create TaskStart Task */
    12f4:	21 e0       	ldi	r18, 0x01	; 1
    12f6:	48 ea       	ldi	r20, 0xA8	; 168
    12f8:	53 e0       	ldi	r21, 0x03	; 3
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	89 ed       	ldi	r24, 0xD9	; 217
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	0e 94 a6 07 	call	0xf4c	; 0xf4c <OSTaskCreate>
 (void *)0,
 (void *)&TaskStartStk[TASK_STK_SZ - 1],
 TASK_START_PRIO);
 robo_Honk(); robo_wait4goPress(); /* Wait for to GO */
    1306:	0e 94 73 03 	call	0x6e6	; 0x6e6 <robo_Honk>
    130a:	0e 94 99 03 	call	0x732	; 0x732 <robo_wait4goPress>
 OSStart(); /* Start multitasking */
    130e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <OSStart>
    1312:	ff cf       	rjmp	.-2      	; 0x1312 <main+0x4e>

00001314 <__udivmodhi4>:
    1314:	aa 1b       	sub	r26, r26
    1316:	bb 1b       	sub	r27, r27
    1318:	51 e1       	ldi	r21, 0x11	; 17
    131a:	07 c0       	rjmp	.+14     	; 0x132a <__udivmodhi4_ep>

0000131c <__udivmodhi4_loop>:
    131c:	aa 1f       	adc	r26, r26
    131e:	bb 1f       	adc	r27, r27
    1320:	a6 17       	cp	r26, r22
    1322:	b7 07       	cpc	r27, r23
    1324:	10 f0       	brcs	.+4      	; 0x132a <__udivmodhi4_ep>
    1326:	a6 1b       	sub	r26, r22
    1328:	b7 0b       	sbc	r27, r23

0000132a <__udivmodhi4_ep>:
    132a:	88 1f       	adc	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	5a 95       	dec	r21
    1330:	a9 f7       	brne	.-22     	; 0x131c <__udivmodhi4_loop>
    1332:	80 95       	com	r24
    1334:	90 95       	com	r25
    1336:	bc 01       	movw	r22, r24
    1338:	cd 01       	movw	r24, r26
    133a:	08 95       	ret

0000133c <__divmodhi4>:
    133c:	97 fb       	bst	r25, 7
    133e:	07 2e       	mov	r0, r23
    1340:	16 f4       	brtc	.+4      	; 0x1346 <__divmodhi4+0xa>
    1342:	00 94       	com	r0
    1344:	07 d0       	rcall	.+14     	; 0x1354 <__divmodhi4_neg1>
    1346:	77 fd       	sbrc	r23, 7
    1348:	09 d0       	rcall	.+18     	; 0x135c <__divmodhi4_neg2>
    134a:	0e 94 8a 09 	call	0x1314	; 0x1314 <__udivmodhi4>
    134e:	07 fc       	sbrc	r0, 7
    1350:	05 d0       	rcall	.+10     	; 0x135c <__divmodhi4_neg2>
    1352:	3e f4       	brtc	.+14     	; 0x1362 <__divmodhi4_exit>

00001354 <__divmodhi4_neg1>:
    1354:	90 95       	com	r25
    1356:	81 95       	neg	r24
    1358:	9f 4f       	sbci	r25, 0xFF	; 255
    135a:	08 95       	ret

0000135c <__divmodhi4_neg2>:
    135c:	70 95       	com	r23
    135e:	61 95       	neg	r22
    1360:	7f 4f       	sbci	r23, 0xFF	; 255

00001362 <__divmodhi4_exit>:
    1362:	08 95       	ret

00001364 <__udivmodsi4>:
    1364:	a1 e2       	ldi	r26, 0x21	; 33
    1366:	1a 2e       	mov	r1, r26
    1368:	aa 1b       	sub	r26, r26
    136a:	bb 1b       	sub	r27, r27
    136c:	fd 01       	movw	r30, r26
    136e:	0d c0       	rjmp	.+26     	; 0x138a <__udivmodsi4_ep>

00001370 <__udivmodsi4_loop>:
    1370:	aa 1f       	adc	r26, r26
    1372:	bb 1f       	adc	r27, r27
    1374:	ee 1f       	adc	r30, r30
    1376:	ff 1f       	adc	r31, r31
    1378:	a2 17       	cp	r26, r18
    137a:	b3 07       	cpc	r27, r19
    137c:	e4 07       	cpc	r30, r20
    137e:	f5 07       	cpc	r31, r21
    1380:	20 f0       	brcs	.+8      	; 0x138a <__udivmodsi4_ep>
    1382:	a2 1b       	sub	r26, r18
    1384:	b3 0b       	sbc	r27, r19
    1386:	e4 0b       	sbc	r30, r20
    1388:	f5 0b       	sbc	r31, r21

0000138a <__udivmodsi4_ep>:
    138a:	66 1f       	adc	r22, r22
    138c:	77 1f       	adc	r23, r23
    138e:	88 1f       	adc	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	1a 94       	dec	r1
    1394:	69 f7       	brne	.-38     	; 0x1370 <__udivmodsi4_loop>
    1396:	60 95       	com	r22
    1398:	70 95       	com	r23
    139a:	80 95       	com	r24
    139c:	90 95       	com	r25
    139e:	9b 01       	movw	r18, r22
    13a0:	ac 01       	movw	r20, r24
    13a2:	bd 01       	movw	r22, r26
    13a4:	cf 01       	movw	r24, r30
    13a6:	08 95       	ret

000013a8 <__tablejump2__>:
    13a8:	ee 0f       	add	r30, r30
    13aa:	ff 1f       	adc	r31, r31
    13ac:	05 90       	lpm	r0, Z+
    13ae:	f4 91       	lpm	r31, Z
    13b0:	e0 2d       	mov	r30, r0
    13b2:	09 94       	ijmp

000013b4 <__umulhisi3>:
    13b4:	a2 9f       	mul	r26, r18
    13b6:	b0 01       	movw	r22, r0
    13b8:	b3 9f       	mul	r27, r19
    13ba:	c0 01       	movw	r24, r0
    13bc:	a3 9f       	mul	r26, r19
    13be:	70 0d       	add	r23, r0
    13c0:	81 1d       	adc	r24, r1
    13c2:	11 24       	eor	r1, r1
    13c4:	91 1d       	adc	r25, r1
    13c6:	b2 9f       	mul	r27, r18
    13c8:	70 0d       	add	r23, r0
    13ca:	81 1d       	adc	r24, r1
    13cc:	11 24       	eor	r1, r1
    13ce:	91 1d       	adc	r25, r1
    13d0:	08 95       	ret

000013d2 <__muluhisi3>:
    13d2:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__umulhisi3>
    13d6:	a5 9f       	mul	r26, r21
    13d8:	90 0d       	add	r25, r0
    13da:	b4 9f       	mul	r27, r20
    13dc:	90 0d       	add	r25, r0
    13de:	a4 9f       	mul	r26, r20
    13e0:	80 0d       	add	r24, r0
    13e2:	91 1d       	adc	r25, r1
    13e4:	11 24       	eor	r1, r1
    13e6:	08 95       	ret

000013e8 <_exit>:
    13e8:	f8 94       	cli

000013ea <__stop_program>:
    13ea:	ff cf       	rjmp	.-2      	; 0x13ea <__stop_program>
