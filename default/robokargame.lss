
robokargame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  000012be  00001352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000038b  0080021a  0080021a  0000146c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000014c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014e5  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083e  00000000  00000000  00002aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a95  00000000  00000000  0000332b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00003dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063b  00000000  00000000  00003e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e8  00000000  00000000  0000446f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00004557  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 98 04 	jmp	0x930	; 0x930 <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee eb       	ldi	r30, 0xBE	; 190
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 3a       	cpi	r26, 0xA5	; 165
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <main>
      9e:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CheckCollision>:
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ){ /* obstacle? */
     myrobot.obstacle = 1; /* signal obstacle present */
      a6:	c1 e0       	ldi	r28, 0x01	; 1
/*------High pririority task----------*/
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ){ /* obstacle? */
      a8:	0e 94 9a 02 	call	0x534	; 0x534 <robo_proxSensor>
      ac:	01 97       	sbiw	r24, 0x01	; 1
      ae:	51 f4       	brne	.+20     	; 0xc4 <CheckCollision+0x1e>
     myrobot.obstacle = 1; /* signal obstacle present */
      b0:	c0 93 9e 02 	sts	0x029E, r28	; 0x80029e <myrobot+0x4>
 }else
     myrobot.obstacle = 0; /* signal no obstacle */

 OSTimeDlyHMSM(0, 0, 0, 100); /* Task period ~ 100 ms */
      b4:	24 e6       	ldi	r18, 0x64	; 100
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	40 e0       	ldi	r20, 0x00	; 0
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 66 08 	call	0x10cc	; 0x10cc <OSTimeDlyHMSM>
/*------High pririority task----------*/
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ){ /* obstacle? */
      c2:	f2 cf       	rjmp	.-28     	; 0xa8 <CheckCollision+0x2>
     myrobot.obstacle = 1; /* signal obstacle present */
 }else
     myrobot.obstacle = 0; /* signal no obstacle */
      c4:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <myrobot+0x4>
      c8:	f5 cf       	rjmp	.-22     	; 0xb4 <CheckCollision+0xe>

000000ca <CntrlMotors>:

 for(;;)
 {
  speed_r = myrobot.rspeed;
  speed_l = myrobot.lspeed;
  robo_motorSpeed(speed_l, speed_r);
      ca:	60 91 9a 02 	lds	r22, 0x029A	; 0x80029a <myrobot>
      ce:	70 91 9b 02 	lds	r23, 0x029B	; 0x80029b <myrobot+0x1>
      d2:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <myrobot+0x2>
      d6:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <myrobot+0x3>
      da:	0e 94 3f 02 	call	0x47e	; 0x47e <robo_motorSpeed>
  OSTimeDlyHMSM(0, 0, 0, 10); /* Task period ~ 250 ms */
      de:	2a e0       	ldi	r18, 0x0A	; 10
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 66 08 	call	0x10cc	; 0x10cc <OSTimeDlyHMSM>
      ec:	ee cf       	rjmp	.-36     	; 0xca <CntrlMotors>

000000ee <Navig>:
  

	// for light sensor
	  if (robo_lightSensor() > 80) /* it is too bright, I'm photophobia */
	  {
	   myrobot.rspeed = 70; /* turn left */
      ee:	06 e4       	ldi	r16, 0x46	; 70
      f0:	10 e0       	ldi	r17, 0x00	; 0
		myrobot.rspeed = 80; 
	   	myrobot.lspeed = 60; /* bias left */
		seven=0;
	  }else{
	  robo_LED_on(); 
		myrobot.rspeed = 60; 
      f2:	8c e3       	ldi	r24, 0x3C	; 60
      f4:	c8 2e       	mov	r12, r24
      f6:	d1 2c       	mov	r13, r1
	   	myrobot.lspeed = 80; /* bias right */
      f8:	c0 e5       	ldi	r28, 0x50	; 80
      fa:	d0 e0       	ldi	r29, 0x00	; 0
			// count = 0;
		} else {
			myrobot.rspeed = -50; 
	    	myrobot.lspeed = -40;
		}*/
			myrobot.rspeed = -50; 
      fc:	9e ec       	ldi	r25, 0xCE	; 206
      fe:	e9 2e       	mov	r14, r25
     100:	ff 24       	eor	r15, r15
     102:	fa 94       	dec	r15
	    	myrobot.lspeed = -40;
     104:	28 ed       	ldi	r18, 0xD8	; 216
     106:	a2 2e       	mov	r10, r18
     108:	bb 24       	eor	r11, r11
     10a:	ba 94       	dec	r11
	   myrobot.lspeed = 80; /* turn right */

	  }else if (robo_lineSensor() == 6)
	  {

	    myrobot.rspeed = 65; 
     10c:	31 e4       	ldi	r19, 0x41	; 65
     10e:	23 2e       	mov	r2, r19
     110:	31 2c       	mov	r3, r1
	   myrobot.lspeed = -30; /* corner left */
     112:	42 ee       	ldi	r20, 0xE2	; 226
     114:	44 2e       	mov	r4, r20
     116:	55 24       	eor	r5, r5
     118:	5a 94       	dec	r5
 for (;;)
 {
  if (myrobot.obstacle == 1) /* If blocked then reverse */
  {
  	
   myrobot.rspeed = -20; /* REVERSE */
     11a:	5c ee       	ldi	r21, 0xEC	; 236
     11c:	65 2e       	mov	r6, r21
     11e:	77 24       	eor	r7, r7
     120:	7a 94       	dec	r7
	OSTimeDlyHMSM(0, 0, 0, 250);
   myrobot.rspeed = 70;
	myrobot.lspeed = 70;
	OSTimeDlyHMSM(0, 0, 1, 0);
   if(robo_lineSensor()==0){
       myrobot.rspeed = 35;
     122:	63 e2       	ldi	r22, 0x23	; 35
     124:	86 2e       	mov	r8, r22
     126:	91 2c       	mov	r9, r1
void Navig (void *data)
{

 for (;;)
 {
  if (myrobot.obstacle == 1) /* If blocked then reverse */
     128:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <myrobot+0x4>
     12c:	81 30       	cpi	r24, 0x01	; 1
     12e:	91 f5       	brne	.+100    	; 0x194 <Navig+0xa6>
  {
  	
   myrobot.rspeed = -20; /* REVERSE */
     130:	70 92 9b 02 	sts	0x029B, r7	; 0x80029b <myrobot+0x1>
     134:	60 92 9a 02 	sts	0x029A, r6	; 0x80029a <myrobot>
   myrobot.lspeed = 80;
     138:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <myrobot+0x3>
     13c:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <myrobot+0x2>
	OSTimeDlyHMSM(0, 0, 0, 250);
     140:	2a ef       	ldi	r18, 0xFA	; 250
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	40 e0       	ldi	r20, 0x00	; 0
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	0e 94 66 08 	call	0x10cc	; 0x10cc <OSTimeDlyHMSM>
   myrobot.rspeed = 70;
     14e:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     152:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
	myrobot.lspeed = 70;
     156:	10 93 9d 02 	sts	0x029D, r17	; 0x80029d <myrobot+0x3>
     15a:	00 93 9c 02 	sts	0x029C, r16	; 0x80029c <myrobot+0x2>
	OSTimeDlyHMSM(0, 0, 1, 0);
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	41 e0       	ldi	r20, 0x01	; 1
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	0e 94 66 08 	call	0x10cc	; 0x10cc <OSTimeDlyHMSM>
   if(robo_lineSensor()==0){
     16c:	0e 94 bd 02 	call	0x57a	; 0x57a <robo_lineSensor>
     170:	89 2b       	or	r24, r25
     172:	41 f4       	brne	.+16     	; 0x184 <Navig+0x96>
       myrobot.rspeed = 35;
     174:	90 92 9b 02 	sts	0x029B, r9	; 0x80029b <myrobot+0x1>
     178:	80 92 9a 02 	sts	0x029A, r8	; 0x80029a <myrobot>
	   myrobot.lspeed = 35;
     17c:	90 92 9d 02 	sts	0x029D, r9	; 0x80029d <myrobot+0x3>
     180:	80 92 9c 02 	sts	0x029C, r8	; 0x80029c <myrobot+0x2>
	  	
	  }
  }
  

	OSTimeDlyHMSM(0, 0, 0, 10);
     184:	2a e0       	ldi	r18, 0x0A	; 10
     186:	30 e0       	ldi	r19, 0x00	; 0
     188:	40 e0       	ldi	r20, 0x00	; 0
     18a:	60 e0       	ldi	r22, 0x00	; 0
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	0e 94 66 08 	call	0x10cc	; 0x10cc <OSTimeDlyHMSM>
void Navig (void *data)
{

 for (;;)
 {
  if (myrobot.obstacle == 1) /* If blocked then reverse */
     192:	ca cf       	rjmp	.-108    	; 0x128 <Navig+0x3a>
   if(robo_lineSensor()==0){
       myrobot.rspeed = 35;
	   myrobot.lspeed = 35;
   }
  }else{
  robo_LED_off();
     194:	28 98       	cbi	0x05, 0	; 5
  	  if (robo_lineSensor() == 2) /* go straight */
     196:	0e 94 bd 02 	call	0x57a	; 0x57a <robo_lineSensor>
     19a:	02 97       	sbiw	r24, 0x02	; 2
     19c:	69 f4       	brne	.+26     	; 0x1b8 <Navig+0xca>
	  {
	   count = 0;
     19e:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <count+0x1>
     1a2:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <count>
	   myrobot.rspeed = 70;
     1a6:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     1aa:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
	   myrobot.lspeed =  -50;
	  }else if (robo_lineSensor() == 1)
	  {

	    myrobot.rspeed = -50; 
	   myrobot.lspeed = 80; /* turn right */
     1ae:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <myrobot+0x3>
     1b2:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <myrobot+0x2>
     1b6:	10 c0       	rjmp	.+32     	; 0x1d8 <Navig+0xea>
  	  if (robo_lineSensor() == 2) /* go straight */
	  {
	   count = 0;
	   myrobot.rspeed = 70;
	   myrobot.lspeed = 80;
	  }else if (robo_lineSensor() == 4)
     1b8:	0e 94 bd 02 	call	0x57a	; 0x57a <robo_lineSensor>
     1bc:	04 97       	sbiw	r24, 0x04	; 4
     1be:	e1 f4       	brne	.+56     	; 0x1f8 <Navig+0x10a>
	  {
	   count = 0;
     1c0:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <count+0x1>
     1c4:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <count>
	    myrobot.rspeed = 80 ;/* turn left */
     1c8:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     1cc:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
	   myrobot.lspeed =  -50;
     1d0:	f0 92 9d 02 	sts	0x029D, r15	; 0x80029d <myrobot+0x3>
     1d4:	e0 92 9c 02 	sts	0x029C, r14	; 0x80029c <myrobot+0x2>
	  
	  }
  

	// for light sensor
	  if (robo_lightSensor() > 80) /* it is too bright, I'm photophobia */
     1d8:	0e 94 a6 02 	call	0x54c	; 0x54c <robo_lightSensor>
     1dc:	81 35       	cpi	r24, 0x51	; 81
     1de:	91 05       	cpc	r25, r1
     1e0:	8c f2       	brlt	.-94     	; 0x184 <Navig+0x96>
	  {
	   myrobot.rspeed = 70; /* turn left */
     1e2:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     1e6:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
	   myrobot.lspeed = 50;
     1ea:	82 e3       	ldi	r24, 0x32	; 50
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <myrobot+0x3>
     1f2:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <myrobot+0x2>
     1f6:	c6 cf       	rjmp	.-116    	; 0x184 <Navig+0x96>
	  }else if (robo_lineSensor() == 4)
	  {
	   count = 0;
	    myrobot.rspeed = 80 ;/* turn left */
	   myrobot.lspeed =  -50;
	  }else if (robo_lineSensor() == 1)
     1f8:	0e 94 bd 02 	call	0x57a	; 0x57a <robo_lineSensor>
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	29 f4       	brne	.+10     	; 0x20a <Navig+0x11c>
	  {

	    myrobot.rspeed = -50; 
     200:	f0 92 9b 02 	sts	0x029B, r15	; 0x80029b <myrobot+0x1>
     204:	e0 92 9a 02 	sts	0x029A, r14	; 0x80029a <myrobot>
     208:	d2 cf       	rjmp	.-92     	; 0x1ae <Navig+0xc0>
	   myrobot.lspeed = 80; /* turn right */

	  }else if (robo_lineSensor() == 6)
     20a:	0e 94 bd 02 	call	0x57a	; 0x57a <robo_lineSensor>
     20e:	06 97       	sbiw	r24, 0x06	; 6
     210:	49 f4       	brne	.+18     	; 0x224 <Navig+0x136>
	  {

	    myrobot.rspeed = 65; 
     212:	30 92 9b 02 	sts	0x029B, r3	; 0x80029b <myrobot+0x1>
     216:	20 92 9a 02 	sts	0x029A, r2	; 0x80029a <myrobot>
	   myrobot.lspeed = -30; /* corner left */
     21a:	50 92 9d 02 	sts	0x029D, r5	; 0x80029d <myrobot+0x3>
     21e:	40 92 9c 02 	sts	0x029C, r4	; 0x80029c <myrobot+0x2>
     222:	da cf       	rjmp	.-76     	; 0x1d8 <Navig+0xea>

	  }else if (robo_lineSensor() == 3)
     224:	0e 94 bd 02 	call	0x57a	; 0x57a <robo_lineSensor>
     228:	03 97       	sbiw	r24, 0x03	; 3
     22a:	49 f4       	brne	.+18     	; 0x23e <Navig+0x150>
	  {
	    count = 0;
     22c:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <count+0x1>
     230:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <count>
	    myrobot.rspeed = -40; 
     234:	b0 92 9b 02 	sts	0x029B, r11	; 0x80029b <myrobot+0x1>
     238:	a0 92 9a 02 	sts	0x029A, r10	; 0x80029a <myrobot>
     23c:	b8 cf       	rjmp	.-144    	; 0x1ae <Navig+0xc0>
	   myrobot.lspeed = 80; /* corner right */
	  }else if (robo_lineSensor() == 0)
     23e:	0e 94 bd 02 	call	0x57a	; 0x57a <robo_lineSensor>
     242:	89 2b       	or	r24, r25
     244:	49 f4       	brne	.+18     	; 0x258 <Navig+0x16a>
			// count = 0;
		} else {
			myrobot.rspeed = -50; 
	    	myrobot.lspeed = -40;
		}*/
			myrobot.rspeed = -50; 
     246:	f0 92 9b 02 	sts	0x029B, r15	; 0x80029b <myrobot+0x1>
     24a:	e0 92 9a 02 	sts	0x029A, r14	; 0x80029a <myrobot>
	    	myrobot.lspeed = -40;
     24e:	b0 92 9d 02 	sts	0x029D, r11	; 0x80029d <myrobot+0x3>
     252:	a0 92 9c 02 	sts	0x029C, r10	; 0x80029c <myrobot+0x2>
     256:	c0 cf       	rjmp	.-128    	; 0x1d8 <Navig+0xea>
		//OSTimeDlyHMSM(0, 0, 0, 20);

	  }else{
	  

	  if(seven){
     258:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     25c:	88 23       	and	r24, r24
     25e:	59 f0       	breq	.+22     	; 0x276 <Navig+0x188>
		myrobot.rspeed = 80; 
     260:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     264:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
	   	myrobot.lspeed = 60; /* bias left */
     268:	d0 92 9d 02 	sts	0x029D, r13	; 0x80029d <myrobot+0x3>
     26c:	c0 92 9c 02 	sts	0x029C, r12	; 0x80029c <myrobot+0x2>
		seven=0;
     270:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     274:	b1 cf       	rjmp	.-158    	; 0x1d8 <Navig+0xea>
	  }else{
	  robo_LED_on(); 
     276:	28 9a       	sbi	0x05, 0	; 5
		myrobot.rspeed = 60; 
     278:	d0 92 9b 02 	sts	0x029B, r13	; 0x80029b <myrobot+0x1>
     27c:	c0 92 9a 02 	sts	0x029A, r12	; 0x80029a <myrobot>
	   	myrobot.lspeed = 80; /* bias right */
     280:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <myrobot+0x3>
     284:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <myrobot+0x2>
		seven=1;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     28e:	a4 cf       	rjmp	.-184    	; 0x1d8 <Navig+0xea>

00000290 <TaskStart>:


/*------Highest pririority task----------*/
/* Create all other tasks here */
void TaskStart( void *data )
{
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	00 d0       	rcall	.+0      	; 0x296 <TaskStart+0x6>
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
 OS_ticks_init(); /* enable RTOS timer tick */
     29a:	0e 94 0d 03 	call	0x61a	; 0x61a <OS_ticks_init>
	int  counter;
 OSTaskCreate(CheckCollision , /* Task function */
     29e:	22 e0       	ldi	r18, 0x02	; 2
     2a0:	49 e9       	ldi	r20, 0x99	; 153
     2a2:	52 e0       	ldi	r21, 0x02	; 2
     2a4:	70 e0       	ldi	r23, 0x00	; 0
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	83 e5       	ldi	r24, 0x53	; 83
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 15 07 	call	0xe2a	; 0xe2a <OSTaskCreate>
 (void *)0, /* nothing passed to task */
 (void *)&ChkCollideStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_CHKCOLLIDE_PRIO); /* priority of task */

 OSTaskCreate(CntrlMotors , /* Task function */
     2b0:	23 e0       	ldi	r18, 0x03	; 3
     2b2:	4e e1       	ldi	r20, 0x1E	; 30
     2b4:	53 e0       	ldi	r21, 0x03	; 3
     2b6:	70 e0       	ldi	r23, 0x00	; 0
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	85 e6       	ldi	r24, 0x65	; 101
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 15 07 	call	0xe2a	; 0xe2a <OSTaskCreate>
 (void *)0, /* nothing passed to task */
 (void *)&CtrlmotorStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_CTRLMOTOR_PRIO); /* priority of task */

 OSTaskCreate(Navig, /* Task function */
     2c2:	24 e0       	ldi	r18, 0x04	; 4
     2c4:	40 e2       	ldi	r20, 0x20	; 32
     2c6:	54 e0       	ldi	r21, 0x04	; 4
     2c8:	be 01       	movw	r22, r28
     2ca:	6f 5f       	subi	r22, 0xFF	; 255
     2cc:	7f 4f       	sbci	r23, 0xFF	; 255
     2ce:	87 e7       	ldi	r24, 0x77	; 119
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 15 07 	call	0xe2a	; 0xe2a <OSTaskCreate>
 TASK_NAVIG_PRIO); /* priority of task */

 while(1)
 {
  OSTimeDlyHMSM(0, 0, 5, 0); /* Task period ~ 5 secs, argument position: HOURS, MINUTES, SECONDS, and MILLISECONDS S*/ 
  robo_LED_toggle(); /* Show that we are alive */
     2d6:	11 e0       	ldi	r17, 0x01	; 1
 (void *)&NavigStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_NAVIG_PRIO); /* priority of task */

 while(1)
 {
  OSTimeDlyHMSM(0, 0, 5, 0); /* Task period ~ 5 secs, argument position: HOURS, MINUTES, SECONDS, and MILLISECONDS S*/ 
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	45 e0       	ldi	r20, 0x05	; 5
     2de:	60 e0       	ldi	r22, 0x00	; 0
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	0e 94 66 08 	call	0x10cc	; 0x10cc <OSTimeDlyHMSM>
  robo_LED_toggle(); /* Show that we are alive */
     2e6:	85 b1       	in	r24, 0x05	; 5
     2e8:	81 27       	eor	r24, r17
     2ea:	85 b9       	out	0x05, r24	; 5
     2ec:	f5 cf       	rjmp	.-22     	; 0x2d8 <TaskStart+0x48>

000002ee <ADC_init>:
     2ee:	80 e4       	ldi	r24, 0x40	; 64
     2f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     2f4:	86 e8       	ldi	r24, 0x86	; 134
     2f6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     2fa:	08 95       	ret

000002fc <ADC_read>:
     2fc:	f8 94       	cli
     2fe:	80 64       	ori	r24, 0x40	; 64
     300:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     304:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     308:	80 64       	ori	r24, 0x40	; 64
     30a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     30e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     312:	84 ff       	sbrs	r24, 4
     314:	fc cf       	rjmp	.-8      	; 0x30e <ADC_read+0x12>
     316:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     31a:	80 61       	ori	r24, 0x10	; 16
     31c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     320:	78 94       	sei
     322:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     326:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     32a:	93 70       	andi	r25, 0x03	; 3
     32c:	08 95       	ret

0000032e <PWM8_write>:
     32e:	81 11       	cpse	r24, r1
     330:	05 c0       	rjmp	.+10     	; 0x33c <PWM8_write+0xe>
     332:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     336:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     33a:	08 95       	ret
     33c:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     340:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     344:	08 95       	ret

00000346 <motor_init>:
     346:	8a b1       	in	r24, 0x0a	; 10
     348:	80 6f       	ori	r24, 0xF0	; 240
     34a:	8a b9       	out	0x0a, r24	; 10
     34c:	8b b1       	in	r24, 0x0b	; 11
     34e:	8f 70       	andi	r24, 0x0F	; 15
     350:	8b b9       	out	0x0b, r24	; 11
     352:	81 ea       	ldi	r24, 0xA1	; 161
     354:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     358:	83 e0       	ldi	r24, 0x03	; 3
     35a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     35e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     362:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     366:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     36a:	a8 e8       	ldi	r26, 0x88	; 136
     36c:	b0 e0       	ldi	r27, 0x00	; 0
     36e:	1c 92       	st	X, r1
     370:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     374:	ea e8       	ldi	r30, 0x8A	; 138
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	10 82       	st	Z, r1
     37a:	84 b1       	in	r24, 0x04	; 4
     37c:	86 60       	ori	r24, 0x06	; 6
     37e:	84 b9       	out	0x04, r24	; 4
     380:	11 96       	adiw	r26, 0x01	; 1
     382:	1c 92       	st	X, r1
     384:	1e 92       	st	-X, r1
     386:	11 82       	std	Z+1, r1	; 0x01
     388:	10 82       	st	Z, r1
     38a:	08 95       	ret

0000038c <motor_set_speed>:
     38c:	77 ff       	sbrs	r23, 7
     38e:	02 c0       	rjmp	.+4      	; 0x394 <motor_set_speed+0x8>
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	65 36       	cpi	r22, 0x65	; 101
     396:	71 05       	cpc	r23, r1
     398:	14 f0       	brlt	.+4      	; 0x39e <motor_set_speed+0x12>
     39a:	64 e6       	ldi	r22, 0x64	; 100
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	9b 01       	movw	r18, r22
     3a0:	22 0f       	add	r18, r18
     3a2:	33 1f       	adc	r19, r19
     3a4:	75 95       	asr	r23
     3a6:	67 95       	ror	r22
     3a8:	62 0f       	add	r22, r18
     3aa:	73 1f       	adc	r23, r19
     3ac:	81 11       	cpse	r24, r1
     3ae:	09 c0       	rjmp	.+18     	; 0x3c2 <motor_set_speed+0x36>
     3b0:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     3b4:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     3b8:	70 93 22 04 	sts	0x0422, r23	; 0x800422 <rightWst+0x1>
     3bc:	60 93 21 04 	sts	0x0421, r22	; 0x800421 <rightWst>
     3c0:	08 95       	ret
     3c2:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     3c6:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     3ca:	70 93 26 04 	sts	0x0426, r23	; 0x800426 <leftWst+0x1>
     3ce:	60 93 25 04 	sts	0x0425, r22	; 0x800425 <leftWst>
     3d2:	08 95       	ret

000003d4 <motor_set_dir>:
     3d4:	cf 93       	push	r28
     3d6:	c6 2f       	mov	r28, r22
     3d8:	26 2f       	mov	r18, r22
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	81 11       	cpse	r24, r1
     3de:	2b c0       	rjmp	.+86     	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
     3e0:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <rightWst+0x2>
     3e4:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <rightWst+0x3>
     3e8:	82 17       	cp	r24, r18
     3ea:	93 07       	cpc	r25, r19
     3ec:	59 f0       	breq	.+22     	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	0e 94 c6 01 	call	0x38c	; 0x38c <motor_set_speed>
     3f8:	8f e9       	ldi	r24, 0x9F	; 159
     3fa:	9f e0       	ldi	r25, 0x0F	; 15
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	f1 f7       	brne	.-4      	; 0x3fc <motor_set_dir+0x28>
     400:	00 c0       	rjmp	.+0      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
     402:	00 00       	nop
     404:	c1 11       	cpse	r28, r1
     406:	0e c0       	rjmp	.+28     	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
     408:	5e 98       	cbi	0x0b, 6	; 11
     40a:	5f 9a       	sbi	0x0b, 7	; 11
     40c:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <rightWst+0x3>
     410:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <rightWst+0x2>
     414:	8f e3       	ldi	r24, 0x3F	; 63
     416:	9c e9       	ldi	r25, 0x9C	; 156
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
     41e:	00 00       	nop
     420:	cf 91       	pop	r28
     422:	08 95       	ret
     424:	5e 9a       	sbi	0x0b, 6	; 11
     426:	5f 98       	cbi	0x0b, 7	; 11
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <rightWst+0x3>
     430:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <rightWst+0x2>
     434:	ef cf       	rjmp	.-34     	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
     436:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <leftWst+0x2>
     43a:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <leftWst+0x3>
     43e:	82 17       	cp	r24, r18
     440:	93 07       	cpc	r25, r19
     442:	59 f0       	breq	.+22     	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	0e 94 c6 01 	call	0x38c	; 0x38c <motor_set_speed>
     44e:	8f e9       	ldi	r24, 0x9F	; 159
     450:	9f e0       	ldi	r25, 0x0F	; 15
     452:	01 97       	sbiw	r24, 0x01	; 1
     454:	f1 f7       	brne	.-4      	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
     456:	00 c0       	rjmp	.+0      	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
     458:	00 00       	nop
     45a:	c1 11       	cpse	r28, r1
     45c:	07 c0       	rjmp	.+14     	; 0x46c <__FUSE_REGION_LENGTH__+0x6c>
     45e:	5c 9a       	sbi	0x0b, 4	; 11
     460:	5d 98       	cbi	0x0b, 5	; 11
     462:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <leftWst+0x3>
     466:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <leftWst+0x2>
     46a:	d4 cf       	rjmp	.-88     	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
     46c:	5c 98       	cbi	0x0b, 4	; 11
     46e:	5d 9a       	sbi	0x0b, 5	; 11
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <leftWst+0x3>
     478:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <leftWst+0x2>
     47c:	cb cf       	rjmp	.-106    	; 0x414 <__FUSE_REGION_LENGTH__+0x14>

0000047e <robo_motorSpeed>:
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	ec 01       	movw	r28, r24
     488:	8b 01       	movw	r16, r22
     48a:	97 ff       	sbrs	r25, 7
     48c:	1c c0       	rjmp	.+56     	; 0x4c6 <robo_motorSpeed+0x48>
     48e:	61 e0       	ldi	r22, 0x01	; 1
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <motor_set_dir>
     496:	d1 95       	neg	r29
     498:	c1 95       	neg	r28
     49a:	d1 09       	sbc	r29, r1
     49c:	17 ff       	sbrs	r17, 7
     49e:	18 c0       	rjmp	.+48     	; 0x4d0 <robo_motorSpeed+0x52>
     4a0:	61 e0       	ldi	r22, 0x01	; 1
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <motor_set_dir>
     4a8:	11 95       	neg	r17
     4aa:	01 95       	neg	r16
     4ac:	11 09       	sbc	r17, r1
     4ae:	b8 01       	movw	r22, r16
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	0e 94 c6 01 	call	0x38c	; 0x38c <motor_set_speed>
     4b6:	be 01       	movw	r22, r28
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	1f 91       	pop	r17
     4c0:	0f 91       	pop	r16
     4c2:	0c 94 c6 01 	jmp	0x38c	; 0x38c <motor_set_speed>
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <motor_set_dir>
     4ce:	e6 cf       	rjmp	.-52     	; 0x49c <robo_motorSpeed+0x1e>
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <motor_set_dir>
     4d8:	ea cf       	rjmp	.-44     	; 0x4ae <robo_motorSpeed+0x30>

000004da <USART0_init>:
     4da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     4de:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     4e2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     4e6:	88 e1       	ldi	r24, 0x18	; 24
     4e8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     4ec:	86 e0       	ldi	r24, 0x06	; 6
     4ee:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     4f2:	08 95       	ret

000004f4 <cputchar>:
     4f4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     4f8:	95 ff       	sbrs	r25, 5
     4fa:	fc cf       	rjmp	.-8      	; 0x4f4 <cputchar>
     4fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     500:	08 95       	ret

00000502 <cgetchar>:
     502:	cf 93       	push	r28
     504:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     508:	87 ff       	sbrs	r24, 7
     50a:	fc cf       	rjmp	.-8      	; 0x504 <cgetchar+0x2>
     50c:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     510:	8c 2f       	mov	r24, r28
     512:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <cputchar>
     516:	8c 2f       	mov	r24, r28
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <cputs>:
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	ec 01       	movw	r28, r24
     522:	89 91       	ld	r24, Y+
     524:	81 11       	cpse	r24, r1
     526:	03 c0       	rjmp	.+6      	; 0x52e <cputs+0x12>
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret
     52e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <cputchar>
     532:	f7 cf       	rjmp	.-18     	; 0x522 <cputs+0x6>

00000534 <robo_proxSensor>:
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ADC_read>
     53a:	21 e0       	ldi	r18, 0x01	; 1
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	84 36       	cpi	r24, 0x64	; 100
     540:	91 05       	cpc	r25, r1
     542:	10 f0       	brcs	.+4      	; 0x548 <robo_proxSensor+0x14>
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	c9 01       	movw	r24, r18
     54a:	08 95       	ret

0000054c <robo_lightSensor>:
     54c:	84 e0       	ldi	r24, 0x04	; 4
     54e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ADC_read>
     552:	2b ef       	ldi	r18, 0xFB	; 251
     554:	ac 01       	movw	r20, r24
     556:	24 03       	mulsu	r18, r20
     558:	c0 01       	movw	r24, r0
     55a:	25 9f       	mul	r18, r21
     55c:	90 0d       	add	r25, r0
     55e:	11 24       	eor	r1, r1
     560:	85 50       	subi	r24, 0x05	; 5
     562:	9c 4e       	sbci	r25, 0xEC	; 236
     564:	63 e3       	ldi	r22, 0x33	; 51
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	0e 94 0d 09 	call	0x121a	; 0x121a <__divmodhi4>
     56c:	cb 01       	movw	r24, r22
     56e:	65 36       	cpi	r22, 0x65	; 101
     570:	71 05       	cpc	r23, r1
     572:	14 f0       	brlt	.+4      	; 0x578 <robo_lightSensor+0x2c>
     574:	84 e6       	ldi	r24, 0x64	; 100
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	08 95       	ret

0000057a <robo_lineSensor>:
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	c0 e0       	ldi	r28, 0x00	; 0
     580:	d1 e0       	ldi	r29, 0x01	; 1
     582:	cc 0f       	add	r28, r28
     584:	8d 2f       	mov	r24, r29
     586:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ADC_read>
     58a:	8c 32       	cpi	r24, 0x2C	; 44
     58c:	91 40       	sbci	r25, 0x01	; 1
     58e:	0c f4       	brge	.+2      	; 0x592 <robo_lineSensor+0x18>
     590:	c1 60       	ori	r28, 0x01	; 1
     592:	df 5f       	subi	r29, 0xFF	; 255
     594:	d4 30       	cpi	r29, 0x04	; 4
     596:	a9 f7       	brne	.-22     	; 0x582 <robo_lineSensor+0x8>
     598:	8c 2f       	mov	r24, r28
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret

000005a2 <robo_bumpSensorR>:
     5a2:	83 b1       	in	r24, 0x03	; 3
     5a4:	82 95       	swap	r24
     5a6:	8f 70       	andi	r24, 0x0F	; 15
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	89 27       	eor	r24, r25
     5ac:	81 70       	andi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	08 95       	ret

000005b2 <robo_bumpSensorL>:
     5b2:	83 b1       	in	r24, 0x03	; 3
     5b4:	86 95       	lsr	r24
     5b6:	86 95       	lsr	r24
     5b8:	86 95       	lsr	r24
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	89 27       	eor	r24, r25
     5be:	81 70       	andi	r24, 0x01	; 1
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	08 95       	ret

000005c4 <robo_Honk>:
     5c4:	5b 9a       	sbi	0x0b, 3	; 11
     5c6:	2f ef       	ldi	r18, 0xFF	; 255
     5c8:	85 ea       	ldi	r24, 0xA5	; 165
     5ca:	9e e0       	ldi	r25, 0x0E	; 14
     5cc:	21 50       	subi	r18, 0x01	; 1
     5ce:	80 40       	sbci	r24, 0x00	; 0
     5d0:	90 40       	sbci	r25, 0x00	; 0
     5d2:	e1 f7       	brne	.-8      	; 0x5cc <robo_Honk+0x8>
     5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <robo_Honk+0x12>
     5d6:	00 00       	nop
     5d8:	5b 98       	cbi	0x0b, 3	; 11
     5da:	2f ef       	ldi	r18, 0xFF	; 255
     5dc:	85 ea       	ldi	r24, 0xA5	; 165
     5de:	9e e0       	ldi	r25, 0x0E	; 14
     5e0:	21 50       	subi	r18, 0x01	; 1
     5e2:	80 40       	sbci	r24, 0x00	; 0
     5e4:	90 40       	sbci	r25, 0x00	; 0
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <robo_Honk+0x1c>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <robo_Honk+0x26>
     5ea:	00 00       	nop
     5ec:	08 95       	ret

000005ee <robo_checkBattery>:
     5ee:	85 e0       	ldi	r24, 0x05	; 5
     5f0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ADC_read>
     5f4:	84 3f       	cpi	r24, 0xF4	; 244
     5f6:	91 40       	sbci	r25, 0x01	; 1
     5f8:	10 f4       	brcc	.+4      	; 0x5fe <robo_checkBattery+0x10>
     5fa:	28 9a       	sbi	0x05, 0	; 5
     5fc:	08 95       	ret
     5fe:	28 98       	cbi	0x05, 0	; 5
     600:	08 95       	ret

00000602 <robo_goPressed>:
     602:	89 b1       	in	r24, 0x09	; 9
     604:	82 fb       	bst	r24, 2
     606:	88 27       	eor	r24, r24
     608:	80 f9       	bld	r24, 0
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	89 27       	eor	r24, r25
     60e:	08 95       	ret

00000610 <robo_wait4goPress>:
     610:	0e 94 01 03 	call	0x602	; 0x602 <robo_goPressed>
     614:	88 23       	and	r24, r24
     616:	e1 f3       	breq	.-8      	; 0x610 <robo_wait4goPress>
     618:	08 95       	ret

0000061a <OS_ticks_init>:
     61a:	f8 94       	cli
     61c:	85 e0       	ldi	r24, 0x05	; 5
     61e:	85 bd       	out	0x25, r24	; 37
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     626:	84 e6       	ldi	r24, 0x64	; 100
     628:	86 bd       	out	0x26, r24	; 38
     62a:	78 94       	sei
     62c:	08 95       	ret

0000062e <HAL_init>:
     62e:	87 e6       	ldi	r24, 0x67	; 103
     630:	0e 94 6d 02 	call	0x4da	; 0x4da <USART0_init>
     634:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <ADC_init>

00000638 <robo_Setup>:
     638:	0e 94 17 03 	call	0x62e	; 0x62e <HAL_init>
     63c:	0e 94 a3 01 	call	0x346	; 0x346 <motor_init>
     640:	53 9a       	sbi	0x0a, 3	; 10
     642:	5b 98       	cbi	0x0b, 3	; 11
     644:	20 9a       	sbi	0x04, 0	; 4
     646:	52 98       	cbi	0x0a, 2	; 10
     648:	5a 9a       	sbi	0x0b, 2	; 11
     64a:	24 98       	cbi	0x04, 4	; 4
     64c:	23 98       	cbi	0x04, 3	; 4
     64e:	85 b1       	in	r24, 0x05	; 5
     650:	88 61       	ori	r24, 0x18	; 24
     652:	85 b9       	out	0x05, r24	; 5
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <motor_set_dir>
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <motor_set_dir>
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	0c 94 3f 02 	jmp	0x47e	; 0x47e <robo_motorSpeed>

00000670 <cprintf>:
     670:	4f 92       	push	r4
     672:	5f 92       	push	r5
     674:	6f 92       	push	r6
     676:	7f 92       	push	r7
     678:	8f 92       	push	r8
     67a:	9f 92       	push	r9
     67c:	af 92       	push	r10
     67e:	bf 92       	push	r11
     680:	cf 92       	push	r12
     682:	df 92       	push	r13
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
     694:	de 01       	movw	r26, r28
     696:	53 96       	adiw	r26, 0x13	; 19
     698:	ed 91       	ld	r30, X+
     69a:	fd 91       	ld	r31, X+
     69c:	8d 01       	movw	r16, r26
     69e:	5a e0       	ldi	r21, 0x0A	; 10
     6a0:	65 2e       	mov	r6, r21
     6a2:	71 2c       	mov	r7, r1
     6a4:	80 81       	ld	r24, Z
     6a6:	85 32       	cpi	r24, 0x25	; 37
     6a8:	81 f4       	brne	.+32     	; 0x6ca <cprintf+0x5a>
     6aa:	5f 01       	movw	r10, r30
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	a8 0e       	add	r10, r24
     6b0:	b1 1c       	adc	r11, r1
     6b2:	81 81       	ldd	r24, Z+1	; 0x01
     6b4:	84 36       	cpi	r24, 0x64	; 100
     6b6:	09 f4       	brne	.+2      	; 0x6ba <cprintf+0x4a>
     6b8:	50 c0       	rjmp	.+160    	; 0x75a <cprintf+0xea>
     6ba:	90 f4       	brcc	.+36     	; 0x6e0 <cprintf+0x70>
     6bc:	83 36       	cpi	r24, 0x63	; 99
     6be:	61 f4       	brne	.+24     	; 0x6d8 <cprintf+0x68>
     6c0:	f8 01       	movw	r30, r16
     6c2:	80 81       	ld	r24, Z
     6c4:	0e 5f       	subi	r16, 0xFE	; 254
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	07 c0       	rjmp	.+14     	; 0x6d8 <cprintf+0x68>
     6ca:	88 23       	and	r24, r24
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <cprintf+0x60>
     6ce:	5d c0       	rjmp	.+186    	; 0x78a <cprintf+0x11a>
     6d0:	5f 01       	movw	r10, r30
     6d2:	9f ef       	ldi	r25, 0xFF	; 255
     6d4:	a9 1a       	sub	r10, r25
     6d6:	b9 0a       	sbc	r11, r25
     6d8:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <cputchar>
     6dc:	f5 01       	movw	r30, r10
     6de:	e2 cf       	rjmp	.-60     	; 0x6a4 <cprintf+0x34>
     6e0:	83 37       	cpi	r24, 0x73	; 115
     6e2:	71 f1       	breq	.+92     	; 0x740 <cprintf+0xd0>
     6e4:	30 e1       	ldi	r19, 0x10	; 16
     6e6:	83 2e       	mov	r8, r19
     6e8:	91 2c       	mov	r9, r1
     6ea:	e1 2c       	mov	r14, r1
     6ec:	40 e1       	ldi	r20, 0x10	; 16
     6ee:	f4 2e       	mov	r15, r20
     6f0:	88 37       	cpi	r24, 0x78	; 120
     6f2:	91 f7       	brne	.-28     	; 0x6d8 <cprintf+0x68>
     6f4:	f8 01       	movw	r30, r16
     6f6:	c0 80       	ld	r12, Z
     6f8:	d1 80       	ldd	r13, Z+1	; 0x01
     6fa:	0e 5f       	subi	r16, 0xFE	; 254
     6fc:	1f 4f       	sbci	r17, 0xFF	; 255
     6fe:	84 36       	cpi	r24, 0x64	; 100
     700:	59 f4       	brne	.+22     	; 0x718 <cprintf+0xa8>
     702:	d7 fe       	sbrs	r13, 7
     704:	06 c0       	rjmp	.+12     	; 0x712 <cprintf+0xa2>
     706:	d1 94       	neg	r13
     708:	c1 94       	neg	r12
     70a:	d1 08       	sbc	r13, r1
     70c:	8d e2       	ldi	r24, 0x2D	; 45
     70e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <cputchar>
     712:	ce 14       	cp	r12, r14
     714:	df 04       	cpc	r13, r15
     716:	48 f1       	brcs	.+82     	; 0x76a <cprintf+0xfa>
     718:	c6 01       	movw	r24, r12
     71a:	b7 01       	movw	r22, r14
     71c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__udivmodhi4>
     720:	2c 01       	movw	r4, r24
     722:	67 5f       	subi	r22, 0xF7	; 247
     724:	7d 4f       	sbci	r23, 0xFD	; 253
     726:	fb 01       	movw	r30, r22
     728:	80 81       	ld	r24, Z
     72a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <cputchar>
     72e:	62 01       	movw	r12, r4
     730:	c7 01       	movw	r24, r14
     732:	b4 01       	movw	r22, r8
     734:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__udivmodhi4>
     738:	7b 01       	movw	r14, r22
     73a:	67 2b       	or	r22, r23
     73c:	69 f7       	brne	.-38     	; 0x718 <cprintf+0xa8>
     73e:	ce cf       	rjmp	.-100    	; 0x6dc <cprintf+0x6c>
     740:	f8 01       	movw	r30, r16
     742:	e0 80       	ld	r14, Z
     744:	f1 80       	ldd	r15, Z+1	; 0x01
     746:	0e 5f       	subi	r16, 0xFE	; 254
     748:	1f 4f       	sbci	r17, 0xFF	; 255
     74a:	f7 01       	movw	r30, r14
     74c:	81 91       	ld	r24, Z+
     74e:	7f 01       	movw	r14, r30
     750:	88 23       	and	r24, r24
     752:	21 f2       	breq	.-120    	; 0x6dc <cprintf+0x6c>
     754:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <cputchar>
     758:	f8 cf       	rjmp	.-16     	; 0x74a <cprintf+0xda>
     75a:	9a e0       	ldi	r25, 0x0A	; 10
     75c:	89 2e       	mov	r8, r25
     75e:	91 2c       	mov	r9, r1
     760:	20 e1       	ldi	r18, 0x10	; 16
     762:	e2 2e       	mov	r14, r18
     764:	27 e2       	ldi	r18, 0x27	; 39
     766:	f2 2e       	mov	r15, r18
     768:	c5 cf       	rjmp	.-118    	; 0x6f4 <cprintf+0x84>
     76a:	c7 01       	movw	r24, r14
     76c:	b3 01       	movw	r22, r6
     76e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__udivmodhi4>
     772:	7b 01       	movw	r14, r22
     774:	62 30       	cpi	r22, 0x02	; 2
     776:	71 05       	cpc	r23, r1
     778:	60 f6       	brcc	.-104    	; 0x712 <cprintf+0xa2>
     77a:	c6 01       	movw	r24, r12
     77c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__udivmodhi4>
     780:	fb 01       	movw	r30, r22
     782:	e7 5f       	subi	r30, 0xF7	; 247
     784:	fd 4f       	sbci	r31, 0xFD	; 253
     786:	80 81       	ld	r24, Z
     788:	a7 cf       	rjmp	.-178    	; 0x6d8 <cprintf+0x68>
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	df 90       	pop	r13
     79c:	cf 90       	pop	r12
     79e:	bf 90       	pop	r11
     7a0:	af 90       	pop	r10
     7a2:	9f 90       	pop	r9
     7a4:	8f 90       	pop	r8
     7a6:	7f 90       	pop	r7
     7a8:	6f 90       	pop	r6
     7aa:	5f 90       	pop	r5
     7ac:	4f 90       	pop	r4
     7ae:	08 95       	ret

000007b0 <OSStartHighRdy>:
     7b0:	00 91 2a 04 	lds	r16, 0x042A	; 0x80042a <OSRunning>
     7b4:	03 95       	inc	r16
     7b6:	00 93 2a 04 	sts	0x042A, r16	; 0x80042a <OSRunning>
     7ba:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <OSTCBHighRdy>
     7be:	f0 91 3b 04 	lds	r31, 0x043B	; 0x80043b <OSTCBHighRdy+0x1>
     7c2:	c1 91       	ld	r28, Z+
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	d1 91       	ld	r29, Z+
     7c8:	de bf       	out	0x3e, r29	; 62
     7ca:	0f 91       	pop	r16
     7cc:	0f bf       	out	0x3f, r16	; 63
     7ce:	ff 91       	pop	r31
     7d0:	ef 91       	pop	r30
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	bf 91       	pop	r27
     7d8:	af 91       	pop	r26
     7da:	9f 91       	pop	r25
     7dc:	8f 91       	pop	r24
     7de:	7f 91       	pop	r23
     7e0:	6f 91       	pop	r22
     7e2:	5f 91       	pop	r21
     7e4:	4f 91       	pop	r20
     7e6:	3f 91       	pop	r19
     7e8:	2f 91       	pop	r18
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	ff 90       	pop	r15
     7f0:	ef 90       	pop	r14
     7f2:	df 90       	pop	r13
     7f4:	cf 90       	pop	r12
     7f6:	bf 90       	pop	r11
     7f8:	af 90       	pop	r10
     7fa:	9f 90       	pop	r9
     7fc:	8f 90       	pop	r8
     7fe:	7f 90       	pop	r7
     800:	6f 90       	pop	r6
     802:	5f 90       	pop	r5
     804:	4f 90       	pop	r4
     806:	3f 90       	pop	r3
     808:	2f 90       	pop	r2
     80a:	1f 90       	pop	r1
     80c:	0f 90       	pop	r0
     80e:	08 95       	ret

00000810 <OSCtxSw>:
     810:	0f 92       	push	r0
     812:	1f 92       	push	r1
     814:	2f 92       	push	r2
     816:	3f 92       	push	r3
     818:	4f 92       	push	r4
     81a:	5f 92       	push	r5
     81c:	6f 92       	push	r6
     81e:	7f 92       	push	r7
     820:	8f 92       	push	r8
     822:	9f 92       	push	r9
     824:	af 92       	push	r10
     826:	bf 92       	push	r11
     828:	cf 92       	push	r12
     82a:	df 92       	push	r13
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	2f 93       	push	r18
     836:	3f 93       	push	r19
     838:	4f 93       	push	r20
     83a:	5f 93       	push	r21
     83c:	6f 93       	push	r22
     83e:	7f 93       	push	r23
     840:	8f 93       	push	r24
     842:	9f 93       	push	r25
     844:	af 93       	push	r26
     846:	bf 93       	push	r27
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	ef 93       	push	r30
     84e:	ff 93       	push	r31
     850:	0f b7       	in	r16, 0x3f	; 63
     852:	0f 93       	push	r16
     854:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <OSTCBCur>
     858:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <OSTCBCur+0x1>
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	c1 93       	st	Z+, r28
     860:	de b7       	in	r29, 0x3e	; 62
     862:	d1 93       	st	Z+, r29
     864:	00 91 2f 04 	lds	r16, 0x042F	; 0x80042f <OSPrioHighRdy>
     868:	00 93 30 04 	sts	0x0430, r16	; 0x800430 <OSPrioCur>
     86c:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <OSTCBHighRdy>
     870:	f0 91 3b 04 	lds	r31, 0x043B	; 0x80043b <OSTCBHighRdy+0x1>
     874:	e0 93 42 04 	sts	0x0442, r30	; 0x800442 <OSTCBCur>
     878:	f0 93 43 04 	sts	0x0443, r31	; 0x800443 <OSTCBCur+0x1>
     87c:	c1 91       	ld	r28, Z+
     87e:	cd bf       	out	0x3d, r28	; 61
     880:	d1 91       	ld	r29, Z+
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f 91       	pop	r16
     886:	0f bf       	out	0x3f, r16	; 63
     888:	ff 91       	pop	r31
     88a:	ef 91       	pop	r30
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	bf 91       	pop	r27
     892:	af 91       	pop	r26
     894:	9f 91       	pop	r25
     896:	8f 91       	pop	r24
     898:	7f 91       	pop	r23
     89a:	6f 91       	pop	r22
     89c:	5f 91       	pop	r21
     89e:	4f 91       	pop	r20
     8a0:	3f 91       	pop	r19
     8a2:	2f 91       	pop	r18
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	df 90       	pop	r13
     8ae:	cf 90       	pop	r12
     8b0:	bf 90       	pop	r11
     8b2:	af 90       	pop	r10
     8b4:	9f 90       	pop	r9
     8b6:	8f 90       	pop	r8
     8b8:	7f 90       	pop	r7
     8ba:	6f 90       	pop	r6
     8bc:	5f 90       	pop	r5
     8be:	4f 90       	pop	r4
     8c0:	3f 90       	pop	r3
     8c2:	2f 90       	pop	r2
     8c4:	1f 90       	pop	r1
     8c6:	0f 90       	pop	r0
     8c8:	08 95       	ret

000008ca <OSIntCtxSw>:
     8ca:	00 91 2f 04 	lds	r16, 0x042F	; 0x80042f <OSPrioHighRdy>
     8ce:	00 93 30 04 	sts	0x0430, r16	; 0x800430 <OSPrioCur>
     8d2:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <OSTCBHighRdy>
     8d6:	f0 91 3b 04 	lds	r31, 0x043B	; 0x80043b <OSTCBHighRdy+0x1>
     8da:	e0 93 42 04 	sts	0x0442, r30	; 0x800442 <OSTCBCur>
     8de:	f0 93 43 04 	sts	0x0443, r31	; 0x800443 <OSTCBCur+0x1>
     8e2:	c1 91       	ld	r28, Z+
     8e4:	cd bf       	out	0x3d, r28	; 61
     8e6:	d1 91       	ld	r29, Z+
     8e8:	de bf       	out	0x3e, r29	; 62
     8ea:	0f 91       	pop	r16
     8ec:	0f bf       	out	0x3f, r16	; 63
     8ee:	ff 91       	pop	r31
     8f0:	ef 91       	pop	r30
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	bf 91       	pop	r27
     8f8:	af 91       	pop	r26
     8fa:	9f 91       	pop	r25
     8fc:	8f 91       	pop	r24
     8fe:	7f 91       	pop	r23
     900:	6f 91       	pop	r22
     902:	5f 91       	pop	r21
     904:	4f 91       	pop	r20
     906:	3f 91       	pop	r19
     908:	2f 91       	pop	r18
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	df 90       	pop	r13
     914:	cf 90       	pop	r12
     916:	bf 90       	pop	r11
     918:	af 90       	pop	r10
     91a:	9f 90       	pop	r9
     91c:	8f 90       	pop	r8
     91e:	7f 90       	pop	r7
     920:	6f 90       	pop	r6
     922:	5f 90       	pop	r5
     924:	4f 90       	pop	r4
     926:	3f 90       	pop	r3
     928:	2f 90       	pop	r2
     92a:	1f 90       	pop	r1
     92c:	0f 90       	pop	r0
     92e:	08 95       	ret

00000930 <OSTickISR>:
     930:	0f 92       	push	r0
     932:	1f 92       	push	r1
     934:	2f 92       	push	r2
     936:	3f 92       	push	r3
     938:	4f 92       	push	r4
     93a:	5f 92       	push	r5
     93c:	6f 92       	push	r6
     93e:	7f 92       	push	r7
     940:	8f 92       	push	r8
     942:	9f 92       	push	r9
     944:	af 92       	push	r10
     946:	bf 92       	push	r11
     948:	cf 92       	push	r12
     94a:	df 92       	push	r13
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	2f 93       	push	r18
     956:	3f 93       	push	r19
     958:	4f 93       	push	r20
     95a:	5f 93       	push	r21
     95c:	6f 93       	push	r22
     95e:	7f 93       	push	r23
     960:	8f 93       	push	r24
     962:	9f 93       	push	r25
     964:	af 93       	push	r26
     966:	bf 93       	push	r27
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	ef 93       	push	r30
     96e:	ff 93       	push	r31
     970:	0f b7       	in	r16, 0x3f	; 63
     972:	00 68       	ori	r16, 0x80	; 128
     974:	0f 93       	push	r16
     976:	00 91 41 04 	lds	r16, 0x0441	; 0x800441 <OSIntNesting>
     97a:	03 95       	inc	r16
     97c:	00 93 41 04 	sts	0x0441, r16	; 0x800441 <OSIntNesting>
     980:	01 30       	cpi	r16, 0x01	; 1
     982:	41 f4       	brne	.+16     	; 0x994 <_not_first_int>
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
     988:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <OSTCBCur>
     98c:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <OSTCBCur+0x1>
     990:	c1 93       	st	Z+, r28
     992:	d1 93       	st	Z+, r29

00000994 <_not_first_int>:
     994:	04 e6       	ldi	r16, 0x64	; 100
     996:	06 bd       	out	0x26, r16	; 38
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	1f 2e       	mov	r1, r31
     99c:	78 94       	sei
     99e:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <OSTimeTick>
     9a2:	00 00       	nop
     9a4:	0e 94 6e 05 	call	0xadc	; 0xadc <OSIntExit>
     9a8:	0f 91       	pop	r16
     9aa:	0f bf       	out	0x3f, r16	; 63
     9ac:	ff 91       	pop	r31
     9ae:	ef 91       	pop	r30
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	bf 91       	pop	r27
     9b6:	af 91       	pop	r26
     9b8:	9f 91       	pop	r25
     9ba:	8f 91       	pop	r24
     9bc:	7f 91       	pop	r23
     9be:	6f 91       	pop	r22
     9c0:	5f 91       	pop	r21
     9c2:	4f 91       	pop	r20
     9c4:	3f 91       	pop	r19
     9c6:	2f 91       	pop	r18
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	df 90       	pop	r13
     9d2:	cf 90       	pop	r12
     9d4:	bf 90       	pop	r11
     9d6:	af 90       	pop	r10
     9d8:	9f 90       	pop	r9
     9da:	8f 90       	pop	r8
     9dc:	7f 90       	pop	r7
     9de:	6f 90       	pop	r6
     9e0:	5f 90       	pop	r5
     9e2:	4f 90       	pop	r4
     9e4:	3f 90       	pop	r3
     9e6:	2f 90       	pop	r2
     9e8:	1f 90       	pop	r1
     9ea:	0f 90       	pop	r0
     9ec:	08 95       	ret

000009ee <OSTaskStkInit>:
     9ee:	fa 01       	movw	r30, r20
     9f0:	80 83       	st	Z, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	90 83       	st	Z, r25
     9f6:	31 97       	sbiw	r30, 0x01	; 1
     9f8:	10 82       	st	Z, r1
     9fa:	31 97       	sbiw	r30, 0x01	; 1
     9fc:	10 82       	st	Z, r1
     9fe:	31 97       	sbiw	r30, 0x01	; 1
     a00:	10 82       	st	Z, r1
     a02:	31 97       	sbiw	r30, 0x01	; 1
     a04:	10 82       	st	Z, r1
     a06:	31 97       	sbiw	r30, 0x01	; 1
     a08:	10 82       	st	Z, r1
     a0a:	31 97       	sbiw	r30, 0x01	; 1
     a0c:	10 82       	st	Z, r1
     a0e:	31 97       	sbiw	r30, 0x01	; 1
     a10:	10 82       	st	Z, r1
     a12:	31 97       	sbiw	r30, 0x01	; 1
     a14:	10 82       	st	Z, r1
     a16:	31 97       	sbiw	r30, 0x01	; 1
     a18:	10 82       	st	Z, r1
     a1a:	31 97       	sbiw	r30, 0x01	; 1
     a1c:	10 82       	st	Z, r1
     a1e:	31 97       	sbiw	r30, 0x01	; 1
     a20:	10 82       	st	Z, r1
     a22:	31 97       	sbiw	r30, 0x01	; 1
     a24:	10 82       	st	Z, r1
     a26:	31 97       	sbiw	r30, 0x01	; 1
     a28:	10 82       	st	Z, r1
     a2a:	31 97       	sbiw	r30, 0x01	; 1
     a2c:	10 82       	st	Z, r1
     a2e:	31 97       	sbiw	r30, 0x01	; 1
     a30:	10 82       	st	Z, r1
     a32:	31 97       	sbiw	r30, 0x01	; 1
     a34:	10 82       	st	Z, r1
     a36:	31 97       	sbiw	r30, 0x01	; 1
     a38:	10 82       	st	Z, r1
     a3a:	31 97       	sbiw	r30, 0x01	; 1
     a3c:	10 82       	st	Z, r1
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	10 82       	st	Z, r1
     a42:	31 97       	sbiw	r30, 0x01	; 1
     a44:	10 82       	st	Z, r1
     a46:	31 97       	sbiw	r30, 0x01	; 1
     a48:	10 82       	st	Z, r1
     a4a:	31 97       	sbiw	r30, 0x01	; 1
     a4c:	10 82       	st	Z, r1
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	10 82       	st	Z, r1
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	10 82       	st	Z, r1
     a56:	31 97       	sbiw	r30, 0x01	; 1
     a58:	60 83       	st	Z, r22
     a5a:	31 97       	sbiw	r30, 0x01	; 1
     a5c:	70 83       	st	Z, r23
     a5e:	31 97       	sbiw	r30, 0x01	; 1
     a60:	10 82       	st	Z, r1
     a62:	31 97       	sbiw	r30, 0x01	; 1
     a64:	10 82       	st	Z, r1
     a66:	31 97       	sbiw	r30, 0x01	; 1
     a68:	10 82       	st	Z, r1
     a6a:	31 97       	sbiw	r30, 0x01	; 1
     a6c:	10 82       	st	Z, r1
     a6e:	31 97       	sbiw	r30, 0x01	; 1
     a70:	10 82       	st	Z, r1
     a72:	31 97       	sbiw	r30, 0x01	; 1
     a74:	10 82       	st	Z, r1
     a76:	31 97       	sbiw	r30, 0x01	; 1
     a78:	80 e8       	ldi	r24, 0x80	; 128
     a7a:	80 83       	st	Z, r24
     a7c:	ca 01       	movw	r24, r20
     a7e:	83 97       	sbiw	r24, 0x23	; 35
     a80:	08 95       	ret

00000a82 <OSTaskCreateHook>:
     a82:	08 95       	ret

00000a84 <OSTaskDelHook>:
     a84:	08 95       	ret

00000a86 <OSTaskSwHook>:
     a86:	08 95       	ret

00000a88 <OSTaskStatHook>:
     a88:	08 95       	ret

00000a8a <OSTimeTickHook>:
     a8a:	08 95       	ret

00000a8c <OSInitHookBegin>:
     a8c:	08 95       	ret

00000a8e <OSInitHookEnd>:
     a8e:	08 95       	ret

00000a90 <OSTaskIdleHook>:
     a90:	08 95       	ret

00000a92 <OSTCBInitHook>:
     a92:	08 95       	ret

00000a94 <OS_TaskIdle>:
     a94:	f8 94       	cli
     a96:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <OSIdleCtr>
     a9a:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <OSIdleCtr+0x1>
     a9e:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <OSIdleCtr+0x2>
     aa2:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <OSIdleCtr+0x3>
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	a1 1d       	adc	r26, r1
     aaa:	b1 1d       	adc	r27, r1
     aac:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <OSIdleCtr>
     ab0:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <OSIdleCtr+0x1>
     ab4:	a0 93 2d 04 	sts	0x042D, r26	; 0x80042d <OSIdleCtr+0x2>
     ab8:	b0 93 2e 04 	sts	0x042E, r27	; 0x80042e <OSIdleCtr+0x3>
     abc:	78 94       	sei
     abe:	0e 94 48 05 	call	0xa90	; 0xa90 <OSTaskIdleHook>
     ac2:	e8 cf       	rjmp	.-48     	; 0xa94 <OS_TaskIdle>

00000ac4 <OSIntEnter>:
     ac4:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     ac8:	81 30       	cpi	r24, 0x01	; 1
     aca:	39 f4       	brne	.+14     	; 0xada <OSIntEnter+0x16>
     acc:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSIntNesting>
     ad0:	8f 3f       	cpi	r24, 0xFF	; 255
     ad2:	19 f0       	breq	.+6      	; 0xada <OSIntEnter+0x16>
     ad4:	8f 5f       	subi	r24, 0xFF	; 255
     ad6:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <OSIntNesting>
     ada:	08 95       	ret

00000adc <OSIntExit>:
     adc:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	09 f0       	breq	.+2      	; 0xae6 <OSIntExit+0xa>
     ae4:	4c c0       	rjmp	.+152    	; 0xb7e <OSIntExit+0xa2>
     ae6:	f8 94       	cli
     ae8:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSIntNesting>
     aec:	88 23       	and	r24, r24
     aee:	19 f0       	breq	.+6      	; 0xaf6 <OSIntExit+0x1a>
     af0:	81 50       	subi	r24, 0x01	; 1
     af2:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <OSIntNesting>
     af6:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSIntNesting>
     afa:	81 11       	cpse	r24, r1
     afc:	3f c0       	rjmp	.+126    	; 0xb7c <OSIntExit+0xa0>
     afe:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSLockNesting>
     b02:	81 11       	cpse	r24, r1
     b04:	3b c0       	rjmp	.+118    	; 0xb7c <OSIntExit+0xa0>
     b06:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <OSRdyGrp>
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	ef 5f       	subi	r30, 0xFF	; 255
     b0e:	fe 4f       	sbci	r31, 0xFE	; 254
     b10:	e0 81       	ld	r30, Z
     b12:	e0 93 40 04 	sts	0x0440, r30	; 0x800440 <OSIntExitY>
     b16:	ae 2f       	mov	r26, r30
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	a3 5c       	subi	r26, 0xC3	; 195
     b1c:	bb 4f       	sbci	r27, 0xFB	; 251
     b1e:	ac 91       	ld	r26, X
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	af 5f       	subi	r26, 0xFF	; 255
     b24:	be 4f       	sbci	r27, 0xFE	; 254
     b26:	ee 0f       	add	r30, r30
     b28:	ee 0f       	add	r30, r30
     b2a:	ee 0f       	add	r30, r30
     b2c:	8c 91       	ld	r24, X
     b2e:	e8 0f       	add	r30, r24
     b30:	e0 93 2f 04 	sts	0x042F, r30	; 0x80042f <OSPrioHighRdy>
     b34:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <OSPrioCur>
     b38:	e8 17       	cp	r30, r24
     b3a:	01 f1       	breq	.+64     	; 0xb7c <OSIntExit+0xa0>
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	ee 0f       	add	r30, r30
     b40:	ff 1f       	adc	r31, r31
     b42:	ed 57       	subi	r30, 0x7D	; 125
     b44:	fa 4f       	sbci	r31, 0xFA	; 250
     b46:	80 81       	ld	r24, Z
     b48:	91 81       	ldd	r25, Z+1	; 0x01
     b4a:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <OSTCBHighRdy+0x1>
     b4e:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <OSTCBHighRdy>
     b52:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <OSCtxSwCtr>
     b56:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <OSCtxSwCtr+0x1>
     b5a:	a0 91 35 04 	lds	r26, 0x0435	; 0x800435 <OSCtxSwCtr+0x2>
     b5e:	b0 91 36 04 	lds	r27, 0x0436	; 0x800436 <OSCtxSwCtr+0x3>
     b62:	01 96       	adiw	r24, 0x01	; 1
     b64:	a1 1d       	adc	r26, r1
     b66:	b1 1d       	adc	r27, r1
     b68:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <OSCtxSwCtr>
     b6c:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <OSCtxSwCtr+0x1>
     b70:	a0 93 35 04 	sts	0x0435, r26	; 0x800435 <OSCtxSwCtr+0x2>
     b74:	b0 93 36 04 	sts	0x0436, r27	; 0x800436 <OSCtxSwCtr+0x3>
     b78:	0e 94 65 04 	call	0x8ca	; 0x8ca <OSIntCtxSw>
     b7c:	78 94       	sei
     b7e:	08 95       	ret

00000b80 <OSSchedLock>:
     b80:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	49 f4       	brne	.+18     	; 0xb9a <OSSchedLock+0x1a>
     b88:	f8 94       	cli
     b8a:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSLockNesting>
     b8e:	8f 3f       	cpi	r24, 0xFF	; 255
     b90:	19 f0       	breq	.+6      	; 0xb98 <OSSchedLock+0x18>
     b92:	8f 5f       	subi	r24, 0xFF	; 255
     b94:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <OSLockNesting>
     b98:	78 94       	sei
     b9a:	08 95       	ret

00000b9c <OSStart>:
     b9c:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     ba0:	81 11       	cpse	r24, r1
     ba2:	28 c0       	rjmp	.+80     	; 0xbf4 <OSStart+0x58>
     ba4:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <OSRdyGrp>
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	ef 5f       	subi	r30, 0xFF	; 255
     bac:	fe 4f       	sbci	r31, 0xFE	; 254
     bae:	e0 81       	ld	r30, Z
     bb0:	ae 2f       	mov	r26, r30
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	a3 5c       	subi	r26, 0xC3	; 195
     bb6:	bb 4f       	sbci	r27, 0xFB	; 251
     bb8:	ac 91       	ld	r26, X
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	af 5f       	subi	r26, 0xFF	; 255
     bbe:	be 4f       	sbci	r27, 0xFE	; 254
     bc0:	ee 0f       	add	r30, r30
     bc2:	ee 0f       	add	r30, r30
     bc4:	ee 0f       	add	r30, r30
     bc6:	8c 91       	ld	r24, X
     bc8:	e8 0f       	add	r30, r24
     bca:	e0 93 2f 04 	sts	0x042F, r30	; 0x80042f <OSPrioHighRdy>
     bce:	e0 93 30 04 	sts	0x0430, r30	; 0x800430 <OSPrioCur>
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	ee 0f       	add	r30, r30
     bd6:	ff 1f       	adc	r31, r31
     bd8:	ed 57       	subi	r30, 0x7D	; 125
     bda:	fa 4f       	sbci	r31, 0xFA	; 250
     bdc:	80 81       	ld	r24, Z
     bde:	91 81       	ldd	r25, Z+1	; 0x01
     be0:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <OSTCBHighRdy+0x1>
     be4:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <OSTCBHighRdy>
     be8:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <OSTCBCur+0x1>
     bec:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <OSTCBCur>
     bf0:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <OSStartHighRdy>
     bf4:	08 95       	ret

00000bf6 <OSTimeTick>:
     bf6:	0e 94 45 05 	call	0xa8a	; 0xa8a <OSTimeTickHook>
     bfa:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     bfe:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <OSTCBList>
     c02:	f0 91 32 04 	lds	r31, 0x0432	; 0x800432 <OSTCBList+0x1>
     c06:	21 e0       	ldi	r18, 0x01	; 1
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	01 f1       	breq	.+64     	; 0xc4e <OSTimeTick+0x58>
     c0e:	08 95       	ret
     c10:	f8 94       	cli
     c12:	86 81       	ldd	r24, Z+6	; 0x06
     c14:	97 81       	ldd	r25, Z+7	; 0x07
     c16:	00 97       	sbiw	r24, 0x00	; 0
     c18:	b1 f0       	breq	.+44     	; 0xc46 <OSTimeTick+0x50>
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	97 83       	std	Z+7, r25	; 0x07
     c1e:	86 83       	std	Z+6, r24	; 0x06
     c20:	89 2b       	or	r24, r25
     c22:	89 f4       	brne	.+34     	; 0xc46 <OSTimeTick+0x50>
     c24:	80 85       	ldd	r24, Z+8	; 0x08
     c26:	83 fd       	sbrc	r24, 3
     c28:	16 c0       	rjmp	.+44     	; 0xc56 <OSTimeTick+0x60>
     c2a:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <OSRdyGrp>
     c2e:	95 85       	ldd	r25, Z+13	; 0x0d
     c30:	89 2b       	or	r24, r25
     c32:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <OSRdyGrp>
     c36:	a3 85       	ldd	r26, Z+11	; 0x0b
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	a3 5c       	subi	r26, 0xC3	; 195
     c3c:	bb 4f       	sbci	r27, 0xFB	; 251
     c3e:	8c 91       	ld	r24, X
     c40:	94 85       	ldd	r25, Z+12	; 0x0c
     c42:	89 2b       	or	r24, r25
     c44:	8c 93       	st	X, r24
     c46:	02 80       	ldd	r0, Z+2	; 0x02
     c48:	f3 81       	ldd	r31, Z+3	; 0x03
     c4a:	e0 2d       	mov	r30, r0
     c4c:	78 94       	sei
     c4e:	81 85       	ldd	r24, Z+9	; 0x09
     c50:	80 31       	cpi	r24, 0x10	; 16
     c52:	f1 f6       	brne	.-68     	; 0xc10 <OSTimeTick+0x1a>
     c54:	dc cf       	rjmp	.-72     	; 0xc0e <OSTimeTick+0x18>
     c56:	37 83       	std	Z+7, r19	; 0x07
     c58:	26 83       	std	Z+6, r18	; 0x06
     c5a:	f5 cf       	rjmp	.-22     	; 0xc46 <OSTimeTick+0x50>

00000c5c <OSVersion>:
     c5c:	8c ef       	ldi	r24, 0xFC	; 252
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	08 95       	ret

00000c62 <OS_Dummy>:
     c62:	08 95       	ret

00000c64 <OS_Sched>:
     c64:	f8 94       	cli
     c66:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSIntNesting>
     c6a:	81 11       	cpse	r24, r1
     c6c:	3d c0       	rjmp	.+122    	; 0xce8 <OS_Sched+0x84>
     c6e:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSLockNesting>
     c72:	81 11       	cpse	r24, r1
     c74:	39 c0       	rjmp	.+114    	; 0xce8 <OS_Sched+0x84>
     c76:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <OSRdyGrp>
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	ef 5f       	subi	r30, 0xFF	; 255
     c7e:	fe 4f       	sbci	r31, 0xFE	; 254
     c80:	e0 81       	ld	r30, Z
     c82:	ae 2f       	mov	r26, r30
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	a3 5c       	subi	r26, 0xC3	; 195
     c88:	bb 4f       	sbci	r27, 0xFB	; 251
     c8a:	ac 91       	ld	r26, X
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	af 5f       	subi	r26, 0xFF	; 255
     c90:	be 4f       	sbci	r27, 0xFE	; 254
     c92:	ee 0f       	add	r30, r30
     c94:	ee 0f       	add	r30, r30
     c96:	ee 0f       	add	r30, r30
     c98:	8c 91       	ld	r24, X
     c9a:	e8 0f       	add	r30, r24
     c9c:	e0 93 2f 04 	sts	0x042F, r30	; 0x80042f <OSPrioHighRdy>
     ca0:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <OSPrioCur>
     ca4:	e8 17       	cp	r30, r24
     ca6:	01 f1       	breq	.+64     	; 0xce8 <OS_Sched+0x84>
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	ee 0f       	add	r30, r30
     cac:	ff 1f       	adc	r31, r31
     cae:	ed 57       	subi	r30, 0x7D	; 125
     cb0:	fa 4f       	sbci	r31, 0xFA	; 250
     cb2:	80 81       	ld	r24, Z
     cb4:	91 81       	ldd	r25, Z+1	; 0x01
     cb6:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <OSTCBHighRdy+0x1>
     cba:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <OSTCBHighRdy>
     cbe:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <OSCtxSwCtr>
     cc2:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <OSCtxSwCtr+0x1>
     cc6:	a0 91 35 04 	lds	r26, 0x0435	; 0x800435 <OSCtxSwCtr+0x2>
     cca:	b0 91 36 04 	lds	r27, 0x0436	; 0x800436 <OSCtxSwCtr+0x3>
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	a1 1d       	adc	r26, r1
     cd2:	b1 1d       	adc	r27, r1
     cd4:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <OSCtxSwCtr>
     cd8:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <OSCtxSwCtr+0x1>
     cdc:	a0 93 35 04 	sts	0x0435, r26	; 0x800435 <OSCtxSwCtr+0x2>
     ce0:	b0 93 36 04 	sts	0x0436, r27	; 0x800436 <OSCtxSwCtr+0x3>
     ce4:	0e 94 08 04 	call	0x810	; 0x810 <OSCtxSw>
     ce8:	78 94       	sei
     cea:	08 95       	ret

00000cec <OSSchedUnlock>:
     cec:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	91 f4       	brne	.+36     	; 0xd18 <OSSchedUnlock+0x2c>
     cf4:	f8 94       	cli
     cf6:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSLockNesting>
     cfa:	88 23       	and	r24, r24
     cfc:	61 f0       	breq	.+24     	; 0xd16 <OSSchedUnlock+0x2a>
     cfe:	81 50       	subi	r24, 0x01	; 1
     d00:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <OSLockNesting>
     d04:	81 11       	cpse	r24, r1
     d06:	07 c0       	rjmp	.+14     	; 0xd16 <OSSchedUnlock+0x2a>
     d08:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSIntNesting>
     d0c:	81 11       	cpse	r24, r1
     d0e:	03 c0       	rjmp	.+6      	; 0xd16 <OSSchedUnlock+0x2a>
     d10:	78 94       	sei
     d12:	0c 94 32 06 	jmp	0xc64	; 0xc64 <OS_Sched>
     d16:	78 94       	sei
     d18:	08 95       	ret

00000d1a <OSTimeDly.part.0>:
     d1a:	ac 01       	movw	r20, r24
     d1c:	f8 94       	cli
     d1e:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <OSTCBCur>
     d22:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <OSTCBCur+0x1>
     d26:	1b 96       	adiw	r26, 0x0b	; 11
     d28:	ec 91       	ld	r30, X
     d2a:	1b 97       	sbiw	r26, 0x0b	; 11
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	1c 96       	adiw	r26, 0x0c	; 12
     d30:	9c 91       	ld	r25, X
     d32:	1c 97       	sbiw	r26, 0x0c	; 12
     d34:	90 95       	com	r25
     d36:	e3 5c       	subi	r30, 0xC3	; 195
     d38:	fb 4f       	sbci	r31, 0xFB	; 251
     d3a:	80 81       	ld	r24, Z
     d3c:	98 23       	and	r25, r24
     d3e:	90 83       	st	Z, r25
     d40:	91 11       	cpse	r25, r1
     d42:	0a c0       	rjmp	.+20     	; 0xd58 <OSTimeDly.part.0+0x3e>
     d44:	1d 96       	adiw	r26, 0x0d	; 13
     d46:	9c 91       	ld	r25, X
     d48:	1d 97       	sbiw	r26, 0x0d	; 13
     d4a:	29 2f       	mov	r18, r25
     d4c:	20 95       	com	r18
     d4e:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <OSRdyGrp>
     d52:	92 23       	and	r25, r18
     d54:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <OSRdyGrp>
     d58:	17 96       	adiw	r26, 0x07	; 7
     d5a:	5c 93       	st	X, r21
     d5c:	4e 93       	st	-X, r20
     d5e:	16 97       	sbiw	r26, 0x06	; 6
     d60:	78 94       	sei
     d62:	0c 94 32 06 	jmp	0xc64	; 0xc64 <OS_Sched>

00000d66 <OS_TCBInit>:
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	f8 94       	cli
     d6e:	c0 91 37 04 	lds	r28, 0x0437	; 0x800437 <OSTCBFreeList>
     d72:	d0 91 38 04 	lds	r29, 0x0438	; 0x800438 <OSTCBFreeList+0x1>
     d76:	20 97       	sbiw	r28, 0x00	; 0
     d78:	09 f4       	brne	.+2      	; 0xd7c <OS_TCBInit+0x16>
     d7a:	54 c0       	rjmp	.+168    	; 0xe24 <OS_TCBInit+0xbe>
     d7c:	18 2f       	mov	r17, r24
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	9b 81       	ldd	r25, Y+3	; 0x03
     d82:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <OSTCBFreeList+0x1>
     d86:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <OSTCBFreeList>
     d8a:	78 94       	sei
     d8c:	79 83       	std	Y+1, r23	; 0x01
     d8e:	68 83       	st	Y, r22
     d90:	19 87       	std	Y+9, r17	; 0x09
     d92:	18 86       	std	Y+8, r1	; 0x08
     d94:	1f 82       	std	Y+7, r1	; 0x07
     d96:	1e 82       	std	Y+6, r1	; 0x06
     d98:	1e 86       	std	Y+14, r1	; 0x0e
     d9a:	e1 2f       	mov	r30, r17
     d9c:	e6 95       	lsr	r30
     d9e:	e6 95       	lsr	r30
     da0:	e6 95       	lsr	r30
     da2:	eb 87       	std	Y+11, r30	; 0x0b
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	ef 5f       	subi	r30, 0xFF	; 255
     da8:	fd 4f       	sbci	r31, 0xFD	; 253
     daa:	80 81       	ld	r24, Z
     dac:	8d 87       	std	Y+13, r24	; 0x0d
     dae:	e1 2f       	mov	r30, r17
     db0:	e7 70       	andi	r30, 0x07	; 7
     db2:	ea 87       	std	Y+10, r30	; 0x0a
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	ef 5f       	subi	r30, 0xFF	; 255
     db8:	fd 4f       	sbci	r31, 0xFD	; 253
     dba:	80 81       	ld	r24, Z
     dbc:	8c 87       	std	Y+12, r24	; 0x0c
     dbe:	ce 01       	movw	r24, r28
     dc0:	0e 94 49 05 	call	0xa92	; 0xa92 <OSTCBInitHook>
     dc4:	ce 01       	movw	r24, r28
     dc6:	0e 94 41 05 	call	0xa82	; 0xa82 <OSTaskCreateHook>
     dca:	f8 94       	cli
     dcc:	e1 2f       	mov	r30, r17
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	ee 0f       	add	r30, r30
     dd2:	ff 1f       	adc	r31, r31
     dd4:	ed 57       	subi	r30, 0x7D	; 125
     dd6:	fa 4f       	sbci	r31, 0xFA	; 250
     dd8:	d1 83       	std	Z+1, r29	; 0x01
     dda:	c0 83       	st	Z, r28
     ddc:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <OSTCBList>
     de0:	f0 91 32 04 	lds	r31, 0x0432	; 0x800432 <OSTCBList+0x1>
     de4:	fb 83       	std	Y+3, r31	; 0x03
     de6:	ea 83       	std	Y+2, r30	; 0x02
     de8:	1d 82       	std	Y+5, r1	; 0x05
     dea:	1c 82       	std	Y+4, r1	; 0x04
     dec:	30 97       	sbiw	r30, 0x00	; 0
     dee:	11 f0       	breq	.+4      	; 0xdf4 <OS_TCBInit+0x8e>
     df0:	d5 83       	std	Z+5, r29	; 0x05
     df2:	c4 83       	std	Z+4, r28	; 0x04
     df4:	d0 93 32 04 	sts	0x0432, r29	; 0x800432 <OSTCBList+0x1>
     df8:	c0 93 31 04 	sts	0x0431, r28	; 0x800431 <OSTCBList>
     dfc:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <OSRdyGrp>
     e00:	9d 85       	ldd	r25, Y+13	; 0x0d
     e02:	89 2b       	or	r24, r25
     e04:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <OSRdyGrp>
     e08:	eb 85       	ldd	r30, Y+11	; 0x0b
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	e3 5c       	subi	r30, 0xC3	; 195
     e0e:	fb 4f       	sbci	r31, 0xFB	; 251
     e10:	80 81       	ld	r24, Z
     e12:	9c 85       	ldd	r25, Y+12	; 0x0c
     e14:	89 2b       	or	r24, r25
     e16:	80 83       	st	Z, r24
     e18:	78 94       	sei
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	08 95       	ret
     e24:	78 94       	sei
     e26:	86 e4       	ldi	r24, 0x46	; 70
     e28:	f9 cf       	rjmp	.-14     	; 0xe1c <OS_TCBInit+0xb6>

00000e2a <OSTaskCreate>:
     e2a:	9f 92       	push	r9
     e2c:	af 92       	push	r10
     e2e:	bf 92       	push	r11
     e30:	cf 92       	push	r12
     e32:	df 92       	push	r13
     e34:	ef 92       	push	r14
     e36:	ff 92       	push	r15
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	f8 94       	cli
     e42:	c2 2f       	mov	r28, r18
     e44:	d0 e0       	ldi	r29, 0x00	; 0
     e46:	cc 0f       	add	r28, r28
     e48:	dd 1f       	adc	r29, r29
     e4a:	cd 57       	subi	r28, 0x7D	; 125
     e4c:	da 4f       	sbci	r29, 0xFA	; 250
     e4e:	e8 81       	ld	r30, Y
     e50:	f9 81       	ldd	r31, Y+1	; 0x01
     e52:	ef 2b       	or	r30, r31
     e54:	09 f0       	breq	.+2      	; 0xe58 <OSTaskCreate+0x2e>
     e56:	3b c0       	rjmp	.+118    	; 0xece <OSTaskCreate+0xa4>
     e58:	92 2e       	mov	r9, r18
     e5a:	21 e0       	ldi	r18, 0x01	; 1
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	39 83       	std	Y+1, r19	; 0x01
     e60:	28 83       	st	Y, r18
     e62:	78 94       	sei
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	0e 94 f7 04 	call	0x9ee	; 0x9ee <OSTaskStkInit>
     e6c:	b1 2c       	mov	r11, r1
     e6e:	a1 2c       	mov	r10, r1
     e70:	d1 2c       	mov	r13, r1
     e72:	c1 2c       	mov	r12, r1
     e74:	e1 2c       	mov	r14, r1
     e76:	f1 2c       	mov	r15, r1
     e78:	87 01       	movw	r16, r14
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	40 e0       	ldi	r20, 0x00	; 0
     e82:	bc 01       	movw	r22, r24
     e84:	89 2d       	mov	r24, r9
     e86:	0e 94 b3 06 	call	0xd66	; 0xd66 <OS_TCBInit>
     e8a:	18 2f       	mov	r17, r24
     e8c:	81 11       	cpse	r24, r1
     e8e:	1a c0       	rjmp	.+52     	; 0xec4 <OSTaskCreate+0x9a>
     e90:	f8 94       	cli
     e92:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <OSTaskCtr>
     e96:	8f 5f       	subi	r24, 0xFF	; 255
     e98:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <OSTaskCtr>
     e9c:	78 94       	sei
     e9e:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	11 f4       	brne	.+4      	; 0xeaa <OSTaskCreate+0x80>
     ea6:	0e 94 32 06 	call	0xc64	; 0xc64 <OS_Sched>
     eaa:	81 2f       	mov	r24, r17
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	df 90       	pop	r13
     eba:	cf 90       	pop	r12
     ebc:	bf 90       	pop	r11
     ebe:	af 90       	pop	r10
     ec0:	9f 90       	pop	r9
     ec2:	08 95       	ret
     ec4:	f8 94       	cli
     ec6:	19 82       	std	Y+1, r1	; 0x01
     ec8:	18 82       	st	Y, r1
     eca:	78 94       	sei
     ecc:	ee cf       	rjmp	.-36     	; 0xeaa <OSTaskCreate+0x80>
     ece:	78 94       	sei
     ed0:	18 e2       	ldi	r17, 0x28	; 40
     ed2:	eb cf       	rjmp	.-42     	; 0xeaa <OSTaskCreate+0x80>

00000ed4 <OSInit>:
     ed4:	0e 94 46 05 	call	0xa8c	; 0xa8c <OSInitHookBegin>
     ed8:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <OSIntNesting>
     edc:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <OSLockNesting>
     ee0:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <OSTaskCtr>
     ee4:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <OSRunning>
     ee8:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <OSCtxSwCtr>
     eec:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <OSCtxSwCtr+0x1>
     ef0:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <OSCtxSwCtr+0x2>
     ef4:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <OSCtxSwCtr+0x3>
     ef8:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <OSIdleCtr>
     efc:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <OSIdleCtr+0x1>
     f00:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <OSIdleCtr+0x2>
     f04:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <OSIdleCtr+0x3>
     f08:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <OSRdyGrp>
     f0c:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <OSRdyTbl>
     f10:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <OSRdyTbl+0x1>
     f14:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <OSRdyTbl+0x2>
     f18:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <OSPrioCur>
     f1c:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <OSPrioHighRdy>
     f20:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <OSTCBHighRdy+0x1>
     f24:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <OSTCBHighRdy>
     f28:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <OSTCBCur+0x1>
     f2c:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <OSTCBCur>
     f30:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <OSTCBList+0x1>
     f34:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <OSTCBList>
     f38:	e3 e8       	ldi	r30, 0x83	; 131
     f3a:	f5 e0       	ldi	r31, 0x05	; 5
     f3c:	11 92       	st	Z+, r1
     f3e:	11 92       	st	Z+, r1
     f40:	85 e0       	ldi	r24, 0x05	; 5
     f42:	e5 3a       	cpi	r30, 0xA5	; 165
     f44:	f8 07       	cpc	r31, r24
     f46:	d1 f7       	brne	.-12     	; 0xf3c <OSInit+0x68>
     f48:	e4 e8       	ldi	r30, 0x84	; 132
     f4a:	f4 e0       	ldi	r31, 0x04	; 4
     f4c:	cf 01       	movw	r24, r30
     f4e:	0f 96       	adiw	r24, 0x0f	; 15
     f50:	93 83       	std	Z+3, r25	; 0x03
     f52:	82 83       	std	Z+2, r24	; 0x02
     f54:	fc 01       	movw	r30, r24
     f56:	85 e0       	ldi	r24, 0x05	; 5
     f58:	e4 37       	cpi	r30, 0x74	; 116
     f5a:	f8 07       	cpc	r31, r24
     f5c:	b9 f7       	brne	.-18     	; 0xf4c <OSInit+0x78>
     f5e:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <OSTCBTbl+0xf3>
     f62:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <OSTCBTbl+0xf2>
     f66:	84 e8       	ldi	r24, 0x84	; 132
     f68:	94 e0       	ldi	r25, 0x04	; 4
     f6a:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <OSTCBFreeList+0x1>
     f6e:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <OSTCBFreeList>
     f72:	20 e1       	ldi	r18, 0x10	; 16
     f74:	43 e8       	ldi	r20, 0x83	; 131
     f76:	54 e0       	ldi	r21, 0x04	; 4
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	8a e4       	ldi	r24, 0x4A	; 74
     f7e:	95 e0       	ldi	r25, 0x05	; 5
     f80:	0e 94 15 07 	call	0xe2a	; 0xe2a <OSTaskCreate>
     f84:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <OSInitHookEnd>

00000f88 <OSTaskDel>:
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	f0 90 41 04 	lds	r15, 0x0441	; 0x800441 <OSIntNesting>
     f96:	f1 10       	cpse	r15, r1
     f98:	76 c0       	rjmp	.+236    	; 0x1086 <OSTaskDel+0xfe>
     f9a:	f8 94       	cli
     f9c:	8f 3f       	cpi	r24, 0xFF	; 255
     f9e:	29 f4       	brne	.+10     	; 0xfaa <OSTaskDel+0x22>
     fa0:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <OSTCBCur>
     fa4:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <OSTCBCur+0x1>
     fa8:	81 85       	ldd	r24, Z+9	; 0x09
     faa:	08 2f       	mov	r16, r24
     fac:	10 e0       	ldi	r17, 0x00	; 0
     fae:	00 0f       	add	r16, r16
     fb0:	11 1f       	adc	r17, r17
     fb2:	f8 01       	movw	r30, r16
     fb4:	ed 57       	subi	r30, 0x7D	; 125
     fb6:	fa 4f       	sbci	r31, 0xFA	; 250
     fb8:	c0 81       	ld	r28, Z
     fba:	d1 81       	ldd	r29, Z+1	; 0x01
     fbc:	20 97       	sbiw	r28, 0x00	; 0
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <OSTaskDel+0x3a>
     fc0:	5e c0       	rjmp	.+188    	; 0x107e <OSTaskDel+0xf6>
     fc2:	eb 85       	ldd	r30, Y+11	; 0x0b
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	8c 85       	ldd	r24, Y+12	; 0x0c
     fc8:	80 95       	com	r24
     fca:	e3 5c       	subi	r30, 0xC3	; 195
     fcc:	fb 4f       	sbci	r31, 0xFB	; 251
     fce:	90 81       	ld	r25, Z
     fd0:	89 23       	and	r24, r25
     fd2:	80 83       	st	Z, r24
     fd4:	81 11       	cpse	r24, r1
     fd6:	08 c0       	rjmp	.+16     	; 0xfe8 <OSTaskDel+0x60>
     fd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fda:	98 2f       	mov	r25, r24
     fdc:	90 95       	com	r25
     fde:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <OSRdyGrp>
     fe2:	89 23       	and	r24, r25
     fe4:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <OSRdyGrp>
     fe8:	1f 82       	std	Y+7, r1	; 0x07
     fea:	1e 82       	std	Y+6, r1	; 0x06
     fec:	18 86       	std	Y+8, r1	; 0x08
     fee:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSLockNesting>
     ff2:	8f 3f       	cpi	r24, 0xFF	; 255
     ff4:	19 f0       	breq	.+6      	; 0xffc <OSTaskDel+0x74>
     ff6:	8f 5f       	subi	r24, 0xFF	; 255
     ff8:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <OSLockNesting>
     ffc:	78 94       	sei
     ffe:	f8 94       	cli
    1000:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSLockNesting>
    1004:	88 23       	and	r24, r24
    1006:	19 f0       	breq	.+6      	; 0x100e <OSTaskDel+0x86>
    1008:	81 50       	subi	r24, 0x01	; 1
    100a:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <OSLockNesting>
    100e:	ce 01       	movw	r24, r28
    1010:	0e 94 42 05 	call	0xa84	; 0xa84 <OSTaskDelHook>
    1014:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <OSTaskCtr>
    1018:	81 50       	subi	r24, 0x01	; 1
    101a:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <OSTaskCtr>
    101e:	f8 01       	movw	r30, r16
    1020:	ed 57       	subi	r30, 0x7D	; 125
    1022:	fa 4f       	sbci	r31, 0xFA	; 250
    1024:	11 82       	std	Z+1, r1	; 0x01
    1026:	10 82       	st	Z, r1
    1028:	ec 81       	ldd	r30, Y+4	; 0x04
    102a:	fd 81       	ldd	r31, Y+5	; 0x05
    102c:	aa 81       	ldd	r26, Y+2	; 0x02
    102e:	bb 81       	ldd	r27, Y+3	; 0x03
    1030:	30 97       	sbiw	r30, 0x00	; 0
    1032:	e1 f4       	brne	.+56     	; 0x106c <OSTaskDel+0xe4>
    1034:	15 96       	adiw	r26, 0x05	; 5
    1036:	1c 92       	st	X, r1
    1038:	1e 92       	st	-X, r1
    103a:	14 97       	sbiw	r26, 0x04	; 4
    103c:	b0 93 32 04 	sts	0x0432, r27	; 0x800432 <OSTCBList+0x1>
    1040:	a0 93 31 04 	sts	0x0431, r26	; 0x800431 <OSTCBList>
    1044:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <OSTCBFreeList>
    1048:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <OSTCBFreeList+0x1>
    104c:	9b 83       	std	Y+3, r25	; 0x03
    104e:	8a 83       	std	Y+2, r24	; 0x02
    1050:	d0 93 38 04 	sts	0x0438, r29	; 0x800438 <OSTCBFreeList+0x1>
    1054:	c0 93 37 04 	sts	0x0437, r28	; 0x800437 <OSTCBFreeList>
    1058:	78 94       	sei
    105a:	0e 94 32 06 	call	0xc64	; 0xc64 <OS_Sched>
    105e:	8f 2d       	mov	r24, r15
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	08 95       	ret
    106c:	b3 83       	std	Z+3, r27	; 0x03
    106e:	a2 83       	std	Z+2, r26	; 0x02
    1070:	aa 81       	ldd	r26, Y+2	; 0x02
    1072:	bb 81       	ldd	r27, Y+3	; 0x03
    1074:	15 96       	adiw	r26, 0x05	; 5
    1076:	fc 93       	st	X, r31
    1078:	ee 93       	st	-X, r30
    107a:	14 97       	sbiw	r26, 0x04	; 4
    107c:	e3 cf       	rjmp	.-58     	; 0x1044 <OSTaskDel+0xbc>
    107e:	78 94       	sei
    1080:	9c e3       	ldi	r25, 0x3C	; 60
    1082:	f9 2e       	mov	r15, r25
    1084:	ec cf       	rjmp	.-40     	; 0x105e <OSTaskDel+0xd6>
    1086:	8f e3       	ldi	r24, 0x3F	; 63
    1088:	f8 2e       	mov	r15, r24
    108a:	e9 cf       	rjmp	.-46     	; 0x105e <OSTaskDel+0xd6>

0000108c <OSTaskDelReq>:
    108c:	8f 3f       	cpi	r24, 0xFF	; 255
    108e:	41 f4       	brne	.+16     	; 0x10a0 <OSTaskDelReq+0x14>
    1090:	f8 94       	cli
    1092:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <OSTCBCur>
    1096:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <OSTCBCur+0x1>
    109a:	86 85       	ldd	r24, Z+14	; 0x0e
    109c:	78 94       	sei
    109e:	08 95       	ret
    10a0:	f8 94       	cli
    10a2:	e8 2f       	mov	r30, r24
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	ee 0f       	add	r30, r30
    10a8:	ff 1f       	adc	r31, r31
    10aa:	ed 57       	subi	r30, 0x7D	; 125
    10ac:	fa 4f       	sbci	r31, 0xFA	; 250
    10ae:	01 90       	ld	r0, Z+
    10b0:	f0 81       	ld	r31, Z
    10b2:	e0 2d       	mov	r30, r0
    10b4:	8b e0       	ldi	r24, 0x0B	; 11
    10b6:	30 97       	sbiw	r30, 0x00	; 0
    10b8:	89 f3       	breq	.-30     	; 0x109c <OSTaskDelReq+0x10>
    10ba:	8e e3       	ldi	r24, 0x3E	; 62
    10bc:	86 87       	std	Z+14, r24	; 0x0e
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	ed cf       	rjmp	.-38     	; 0x109c <OSTaskDelReq+0x10>

000010c2 <OSTimeDly>:
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	11 f0       	breq	.+4      	; 0x10ca <OSTimeDly+0x8>
    10c6:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <OSTimeDly.part.0>
    10ca:	08 95       	ret

000010cc <OSTimeDlyHMSM>:
    10cc:	cf 92       	push	r12
    10ce:	df 92       	push	r13
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	81 11       	cpse	r24, r1
    10d6:	0d c0       	rjmp	.+26     	; 0x10f2 <OSTimeDlyHMSM+0x26>
    10d8:	61 11       	cpse	r22, r1
    10da:	0b c0       	rjmp	.+22     	; 0x10f2 <OSTimeDlyHMSM+0x26>
    10dc:	41 11       	cpse	r20, r1
    10de:	0c c0       	rjmp	.+24     	; 0x10f8 <OSTimeDlyHMSM+0x2c>
    10e0:	21 15       	cp	r18, r1
    10e2:	31 05       	cpc	r19, r1
    10e4:	61 f4       	brne	.+24     	; 0x10fe <OSTimeDlyHMSM+0x32>
    10e6:	84 e5       	ldi	r24, 0x54	; 84
    10e8:	ff 90       	pop	r15
    10ea:	ef 90       	pop	r14
    10ec:	df 90       	pop	r13
    10ee:	cf 90       	pop	r12
    10f0:	08 95       	ret
    10f2:	6c 33       	cpi	r22, 0x3C	; 60
    10f4:	08 f0       	brcs	.+2      	; 0x10f8 <OSTimeDlyHMSM+0x2c>
    10f6:	4f c0       	rjmp	.+158    	; 0x1196 <OSTimeDlyHMSM+0xca>
    10f8:	4c 33       	cpi	r20, 0x3C	; 60
    10fa:	08 f0       	brcs	.+2      	; 0x10fe <OSTimeDlyHMSM+0x32>
    10fc:	4e c0       	rjmp	.+156    	; 0x119a <OSTimeDlyHMSM+0xce>
    10fe:	28 3e       	cpi	r18, 0xE8	; 232
    1100:	93 e0       	ldi	r25, 0x03	; 3
    1102:	39 07       	cpc	r19, r25
    1104:	08 f0       	brcs	.+2      	; 0x1108 <OSTimeDlyHMSM+0x3c>
    1106:	4b c0       	rjmp	.+150    	; 0x119e <OSTimeDlyHMSM+0xd2>
    1108:	f9 01       	movw	r30, r18
    110a:	58 2f       	mov	r21, r24
    110c:	26 2f       	mov	r18, r22
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	ac e3       	ldi	r26, 0x3C	; 60
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
    1118:	6b 01       	movw	r12, r22
    111a:	7c 01       	movw	r14, r24
    111c:	c4 0e       	add	r12, r20
    111e:	d1 1c       	adc	r13, r1
    1120:	e1 1c       	adc	r14, r1
    1122:	f1 1c       	adc	r15, r1
    1124:	25 2f       	mov	r18, r21
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	a0 e1       	ldi	r26, 0x10	; 16
    112a:	be e0       	ldi	r27, 0x0E	; 14
    112c:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
    1130:	a7 01       	movw	r20, r14
    1132:	96 01       	movw	r18, r12
    1134:	26 0f       	add	r18, r22
    1136:	37 1f       	adc	r19, r23
    1138:	48 1f       	adc	r20, r24
    113a:	59 1f       	adc	r21, r25
    113c:	a4 e6       	ldi	r26, 0x64	; 100
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__muluhisi3>
    1144:	6b 01       	movw	r12, r22
    1146:	7c 01       	movw	r14, r24
    1148:	9f 01       	movw	r18, r30
    114a:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
    114e:	6c 50       	subi	r22, 0x0C	; 12
    1150:	7e 4f       	sbci	r23, 0xFE	; 254
    1152:	8f 4f       	sbci	r24, 0xFF	; 255
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	28 ee       	ldi	r18, 0xE8	; 232
    1158:	33 e0       	ldi	r19, 0x03	; 3
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	0e 94 21 09 	call	0x1242	; 0x1242 <__udivmodsi4>
    1162:	d7 01       	movw	r26, r14
    1164:	c6 01       	movw	r24, r12
    1166:	82 0f       	add	r24, r18
    1168:	93 1f       	adc	r25, r19
    116a:	a4 1f       	adc	r26, r20
    116c:	b5 1f       	adc	r27, r21
    116e:	7d 01       	movw	r14, r26
    1170:	0e 94 61 08 	call	0x10c2	; 0x10c2 <OSTimeDly>
    1174:	e1 14       	cp	r14, r1
    1176:	f1 04       	cpc	r15, r1
    1178:	11 f4       	brne	.+4      	; 0x117e <OSTimeDlyHMSM+0xb2>
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	b5 cf       	rjmp	.-150    	; 0x10e8 <OSTimeDlyHMSM+0x1c>
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e8       	ldi	r25, 0x80	; 128
    1182:	0e 94 8d 06 	call	0xd1a	; 0xd1a <OSTimeDly.part.0>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e8       	ldi	r25, 0x80	; 128
    118a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <OSTimeDly.part.0>
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	e8 1a       	sub	r14, r24
    1192:	f1 08       	sbc	r15, r1
    1194:	ef cf       	rjmp	.-34     	; 0x1174 <OSTimeDlyHMSM+0xa8>
    1196:	81 e5       	ldi	r24, 0x51	; 81
    1198:	a7 cf       	rjmp	.-178    	; 0x10e8 <OSTimeDlyHMSM+0x1c>
    119a:	82 e5       	ldi	r24, 0x52	; 82
    119c:	a5 cf       	rjmp	.-182    	; 0x10e8 <OSTimeDlyHMSM+0x1c>
    119e:	83 e5       	ldi	r24, 0x53	; 83
    11a0:	a3 cf       	rjmp	.-186    	; 0x10e8 <OSTimeDlyHMSM+0x1c>

000011a2 <main>:

}

int main( void )
{
 robo_Setup(); /* initialize HAL for RoboKar */
    11a2:	0e 94 1c 03 	call	0x638	; 0x638 <robo_Setup>
 OSInit(); /* initialize UCOS-II kernel */
    11a6:	0e 94 6a 07 	call	0xed4	; 0xed4 <OSInit>

 robo_motorSpeed(STOP_SPEED, STOP_SPEED); /* Stop the robot, value STOP_SPEED == 0 */
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	0e 94 3f 02 	call	0x47e	; 0x47e <robo_motorSpeed>
 myrobot.rspeed = STOP_SPEED; /* Initialize myrobot states */
    11b6:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <myrobot+0x1>
    11ba:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <myrobot>
 myrobot.lspeed = STOP_SPEED;
    11be:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <myrobot+0x3>
    11c2:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <myrobot+0x2>
 myrobot.obstacle = 0; /* No collision */
    11c6:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <myrobot+0x4>
 count =0;
    11ca:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <count+0x1>
    11ce:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <count>
 OSTaskCreate(TaskStart, /* create TaskStart Task */
    11d2:	21 e0       	ldi	r18, 0x01	; 1
    11d4:	40 ea       	ldi	r20, 0xA0	; 160
    11d6:	53 e0       	ldi	r21, 0x03	; 3
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	88 e4       	ldi	r24, 0x48	; 72
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	0e 94 15 07 	call	0xe2a	; 0xe2a <OSTaskCreate>
 (void *)0,
 (void *)&TaskStartStk[TASK_STK_SZ - 1],
 TASK_START_PRIO);
 robo_Honk(); robo_wait4goPress(); /* Wait for to GO */
    11e4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <robo_Honk>
    11e8:	0e 94 08 03 	call	0x610	; 0x610 <robo_wait4goPress>
 OSStart(); /* Start multitasking */
    11ec:	0e 94 ce 05 	call	0xb9c	; 0xb9c <OSStart>
    11f0:	ff cf       	rjmp	.-2      	; 0x11f0 <main+0x4e>

000011f2 <__udivmodhi4>:
    11f2:	aa 1b       	sub	r26, r26
    11f4:	bb 1b       	sub	r27, r27
    11f6:	51 e1       	ldi	r21, 0x11	; 17
    11f8:	07 c0       	rjmp	.+14     	; 0x1208 <__udivmodhi4_ep>

000011fa <__udivmodhi4_loop>:
    11fa:	aa 1f       	adc	r26, r26
    11fc:	bb 1f       	adc	r27, r27
    11fe:	a6 17       	cp	r26, r22
    1200:	b7 07       	cpc	r27, r23
    1202:	10 f0       	brcs	.+4      	; 0x1208 <__udivmodhi4_ep>
    1204:	a6 1b       	sub	r26, r22
    1206:	b7 0b       	sbc	r27, r23

00001208 <__udivmodhi4_ep>:
    1208:	88 1f       	adc	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	5a 95       	dec	r21
    120e:	a9 f7       	brne	.-22     	; 0x11fa <__udivmodhi4_loop>
    1210:	80 95       	com	r24
    1212:	90 95       	com	r25
    1214:	bc 01       	movw	r22, r24
    1216:	cd 01       	movw	r24, r26
    1218:	08 95       	ret

0000121a <__divmodhi4>:
    121a:	97 fb       	bst	r25, 7
    121c:	07 2e       	mov	r0, r23
    121e:	16 f4       	brtc	.+4      	; 0x1224 <__divmodhi4+0xa>
    1220:	00 94       	com	r0
    1222:	07 d0       	rcall	.+14     	; 0x1232 <__divmodhi4_neg1>
    1224:	77 fd       	sbrc	r23, 7
    1226:	09 d0       	rcall	.+18     	; 0x123a <__divmodhi4_neg2>
    1228:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__udivmodhi4>
    122c:	07 fc       	sbrc	r0, 7
    122e:	05 d0       	rcall	.+10     	; 0x123a <__divmodhi4_neg2>
    1230:	3e f4       	brtc	.+14     	; 0x1240 <__divmodhi4_exit>

00001232 <__divmodhi4_neg1>:
    1232:	90 95       	com	r25
    1234:	81 95       	neg	r24
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	08 95       	ret

0000123a <__divmodhi4_neg2>:
    123a:	70 95       	com	r23
    123c:	61 95       	neg	r22
    123e:	7f 4f       	sbci	r23, 0xFF	; 255

00001240 <__divmodhi4_exit>:
    1240:	08 95       	ret

00001242 <__udivmodsi4>:
    1242:	a1 e2       	ldi	r26, 0x21	; 33
    1244:	1a 2e       	mov	r1, r26
    1246:	aa 1b       	sub	r26, r26
    1248:	bb 1b       	sub	r27, r27
    124a:	fd 01       	movw	r30, r26
    124c:	0d c0       	rjmp	.+26     	; 0x1268 <__udivmodsi4_ep>

0000124e <__udivmodsi4_loop>:
    124e:	aa 1f       	adc	r26, r26
    1250:	bb 1f       	adc	r27, r27
    1252:	ee 1f       	adc	r30, r30
    1254:	ff 1f       	adc	r31, r31
    1256:	a2 17       	cp	r26, r18
    1258:	b3 07       	cpc	r27, r19
    125a:	e4 07       	cpc	r30, r20
    125c:	f5 07       	cpc	r31, r21
    125e:	20 f0       	brcs	.+8      	; 0x1268 <__udivmodsi4_ep>
    1260:	a2 1b       	sub	r26, r18
    1262:	b3 0b       	sbc	r27, r19
    1264:	e4 0b       	sbc	r30, r20
    1266:	f5 0b       	sbc	r31, r21

00001268 <__udivmodsi4_ep>:
    1268:	66 1f       	adc	r22, r22
    126a:	77 1f       	adc	r23, r23
    126c:	88 1f       	adc	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	1a 94       	dec	r1
    1272:	69 f7       	brne	.-38     	; 0x124e <__udivmodsi4_loop>
    1274:	60 95       	com	r22
    1276:	70 95       	com	r23
    1278:	80 95       	com	r24
    127a:	90 95       	com	r25
    127c:	9b 01       	movw	r18, r22
    127e:	ac 01       	movw	r20, r24
    1280:	bd 01       	movw	r22, r26
    1282:	cf 01       	movw	r24, r30
    1284:	08 95       	ret

00001286 <__umulhisi3>:
    1286:	a2 9f       	mul	r26, r18
    1288:	b0 01       	movw	r22, r0
    128a:	b3 9f       	mul	r27, r19
    128c:	c0 01       	movw	r24, r0
    128e:	a3 9f       	mul	r26, r19
    1290:	70 0d       	add	r23, r0
    1292:	81 1d       	adc	r24, r1
    1294:	11 24       	eor	r1, r1
    1296:	91 1d       	adc	r25, r1
    1298:	b2 9f       	mul	r27, r18
    129a:	70 0d       	add	r23, r0
    129c:	81 1d       	adc	r24, r1
    129e:	11 24       	eor	r1, r1
    12a0:	91 1d       	adc	r25, r1
    12a2:	08 95       	ret

000012a4 <__muluhisi3>:
    12a4:	0e 94 43 09 	call	0x1286	; 0x1286 <__umulhisi3>
    12a8:	a5 9f       	mul	r26, r21
    12aa:	90 0d       	add	r25, r0
    12ac:	b4 9f       	mul	r27, r20
    12ae:	90 0d       	add	r25, r0
    12b0:	a4 9f       	mul	r26, r20
    12b2:	80 0d       	add	r24, r0
    12b4:	91 1d       	adc	r25, r1
    12b6:	11 24       	eor	r1, r1
    12b8:	08 95       	ret

000012ba <_exit>:
    12ba:	f8 94       	cli

000012bc <__stop_program>:
    12bc:	ff cf       	rjmp	.-2      	; 0x12bc <__stop_program>
