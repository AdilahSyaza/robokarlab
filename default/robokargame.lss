
robokargame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  0000120e  000012a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000120e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000389  0080021a  0080021a  000013bc  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001410  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000145e  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000815  00000000  00000000  000029b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a16  00000000  00000000  000031cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00003be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000621  00000000  00000000  00003c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a0  00000000  00000000  00004269  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00004309  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 44 04 	jmp	0x888	; 0x888 <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e0       	ldi	r30, 0x0E	; 14
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 3a       	cpi	r26, 0xA3	; 163
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <main>
      9e:	0c 94 05 09 	jmp	0x120a	; 0x120a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CheckCollision>:
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ) /* obstacle? */
     myrobot.obstacle = 1; /* signal obstacle present */
      a6:	c1 e0       	ldi	r28, 0x01	; 1
/*------High pririority task----------*/
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ) /* obstacle? */
      a8:	0e 94 46 02 	call	0x48c	; 0x48c <robo_proxSensor>
      ac:	01 97       	sbiw	r24, 0x01	; 1
      ae:	51 f4       	brne	.+20     	; 0xc4 <CheckCollision+0x1e>
     myrobot.obstacle = 1; /* signal obstacle present */
      b0:	c0 93 9e 02 	sts	0x029E, r28	; 0x80029e <myrobot+0x4>
 else
     myrobot.obstacle = 0; /* signal no obstacle */

 OSTimeDlyHMSM(0, 0, 0, 100); /* Task period ~ 100 ms */
      b4:	24 e6       	ldi	r18, 0x64	; 100
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	40 e0       	ldi	r20, 0x00	; 0
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 12 08 	call	0x1024	; 0x1024 <OSTimeDlyHMSM>
/*------High pririority task----------*/
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ) /* obstacle? */
      c2:	f2 cf       	rjmp	.-28     	; 0xa8 <CheckCollision+0x2>
     myrobot.obstacle = 1; /* signal obstacle present */
 else
     myrobot.obstacle = 0; /* signal no obstacle */
      c4:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <myrobot+0x4>
      c8:	f5 cf       	rjmp	.-22     	; 0xb4 <CheckCollision+0xe>

000000ca <CntrlMotors>:

 for(;;)
 {
  speed_r = myrobot.rspeed;
  speed_l = myrobot.lspeed;
  robo_motorSpeed(speed_l, speed_r);
      ca:	60 91 9a 02 	lds	r22, 0x029A	; 0x80029a <myrobot>
      ce:	70 91 9b 02 	lds	r23, 0x029B	; 0x80029b <myrobot+0x1>
      d2:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <myrobot+0x2>
      d6:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <myrobot+0x3>
      da:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <robo_motorSpeed>
  OSTimeDlyHMSM(0, 0, 0, 250); /* Task period ~ 250 ms */
      de:	2a ef       	ldi	r18, 0xFA	; 250
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 12 08 	call	0x1024	; 0x1024 <OSTimeDlyHMSM>
      ec:	ee cf       	rjmp	.-36     	; 0xca <CntrlMotors>

000000ee <Navig>:
   myrobot.rspeed = -LOW_SPEED; /* REVERSE */
   myrobot.lspeed = -LOW_SPEED;
  }
  else /* obstacle is far away & no collision */
  {
   myrobot.rspeed = MEDIUM_SPEED; /* move forward with medium speed */
      ee:	c7 e3       	ldi	r28, 0x37	; 55
      f0:	d0 e0       	ldi	r29, 0x00	; 0
{
 for (;;)
 {
  if (myrobot.obstacle == 1) /* If blocked then reverse */
  {
   myrobot.rspeed = -LOW_SPEED; /* REVERSE */
      f2:	0d ed       	ldi	r16, 0xDD	; 221
      f4:	1f ef       	ldi	r17, 0xFF	; 255
  {
    myrobot.rspeed = MEDIUM_SPEED; 
   myrobot.lspeed = HIGH_SPEED; /* corner right */
  }else if (robo_lineSensor() == 6)
  {
    myrobot.rspeed = HIGH_SPEED; 
      f6:	80 e5       	ldi	r24, 0x50	; 80
      f8:	e8 2e       	mov	r14, r24
      fa:	f1 2c       	mov	r15, r1

// for light sensor
  if (robo_lightSensor() > 60) /* it is too bright, I'm photophobia */
  {
   myrobot.rspeed = -LOW_SPEED; /* turn right to avoid */
   myrobot.lspeed = LOW_SPEED;
      fc:	93 e2       	ldi	r25, 0x23	; 35
      fe:	c9 2e       	mov	r12, r25
     100:	d1 2c       	mov	r13, r1

void Navig (void *data)
{
 for (;;)
 {
  if (myrobot.obstacle == 1) /* If blocked then reverse */
     102:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <myrobot+0x4>
     106:	81 30       	cpi	r24, 0x01	; 1
     108:	49 f5       	brne	.+82     	; 0x15c <Navig+0x6e>
  {
   myrobot.rspeed = -LOW_SPEED; /* REVERSE */
     10a:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     10e:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
   myrobot.lspeed = -LOW_SPEED;
     112:	10 93 9d 02 	sts	0x029D, r17	; 0x80029d <myrobot+0x3>
     116:	00 93 9c 02 	sts	0x029C, r16	; 0x80029c <myrobot+0x2>
   myrobot.rspeed = MEDIUM_SPEED; /* move forward with medium speed */
   myrobot.lspeed = MEDIUM_SPEED;
  }

//   for line sensor
  if (robo_lineSensor() == 2 || robo_lineSensor() == 7) /* go straight */
     11a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <robo_lineSensor>
     11e:	02 97       	sbiw	r24, 0x02	; 2
     120:	31 f5       	brne	.+76     	; 0x16e <Navig+0x80>
  {
   myrobot.rspeed = MEDIUM_SPEED;
     122:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     126:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
   myrobot.lspeed = MEDIUM_SPEED;
  }else if (robo_lineSensor() == 1)
  {
    myrobot.rspeed = -LOW_SPEED; /* turn right */
   myrobot.lspeed = MEDIUM_SPEED;
     12a:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <myrobot+0x3>
     12e:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <myrobot+0x2>
  else{
    // off track
  }

// for light sensor
  if (robo_lightSensor() > 60) /* it is too bright, I'm photophobia */
     132:	0e 94 52 02 	call	0x4a4	; 0x4a4 <robo_lightSensor>
     136:	cd 97       	sbiw	r24, 0x3d	; 61
     138:	0c f4       	brge	.+2      	; 0x13c <Navig+0x4e>
     13a:	53 c0       	rjmp	.+166    	; 0x1e2 <Navig+0xf4>
  {
   myrobot.rspeed = -LOW_SPEED; /* turn right to avoid */
     13c:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     140:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
   myrobot.lspeed = LOW_SPEED;
     144:	d0 92 9d 02 	sts	0x029D, r13	; 0x80029d <myrobot+0x3>
     148:	c0 92 9c 02 	sts	0x029C, r12	; 0x80029c <myrobot+0x2>
  } else{
    myrobot.rspeed = MEDIUM_SPEED; /* move forward with medium speed */
   myrobot.lspeed = MEDIUM_SPEED;
  }

  OSTimeDlyHMSM(0, 0, 0, 50); /* Task period ~ 500 ms */
     14c:	22 e3       	ldi	r18, 0x32	; 50
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	40 e0       	ldi	r20, 0x00	; 0
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	0e 94 12 08 	call	0x1024	; 0x1024 <OSTimeDlyHMSM>

void Navig (void *data)
{
 for (;;)
 {
  if (myrobot.obstacle == 1) /* If blocked then reverse */
     15a:	d3 cf       	rjmp	.-90     	; 0x102 <Navig+0x14>
   myrobot.rspeed = -LOW_SPEED; /* REVERSE */
   myrobot.lspeed = -LOW_SPEED;
  }
  else /* obstacle is far away & no collision */
  {
   myrobot.rspeed = MEDIUM_SPEED; /* move forward with medium speed */
     15c:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     160:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
   myrobot.lspeed = MEDIUM_SPEED;
     164:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <myrobot+0x3>
     168:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <myrobot+0x2>
     16c:	d6 cf       	rjmp	.-84     	; 0x11a <Navig+0x2c>
  }

//   for line sensor
  if (robo_lineSensor() == 2 || robo_lineSensor() == 7) /* go straight */
     16e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <robo_lineSensor>
     172:	07 97       	sbiw	r24, 0x07	; 7
     174:	b1 f2       	breq	.-84     	; 0x122 <Navig+0x34>
  {
   myrobot.rspeed = MEDIUM_SPEED;
   myrobot.lspeed = MEDIUM_SPEED;
  }else if (robo_lineSensor() == 1)
     176:	0e 94 69 02 	call	0x4d2	; 0x4d2 <robo_lineSensor>
     17a:	01 97       	sbiw	r24, 0x01	; 1
     17c:	29 f4       	brne	.+10     	; 0x188 <Navig+0x9a>
  {
    myrobot.rspeed = -LOW_SPEED; /* turn right */
     17e:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     182:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
     186:	d1 cf       	rjmp	.-94     	; 0x12a <Navig+0x3c>
   myrobot.lspeed = MEDIUM_SPEED;
  }else if (robo_lineSensor() == 4)
     188:	0e 94 69 02 	call	0x4d2	; 0x4d2 <robo_lineSensor>
     18c:	04 97       	sbiw	r24, 0x04	; 4
     18e:	49 f4       	brne	.+18     	; 0x1a2 <Navig+0xb4>
  {
    myrobot.rspeed = MEDIUM_SPEED; 
     190:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     194:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
    myrobot.rspeed = HIGH_SPEED; 
   myrobot.lspeed = MEDIUM_SPEED; /* corner left */
  }else if (robo_lineSensor() == 0)
  {
    myrobot.rspeed = -LOW_SPEED; 
   myrobot.lspeed = -LOW_SPEED; /* stranded straight */
     198:	10 93 9d 02 	sts	0x029D, r17	; 0x80029d <myrobot+0x3>
     19c:	00 93 9c 02 	sts	0x029C, r16	; 0x80029c <myrobot+0x2>
     1a0:	c8 cf       	rjmp	.-112    	; 0x132 <Navig+0x44>
   myrobot.lspeed = MEDIUM_SPEED;
  }else if (robo_lineSensor() == 4)
  {
    myrobot.rspeed = MEDIUM_SPEED; 
   myrobot.lspeed = -LOW_SPEED; /* turn left */
  }else if (robo_lineSensor() == 3)
     1a2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <robo_lineSensor>
     1a6:	03 97       	sbiw	r24, 0x03	; 3
     1a8:	49 f4       	brne	.+18     	; 0x1bc <Navig+0xce>
  {
    myrobot.rspeed = MEDIUM_SPEED; 
     1aa:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     1ae:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
   myrobot.lspeed = HIGH_SPEED; /* corner right */
     1b2:	f0 92 9d 02 	sts	0x029D, r15	; 0x80029d <myrobot+0x3>
     1b6:	e0 92 9c 02 	sts	0x029C, r14	; 0x80029c <myrobot+0x2>
     1ba:	bb cf       	rjmp	.-138    	; 0x132 <Navig+0x44>
  }else if (robo_lineSensor() == 6)
     1bc:	0e 94 69 02 	call	0x4d2	; 0x4d2 <robo_lineSensor>
     1c0:	06 97       	sbiw	r24, 0x06	; 6
     1c2:	29 f4       	brne	.+10     	; 0x1ce <Navig+0xe0>
  {
    myrobot.rspeed = HIGH_SPEED; 
     1c4:	f0 92 9b 02 	sts	0x029B, r15	; 0x80029b <myrobot+0x1>
     1c8:	e0 92 9a 02 	sts	0x029A, r14	; 0x80029a <myrobot>
     1cc:	ae cf       	rjmp	.-164    	; 0x12a <Navig+0x3c>
   myrobot.lspeed = MEDIUM_SPEED; /* corner left */
  }else if (robo_lineSensor() == 0)
     1ce:	0e 94 69 02 	call	0x4d2	; 0x4d2 <robo_lineSensor>
     1d2:	89 2b       	or	r24, r25
     1d4:	09 f0       	breq	.+2      	; 0x1d8 <Navig+0xea>
     1d6:	ad cf       	rjmp	.-166    	; 0x132 <Navig+0x44>
  {
    myrobot.rspeed = -LOW_SPEED; 
     1d8:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     1dc:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
     1e0:	db cf       	rjmp	.-74     	; 0x198 <Navig+0xaa>
  if (robo_lightSensor() > 60) /* it is too bright, I'm photophobia */
  {
   myrobot.rspeed = -LOW_SPEED; /* turn right to avoid */
   myrobot.lspeed = LOW_SPEED;
  } else{
    myrobot.rspeed = MEDIUM_SPEED; /* move forward with medium speed */
     1e2:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     1e6:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
   myrobot.lspeed = MEDIUM_SPEED;
     1ea:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <myrobot+0x3>
     1ee:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <myrobot+0x2>
     1f2:	ac cf       	rjmp	.-168    	; 0x14c <Navig+0x5e>

000001f4 <TaskStart>:

/*------Highest pririority task----------*/
/* Create all other tasks here */
void TaskStart( void *data )
{
 OS_ticks_init(); /* enable RTOS timer tick */
     1f4:	0e 94 b9 02 	call	0x572	; 0x572 <OS_ticks_init>

 OSTaskCreate(CheckCollision , /* Task function */
     1f8:	22 e0       	ldi	r18, 0x02	; 2
     1fa:	49 e9       	ldi	r20, 0x99	; 153
     1fc:	52 e0       	ldi	r21, 0x02	; 2
     1fe:	70 e0       	ldi	r23, 0x00	; 0
     200:	60 e0       	ldi	r22, 0x00	; 0
     202:	83 e5       	ldi	r24, 0x53	; 83
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 c1 06 	call	0xd82	; 0xd82 <OSTaskCreate>
 (void *)0, /* nothing passed to task */
 (void *)&ChkCollideStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_CHKCOLLIDE_PRIO); /* priority of task */

 OSTaskCreate(CntrlMotors , /* Task function */
     20a:	23 e0       	ldi	r18, 0x03	; 3
     20c:	4e e1       	ldi	r20, 0x1E	; 30
     20e:	53 e0       	ldi	r21, 0x03	; 3
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	85 e6       	ldi	r24, 0x65	; 101
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 c1 06 	call	0xd82	; 0xd82 <OSTaskCreate>
 (void *)0, /* nothing passed to task */
 (void *)&CtrlmotorStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_CTRLMOTOR_PRIO); /* priority of task */

 OSTaskCreate(Navig, /* Task function */
     21c:	24 e0       	ldi	r18, 0x04	; 4
     21e:	4e e1       	ldi	r20, 0x1E	; 30
     220:	54 e0       	ldi	r21, 0x04	; 4
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	87 e7       	ldi	r24, 0x77	; 119
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 c1 06 	call	0xd82	; 0xd82 <OSTaskCreate>
 TASK_NAVIG_PRIO); /* priority of task */

 while(1)
 {
  OSTimeDlyHMSM(0, 0, 5, 0); /* Task period ~ 5 secs, argument position: HOURS, MINUTES, SECONDS, and MILLISECONDS S*/ 
  robo_LED_toggle(); /* Show that we are alive */
     22e:	c1 e0       	ldi	r28, 0x01	; 1
 (void *)&NavigStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_NAVIG_PRIO); /* priority of task */

 while(1)
 {
  OSTimeDlyHMSM(0, 0, 5, 0); /* Task period ~ 5 secs, argument position: HOURS, MINUTES, SECONDS, and MILLISECONDS S*/ 
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	45 e0       	ldi	r20, 0x05	; 5
     236:	60 e0       	ldi	r22, 0x00	; 0
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	0e 94 12 08 	call	0x1024	; 0x1024 <OSTimeDlyHMSM>
  robo_LED_toggle(); /* Show that we are alive */
     23e:	85 b1       	in	r24, 0x05	; 5
     240:	8c 27       	eor	r24, r28
     242:	85 b9       	out	0x05, r24	; 5
     244:	f5 cf       	rjmp	.-22     	; 0x230 <TaskStart+0x3c>

00000246 <ADC_init>:
     246:	80 e4       	ldi	r24, 0x40	; 64
     248:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     24c:	86 e8       	ldi	r24, 0x86	; 134
     24e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     252:	08 95       	ret

00000254 <ADC_read>:
     254:	f8 94       	cli
     256:	80 64       	ori	r24, 0x40	; 64
     258:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     25c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     260:	80 64       	ori	r24, 0x40	; 64
     262:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     266:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     26a:	84 ff       	sbrs	r24, 4
     26c:	fc cf       	rjmp	.-8      	; 0x266 <ADC_read+0x12>
     26e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     272:	80 61       	ori	r24, 0x10	; 16
     274:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     278:	78 94       	sei
     27a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     27e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     282:	93 70       	andi	r25, 0x03	; 3
     284:	08 95       	ret

00000286 <PWM8_write>:
     286:	81 11       	cpse	r24, r1
     288:	05 c0       	rjmp	.+10     	; 0x294 <PWM8_write+0xe>
     28a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     28e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     292:	08 95       	ret
     294:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     298:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     29c:	08 95       	ret

0000029e <motor_init>:
     29e:	8a b1       	in	r24, 0x0a	; 10
     2a0:	80 6f       	ori	r24, 0xF0	; 240
     2a2:	8a b9       	out	0x0a, r24	; 10
     2a4:	8b b1       	in	r24, 0x0b	; 11
     2a6:	8f 70       	andi	r24, 0x0F	; 15
     2a8:	8b b9       	out	0x0b, r24	; 11
     2aa:	81 ea       	ldi	r24, 0xA1	; 161
     2ac:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     2b0:	83 e0       	ldi	r24, 0x03	; 3
     2b2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     2b6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     2ba:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     2be:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     2c2:	a8 e8       	ldi	r26, 0x88	; 136
     2c4:	b0 e0       	ldi	r27, 0x00	; 0
     2c6:	1c 92       	st	X, r1
     2c8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     2cc:	ea e8       	ldi	r30, 0x8A	; 138
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	10 82       	st	Z, r1
     2d2:	84 b1       	in	r24, 0x04	; 4
     2d4:	86 60       	ori	r24, 0x06	; 6
     2d6:	84 b9       	out	0x04, r24	; 4
     2d8:	11 96       	adiw	r26, 0x01	; 1
     2da:	1c 92       	st	X, r1
     2dc:	1e 92       	st	-X, r1
     2de:	11 82       	std	Z+1, r1	; 0x01
     2e0:	10 82       	st	Z, r1
     2e2:	08 95       	ret

000002e4 <motor_set_speed>:
     2e4:	77 ff       	sbrs	r23, 7
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <motor_set_speed+0x8>
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	65 36       	cpi	r22, 0x65	; 101
     2ee:	71 05       	cpc	r23, r1
     2f0:	14 f0       	brlt	.+4      	; 0x2f6 <motor_set_speed+0x12>
     2f2:	64 e6       	ldi	r22, 0x64	; 100
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	9b 01       	movw	r18, r22
     2f8:	22 0f       	add	r18, r18
     2fa:	33 1f       	adc	r19, r19
     2fc:	75 95       	asr	r23
     2fe:	67 95       	ror	r22
     300:	62 0f       	add	r22, r18
     302:	73 1f       	adc	r23, r19
     304:	81 11       	cpse	r24, r1
     306:	09 c0       	rjmp	.+18     	; 0x31a <motor_set_speed+0x36>
     308:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     30c:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     310:	70 93 20 04 	sts	0x0420, r23	; 0x800420 <rightWst+0x1>
     314:	60 93 1f 04 	sts	0x041F, r22	; 0x80041f <rightWst>
     318:	08 95       	ret
     31a:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     31e:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     322:	70 93 24 04 	sts	0x0424, r23	; 0x800424 <leftWst+0x1>
     326:	60 93 23 04 	sts	0x0423, r22	; 0x800423 <leftWst>
     32a:	08 95       	ret

0000032c <motor_set_dir>:
     32c:	cf 93       	push	r28
     32e:	c6 2f       	mov	r28, r22
     330:	26 2f       	mov	r18, r22
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	81 11       	cpse	r24, r1
     336:	2b c0       	rjmp	.+86     	; 0x38e <motor_set_dir+0x62>
     338:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <rightWst+0x2>
     33c:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <rightWst+0x3>
     340:	82 17       	cp	r24, r18
     342:	93 07       	cpc	r25, r19
     344:	59 f0       	breq	.+22     	; 0x35c <motor_set_dir+0x30>
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <motor_set_speed>
     350:	8f e9       	ldi	r24, 0x9F	; 159
     352:	9f e0       	ldi	r25, 0x0F	; 15
     354:	01 97       	sbiw	r24, 0x01	; 1
     356:	f1 f7       	brne	.-4      	; 0x354 <motor_set_dir+0x28>
     358:	00 c0       	rjmp	.+0      	; 0x35a <motor_set_dir+0x2e>
     35a:	00 00       	nop
     35c:	c1 11       	cpse	r28, r1
     35e:	0e c0       	rjmp	.+28     	; 0x37c <motor_set_dir+0x50>
     360:	5e 98       	cbi	0x0b, 6	; 11
     362:	5f 9a       	sbi	0x0b, 7	; 11
     364:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <rightWst+0x3>
     368:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <rightWst+0x2>
     36c:	8f e3       	ldi	r24, 0x3F	; 63
     36e:	9c e9       	ldi	r25, 0x9C	; 156
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	f1 f7       	brne	.-4      	; 0x370 <motor_set_dir+0x44>
     374:	00 c0       	rjmp	.+0      	; 0x376 <motor_set_dir+0x4a>
     376:	00 00       	nop
     378:	cf 91       	pop	r28
     37a:	08 95       	ret
     37c:	5e 9a       	sbi	0x0b, 6	; 11
     37e:	5f 98       	cbi	0x0b, 7	; 11
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <rightWst+0x3>
     388:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <rightWst+0x2>
     38c:	ef cf       	rjmp	.-34     	; 0x36c <motor_set_dir+0x40>
     38e:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <leftWst+0x2>
     392:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <leftWst+0x3>
     396:	82 17       	cp	r24, r18
     398:	93 07       	cpc	r25, r19
     39a:	59 f0       	breq	.+22     	; 0x3b2 <motor_set_dir+0x86>
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	0e 94 72 01 	call	0x2e4	; 0x2e4 <motor_set_speed>
     3a6:	8f e9       	ldi	r24, 0x9F	; 159
     3a8:	9f e0       	ldi	r25, 0x0F	; 15
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <motor_set_dir+0x7e>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <motor_set_dir+0x84>
     3b0:	00 00       	nop
     3b2:	c1 11       	cpse	r28, r1
     3b4:	07 c0       	rjmp	.+14     	; 0x3c4 <motor_set_dir+0x98>
     3b6:	5c 9a       	sbi	0x0b, 4	; 11
     3b8:	5d 98       	cbi	0x0b, 5	; 11
     3ba:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <leftWst+0x3>
     3be:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <leftWst+0x2>
     3c2:	d4 cf       	rjmp	.-88     	; 0x36c <motor_set_dir+0x40>
     3c4:	5c 98       	cbi	0x0b, 4	; 11
     3c6:	5d 9a       	sbi	0x0b, 5	; 11
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <leftWst+0x3>
     3d0:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <leftWst+0x2>
     3d4:	cb cf       	rjmp	.-106    	; 0x36c <motor_set_dir+0x40>

000003d6 <robo_motorSpeed>:
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	ec 01       	movw	r28, r24
     3e0:	8b 01       	movw	r16, r22
     3e2:	97 ff       	sbrs	r25, 7
     3e4:	1c c0       	rjmp	.+56     	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	0e 94 96 01 	call	0x32c	; 0x32c <motor_set_dir>
     3ee:	d1 95       	neg	r29
     3f0:	c1 95       	neg	r28
     3f2:	d1 09       	sbc	r29, r1
     3f4:	17 ff       	sbrs	r17, 7
     3f6:	18 c0       	rjmp	.+48     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
     3f8:	61 e0       	ldi	r22, 0x01	; 1
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	0e 94 96 01 	call	0x32c	; 0x32c <motor_set_dir>
     400:	11 95       	neg	r17
     402:	01 95       	neg	r16
     404:	11 09       	sbc	r17, r1
     406:	b8 01       	movw	r22, r16
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <motor_set_speed>
     40e:	be 01       	movw	r22, r28
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <motor_set_speed>
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	0e 94 96 01 	call	0x32c	; 0x32c <motor_set_dir>
     426:	e6 cf       	rjmp	.-52     	; 0x3f4 <robo_motorSpeed+0x1e>
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	0e 94 96 01 	call	0x32c	; 0x32c <motor_set_dir>
     430:	ea cf       	rjmp	.-44     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>

00000432 <USART0_init>:
     432:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     436:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     43a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     43e:	88 e1       	ldi	r24, 0x18	; 24
     440:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     444:	86 e0       	ldi	r24, 0x06	; 6
     446:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     44a:	08 95       	ret

0000044c <cputchar>:
     44c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     450:	95 ff       	sbrs	r25, 5
     452:	fc cf       	rjmp	.-8      	; 0x44c <cputchar>
     454:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     458:	08 95       	ret

0000045a <cgetchar>:
     45a:	cf 93       	push	r28
     45c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     460:	87 ff       	sbrs	r24, 7
     462:	fc cf       	rjmp	.-8      	; 0x45c <cgetchar+0x2>
     464:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     468:	8c 2f       	mov	r24, r28
     46a:	0e 94 26 02 	call	0x44c	; 0x44c <cputchar>
     46e:	8c 2f       	mov	r24, r28
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <cputs>:
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	ec 01       	movw	r28, r24
     47a:	89 91       	ld	r24, Y+
     47c:	81 11       	cpse	r24, r1
     47e:	03 c0       	rjmp	.+6      	; 0x486 <cputs+0x12>
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret
     486:	0e 94 26 02 	call	0x44c	; 0x44c <cputchar>
     48a:	f7 cf       	rjmp	.-18     	; 0x47a <cputs+0x6>

0000048c <robo_proxSensor>:
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	0e 94 2a 01 	call	0x254	; 0x254 <ADC_read>
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	84 36       	cpi	r24, 0x64	; 100
     498:	91 05       	cpc	r25, r1
     49a:	10 f0       	brcs	.+4      	; 0x4a0 <robo_proxSensor+0x14>
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	c9 01       	movw	r24, r18
     4a2:	08 95       	ret

000004a4 <robo_lightSensor>:
     4a4:	84 e0       	ldi	r24, 0x04	; 4
     4a6:	0e 94 2a 01 	call	0x254	; 0x254 <ADC_read>
     4aa:	2b ef       	ldi	r18, 0xFB	; 251
     4ac:	ac 01       	movw	r20, r24
     4ae:	24 03       	mulsu	r18, r20
     4b0:	c0 01       	movw	r24, r0
     4b2:	25 9f       	mul	r18, r21
     4b4:	90 0d       	add	r25, r0
     4b6:	11 24       	eor	r1, r1
     4b8:	85 50       	subi	r24, 0x05	; 5
     4ba:	9c 4e       	sbci	r25, 0xEC	; 236
     4bc:	63 e3       	ldi	r22, 0x33	; 51
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	0e 94 b5 08 	call	0x116a	; 0x116a <__divmodhi4>
     4c4:	cb 01       	movw	r24, r22
     4c6:	65 36       	cpi	r22, 0x65	; 101
     4c8:	71 05       	cpc	r23, r1
     4ca:	14 f0       	brlt	.+4      	; 0x4d0 <robo_lightSensor+0x2c>
     4cc:	84 e6       	ldi	r24, 0x64	; 100
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	08 95       	ret

000004d2 <robo_lineSensor>:
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	c0 e0       	ldi	r28, 0x00	; 0
     4d8:	d1 e0       	ldi	r29, 0x01	; 1
     4da:	cc 0f       	add	r28, r28
     4dc:	8d 2f       	mov	r24, r29
     4de:	0e 94 2a 01 	call	0x254	; 0x254 <ADC_read>
     4e2:	8c 32       	cpi	r24, 0x2C	; 44
     4e4:	91 40       	sbci	r25, 0x01	; 1
     4e6:	0c f4       	brge	.+2      	; 0x4ea <robo_lineSensor+0x18>
     4e8:	c1 60       	ori	r28, 0x01	; 1
     4ea:	df 5f       	subi	r29, 0xFF	; 255
     4ec:	d4 30       	cpi	r29, 0x04	; 4
     4ee:	a9 f7       	brne	.-22     	; 0x4da <robo_lineSensor+0x8>
     4f0:	8c 2f       	mov	r24, r28
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <robo_bumpSensorR>:
     4fa:	83 b1       	in	r24, 0x03	; 3
     4fc:	82 95       	swap	r24
     4fe:	8f 70       	andi	r24, 0x0F	; 15
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	89 27       	eor	r24, r25
     504:	81 70       	andi	r24, 0x01	; 1
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	08 95       	ret

0000050a <robo_bumpSensorL>:
     50a:	83 b1       	in	r24, 0x03	; 3
     50c:	86 95       	lsr	r24
     50e:	86 95       	lsr	r24
     510:	86 95       	lsr	r24
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	89 27       	eor	r24, r25
     516:	81 70       	andi	r24, 0x01	; 1
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	08 95       	ret

0000051c <robo_Honk>:
     51c:	5b 9a       	sbi	0x0b, 3	; 11
     51e:	2f ef       	ldi	r18, 0xFF	; 255
     520:	85 ea       	ldi	r24, 0xA5	; 165
     522:	9e e0       	ldi	r25, 0x0E	; 14
     524:	21 50       	subi	r18, 0x01	; 1
     526:	80 40       	sbci	r24, 0x00	; 0
     528:	90 40       	sbci	r25, 0x00	; 0
     52a:	e1 f7       	brne	.-8      	; 0x524 <robo_Honk+0x8>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <robo_Honk+0x12>
     52e:	00 00       	nop
     530:	5b 98       	cbi	0x0b, 3	; 11
     532:	2f ef       	ldi	r18, 0xFF	; 255
     534:	85 ea       	ldi	r24, 0xA5	; 165
     536:	9e e0       	ldi	r25, 0x0E	; 14
     538:	21 50       	subi	r18, 0x01	; 1
     53a:	80 40       	sbci	r24, 0x00	; 0
     53c:	90 40       	sbci	r25, 0x00	; 0
     53e:	e1 f7       	brne	.-8      	; 0x538 <robo_Honk+0x1c>
     540:	00 c0       	rjmp	.+0      	; 0x542 <robo_Honk+0x26>
     542:	00 00       	nop
     544:	08 95       	ret

00000546 <robo_checkBattery>:
     546:	85 e0       	ldi	r24, 0x05	; 5
     548:	0e 94 2a 01 	call	0x254	; 0x254 <ADC_read>
     54c:	84 3f       	cpi	r24, 0xF4	; 244
     54e:	91 40       	sbci	r25, 0x01	; 1
     550:	10 f4       	brcc	.+4      	; 0x556 <robo_checkBattery+0x10>
     552:	28 9a       	sbi	0x05, 0	; 5
     554:	08 95       	ret
     556:	28 98       	cbi	0x05, 0	; 5
     558:	08 95       	ret

0000055a <robo_goPressed>:
     55a:	89 b1       	in	r24, 0x09	; 9
     55c:	82 fb       	bst	r24, 2
     55e:	88 27       	eor	r24, r24
     560:	80 f9       	bld	r24, 0
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	89 27       	eor	r24, r25
     566:	08 95       	ret

00000568 <robo_wait4goPress>:
     568:	0e 94 ad 02 	call	0x55a	; 0x55a <robo_goPressed>
     56c:	88 23       	and	r24, r24
     56e:	e1 f3       	breq	.-8      	; 0x568 <robo_wait4goPress>
     570:	08 95       	ret

00000572 <OS_ticks_init>:
     572:	f8 94       	cli
     574:	85 e0       	ldi	r24, 0x05	; 5
     576:	85 bd       	out	0x25, r24	; 37
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     57e:	84 e6       	ldi	r24, 0x64	; 100
     580:	86 bd       	out	0x26, r24	; 38
     582:	78 94       	sei
     584:	08 95       	ret

00000586 <HAL_init>:
     586:	87 e6       	ldi	r24, 0x67	; 103
     588:	0e 94 19 02 	call	0x432	; 0x432 <USART0_init>
     58c:	0c 94 23 01 	jmp	0x246	; 0x246 <ADC_init>

00000590 <robo_Setup>:
     590:	0e 94 c3 02 	call	0x586	; 0x586 <HAL_init>
     594:	0e 94 4f 01 	call	0x29e	; 0x29e <motor_init>
     598:	53 9a       	sbi	0x0a, 3	; 10
     59a:	5b 98       	cbi	0x0b, 3	; 11
     59c:	20 9a       	sbi	0x04, 0	; 4
     59e:	52 98       	cbi	0x0a, 2	; 10
     5a0:	5a 9a       	sbi	0x0b, 2	; 11
     5a2:	24 98       	cbi	0x04, 4	; 4
     5a4:	23 98       	cbi	0x04, 3	; 4
     5a6:	85 b1       	in	r24, 0x05	; 5
     5a8:	88 61       	ori	r24, 0x18	; 24
     5aa:	85 b9       	out	0x05, r24	; 5
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	0e 94 96 01 	call	0x32c	; 0x32c <motor_set_dir>
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	0e 94 96 01 	call	0x32c	; 0x32c <motor_set_dir>
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <robo_motorSpeed>

000005c8 <cprintf>:
     5c8:	4f 92       	push	r4
     5ca:	5f 92       	push	r5
     5cc:	6f 92       	push	r6
     5ce:	7f 92       	push	r7
     5d0:	8f 92       	push	r8
     5d2:	9f 92       	push	r9
     5d4:	af 92       	push	r10
     5d6:	bf 92       	push	r11
     5d8:	cf 92       	push	r12
     5da:	df 92       	push	r13
     5dc:	ef 92       	push	r14
     5de:	ff 92       	push	r15
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	de 01       	movw	r26, r28
     5ee:	53 96       	adiw	r26, 0x13	; 19
     5f0:	ed 91       	ld	r30, X+
     5f2:	fd 91       	ld	r31, X+
     5f4:	8d 01       	movw	r16, r26
     5f6:	5a e0       	ldi	r21, 0x0A	; 10
     5f8:	65 2e       	mov	r6, r21
     5fa:	71 2c       	mov	r7, r1
     5fc:	80 81       	ld	r24, Z
     5fe:	85 32       	cpi	r24, 0x25	; 37
     600:	81 f4       	brne	.+32     	; 0x622 <cprintf+0x5a>
     602:	5f 01       	movw	r10, r30
     604:	82 e0       	ldi	r24, 0x02	; 2
     606:	a8 0e       	add	r10, r24
     608:	b1 1c       	adc	r11, r1
     60a:	81 81       	ldd	r24, Z+1	; 0x01
     60c:	84 36       	cpi	r24, 0x64	; 100
     60e:	09 f4       	brne	.+2      	; 0x612 <cprintf+0x4a>
     610:	50 c0       	rjmp	.+160    	; 0x6b2 <cprintf+0xea>
     612:	90 f4       	brcc	.+36     	; 0x638 <cprintf+0x70>
     614:	83 36       	cpi	r24, 0x63	; 99
     616:	61 f4       	brne	.+24     	; 0x630 <cprintf+0x68>
     618:	f8 01       	movw	r30, r16
     61a:	80 81       	ld	r24, Z
     61c:	0e 5f       	subi	r16, 0xFE	; 254
     61e:	1f 4f       	sbci	r17, 0xFF	; 255
     620:	07 c0       	rjmp	.+14     	; 0x630 <cprintf+0x68>
     622:	88 23       	and	r24, r24
     624:	09 f4       	brne	.+2      	; 0x628 <cprintf+0x60>
     626:	5d c0       	rjmp	.+186    	; 0x6e2 <cprintf+0x11a>
     628:	5f 01       	movw	r10, r30
     62a:	9f ef       	ldi	r25, 0xFF	; 255
     62c:	a9 1a       	sub	r10, r25
     62e:	b9 0a       	sbc	r11, r25
     630:	0e 94 26 02 	call	0x44c	; 0x44c <cputchar>
     634:	f5 01       	movw	r30, r10
     636:	e2 cf       	rjmp	.-60     	; 0x5fc <cprintf+0x34>
     638:	83 37       	cpi	r24, 0x73	; 115
     63a:	71 f1       	breq	.+92     	; 0x698 <cprintf+0xd0>
     63c:	30 e1       	ldi	r19, 0x10	; 16
     63e:	83 2e       	mov	r8, r19
     640:	91 2c       	mov	r9, r1
     642:	e1 2c       	mov	r14, r1
     644:	40 e1       	ldi	r20, 0x10	; 16
     646:	f4 2e       	mov	r15, r20
     648:	88 37       	cpi	r24, 0x78	; 120
     64a:	91 f7       	brne	.-28     	; 0x630 <cprintf+0x68>
     64c:	f8 01       	movw	r30, r16
     64e:	c0 80       	ld	r12, Z
     650:	d1 80       	ldd	r13, Z+1	; 0x01
     652:	0e 5f       	subi	r16, 0xFE	; 254
     654:	1f 4f       	sbci	r17, 0xFF	; 255
     656:	84 36       	cpi	r24, 0x64	; 100
     658:	59 f4       	brne	.+22     	; 0x670 <cprintf+0xa8>
     65a:	d7 fe       	sbrs	r13, 7
     65c:	06 c0       	rjmp	.+12     	; 0x66a <cprintf+0xa2>
     65e:	d1 94       	neg	r13
     660:	c1 94       	neg	r12
     662:	d1 08       	sbc	r13, r1
     664:	8d e2       	ldi	r24, 0x2D	; 45
     666:	0e 94 26 02 	call	0x44c	; 0x44c <cputchar>
     66a:	ce 14       	cp	r12, r14
     66c:	df 04       	cpc	r13, r15
     66e:	48 f1       	brcs	.+82     	; 0x6c2 <cprintf+0xfa>
     670:	c6 01       	movw	r24, r12
     672:	b7 01       	movw	r22, r14
     674:	0e 94 a1 08 	call	0x1142	; 0x1142 <__udivmodhi4>
     678:	2c 01       	movw	r4, r24
     67a:	68 5f       	subi	r22, 0xF8	; 248
     67c:	7d 4f       	sbci	r23, 0xFD	; 253
     67e:	fb 01       	movw	r30, r22
     680:	80 81       	ld	r24, Z
     682:	0e 94 26 02 	call	0x44c	; 0x44c <cputchar>
     686:	62 01       	movw	r12, r4
     688:	c7 01       	movw	r24, r14
     68a:	b4 01       	movw	r22, r8
     68c:	0e 94 a1 08 	call	0x1142	; 0x1142 <__udivmodhi4>
     690:	7b 01       	movw	r14, r22
     692:	67 2b       	or	r22, r23
     694:	69 f7       	brne	.-38     	; 0x670 <cprintf+0xa8>
     696:	ce cf       	rjmp	.-100    	; 0x634 <cprintf+0x6c>
     698:	f8 01       	movw	r30, r16
     69a:	e0 80       	ld	r14, Z
     69c:	f1 80       	ldd	r15, Z+1	; 0x01
     69e:	0e 5f       	subi	r16, 0xFE	; 254
     6a0:	1f 4f       	sbci	r17, 0xFF	; 255
     6a2:	f7 01       	movw	r30, r14
     6a4:	81 91       	ld	r24, Z+
     6a6:	7f 01       	movw	r14, r30
     6a8:	88 23       	and	r24, r24
     6aa:	21 f2       	breq	.-120    	; 0x634 <cprintf+0x6c>
     6ac:	0e 94 26 02 	call	0x44c	; 0x44c <cputchar>
     6b0:	f8 cf       	rjmp	.-16     	; 0x6a2 <cprintf+0xda>
     6b2:	9a e0       	ldi	r25, 0x0A	; 10
     6b4:	89 2e       	mov	r8, r25
     6b6:	91 2c       	mov	r9, r1
     6b8:	20 e1       	ldi	r18, 0x10	; 16
     6ba:	e2 2e       	mov	r14, r18
     6bc:	27 e2       	ldi	r18, 0x27	; 39
     6be:	f2 2e       	mov	r15, r18
     6c0:	c5 cf       	rjmp	.-118    	; 0x64c <cprintf+0x84>
     6c2:	c7 01       	movw	r24, r14
     6c4:	b3 01       	movw	r22, r6
     6c6:	0e 94 a1 08 	call	0x1142	; 0x1142 <__udivmodhi4>
     6ca:	7b 01       	movw	r14, r22
     6cc:	62 30       	cpi	r22, 0x02	; 2
     6ce:	71 05       	cpc	r23, r1
     6d0:	60 f6       	brcc	.-104    	; 0x66a <cprintf+0xa2>
     6d2:	c6 01       	movw	r24, r12
     6d4:	0e 94 a1 08 	call	0x1142	; 0x1142 <__udivmodhi4>
     6d8:	fb 01       	movw	r30, r22
     6da:	e8 5f       	subi	r30, 0xF8	; 248
     6dc:	fd 4f       	sbci	r31, 0xFD	; 253
     6de:	80 81       	ld	r24, Z
     6e0:	a7 cf       	rjmp	.-178    	; 0x630 <cprintf+0x68>
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	ff 90       	pop	r15
     6f0:	ef 90       	pop	r14
     6f2:	df 90       	pop	r13
     6f4:	cf 90       	pop	r12
     6f6:	bf 90       	pop	r11
     6f8:	af 90       	pop	r10
     6fa:	9f 90       	pop	r9
     6fc:	8f 90       	pop	r8
     6fe:	7f 90       	pop	r7
     700:	6f 90       	pop	r6
     702:	5f 90       	pop	r5
     704:	4f 90       	pop	r4
     706:	08 95       	ret

00000708 <OSStartHighRdy>:
     708:	00 91 28 04 	lds	r16, 0x0428	; 0x800428 <OSRunning>
     70c:	03 95       	inc	r16
     70e:	00 93 28 04 	sts	0x0428, r16	; 0x800428 <OSRunning>
     712:	e0 91 38 04 	lds	r30, 0x0438	; 0x800438 <OSTCBHighRdy>
     716:	f0 91 39 04 	lds	r31, 0x0439	; 0x800439 <OSTCBHighRdy+0x1>
     71a:	c1 91       	ld	r28, Z+
     71c:	cd bf       	out	0x3d, r28	; 61
     71e:	d1 91       	ld	r29, Z+
     720:	de bf       	out	0x3e, r29	; 62
     722:	0f 91       	pop	r16
     724:	0f bf       	out	0x3f, r16	; 63
     726:	ff 91       	pop	r31
     728:	ef 91       	pop	r30
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	bf 91       	pop	r27
     730:	af 91       	pop	r26
     732:	9f 91       	pop	r25
     734:	8f 91       	pop	r24
     736:	7f 91       	pop	r23
     738:	6f 91       	pop	r22
     73a:	5f 91       	pop	r21
     73c:	4f 91       	pop	r20
     73e:	3f 91       	pop	r19
     740:	2f 91       	pop	r18
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	ff 90       	pop	r15
     748:	ef 90       	pop	r14
     74a:	df 90       	pop	r13
     74c:	cf 90       	pop	r12
     74e:	bf 90       	pop	r11
     750:	af 90       	pop	r10
     752:	9f 90       	pop	r9
     754:	8f 90       	pop	r8
     756:	7f 90       	pop	r7
     758:	6f 90       	pop	r6
     75a:	5f 90       	pop	r5
     75c:	4f 90       	pop	r4
     75e:	3f 90       	pop	r3
     760:	2f 90       	pop	r2
     762:	1f 90       	pop	r1
     764:	0f 90       	pop	r0
     766:	08 95       	ret

00000768 <OSCtxSw>:
     768:	0f 92       	push	r0
     76a:	1f 92       	push	r1
     76c:	2f 92       	push	r2
     76e:	3f 92       	push	r3
     770:	4f 92       	push	r4
     772:	5f 92       	push	r5
     774:	6f 92       	push	r6
     776:	7f 92       	push	r7
     778:	8f 92       	push	r8
     77a:	9f 92       	push	r9
     77c:	af 92       	push	r10
     77e:	bf 92       	push	r11
     780:	cf 92       	push	r12
     782:	df 92       	push	r13
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	2f 93       	push	r18
     78e:	3f 93       	push	r19
     790:	4f 93       	push	r20
     792:	5f 93       	push	r21
     794:	6f 93       	push	r22
     796:	7f 93       	push	r23
     798:	8f 93       	push	r24
     79a:	9f 93       	push	r25
     79c:	af 93       	push	r26
     79e:	bf 93       	push	r27
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	ef 93       	push	r30
     7a6:	ff 93       	push	r31
     7a8:	0f b7       	in	r16, 0x3f	; 63
     7aa:	0f 93       	push	r16
     7ac:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <OSTCBCur>
     7b0:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <OSTCBCur+0x1>
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	c1 93       	st	Z+, r28
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	d1 93       	st	Z+, r29
     7bc:	00 91 2d 04 	lds	r16, 0x042D	; 0x80042d <OSPrioHighRdy>
     7c0:	00 93 2e 04 	sts	0x042E, r16	; 0x80042e <OSPrioCur>
     7c4:	e0 91 38 04 	lds	r30, 0x0438	; 0x800438 <OSTCBHighRdy>
     7c8:	f0 91 39 04 	lds	r31, 0x0439	; 0x800439 <OSTCBHighRdy+0x1>
     7cc:	e0 93 40 04 	sts	0x0440, r30	; 0x800440 <OSTCBCur>
     7d0:	f0 93 41 04 	sts	0x0441, r31	; 0x800441 <OSTCBCur+0x1>
     7d4:	c1 91       	ld	r28, Z+
     7d6:	cd bf       	out	0x3d, r28	; 61
     7d8:	d1 91       	ld	r29, Z+
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f 91       	pop	r16
     7de:	0f bf       	out	0x3f, r16	; 63
     7e0:	ff 91       	pop	r31
     7e2:	ef 91       	pop	r30
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	bf 91       	pop	r27
     7ea:	af 91       	pop	r26
     7ec:	9f 91       	pop	r25
     7ee:	8f 91       	pop	r24
     7f0:	7f 91       	pop	r23
     7f2:	6f 91       	pop	r22
     7f4:	5f 91       	pop	r21
     7f6:	4f 91       	pop	r20
     7f8:	3f 91       	pop	r19
     7fa:	2f 91       	pop	r18
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	ff 90       	pop	r15
     802:	ef 90       	pop	r14
     804:	df 90       	pop	r13
     806:	cf 90       	pop	r12
     808:	bf 90       	pop	r11
     80a:	af 90       	pop	r10
     80c:	9f 90       	pop	r9
     80e:	8f 90       	pop	r8
     810:	7f 90       	pop	r7
     812:	6f 90       	pop	r6
     814:	5f 90       	pop	r5
     816:	4f 90       	pop	r4
     818:	3f 90       	pop	r3
     81a:	2f 90       	pop	r2
     81c:	1f 90       	pop	r1
     81e:	0f 90       	pop	r0
     820:	08 95       	ret

00000822 <OSIntCtxSw>:
     822:	00 91 2d 04 	lds	r16, 0x042D	; 0x80042d <OSPrioHighRdy>
     826:	00 93 2e 04 	sts	0x042E, r16	; 0x80042e <OSPrioCur>
     82a:	e0 91 38 04 	lds	r30, 0x0438	; 0x800438 <OSTCBHighRdy>
     82e:	f0 91 39 04 	lds	r31, 0x0439	; 0x800439 <OSTCBHighRdy+0x1>
     832:	e0 93 40 04 	sts	0x0440, r30	; 0x800440 <OSTCBCur>
     836:	f0 93 41 04 	sts	0x0441, r31	; 0x800441 <OSTCBCur+0x1>
     83a:	c1 91       	ld	r28, Z+
     83c:	cd bf       	out	0x3d, r28	; 61
     83e:	d1 91       	ld	r29, Z+
     840:	de bf       	out	0x3e, r29	; 62
     842:	0f 91       	pop	r16
     844:	0f bf       	out	0x3f, r16	; 63
     846:	ff 91       	pop	r31
     848:	ef 91       	pop	r30
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	bf 91       	pop	r27
     850:	af 91       	pop	r26
     852:	9f 91       	pop	r25
     854:	8f 91       	pop	r24
     856:	7f 91       	pop	r23
     858:	6f 91       	pop	r22
     85a:	5f 91       	pop	r21
     85c:	4f 91       	pop	r20
     85e:	3f 91       	pop	r19
     860:	2f 91       	pop	r18
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	ff 90       	pop	r15
     868:	ef 90       	pop	r14
     86a:	df 90       	pop	r13
     86c:	cf 90       	pop	r12
     86e:	bf 90       	pop	r11
     870:	af 90       	pop	r10
     872:	9f 90       	pop	r9
     874:	8f 90       	pop	r8
     876:	7f 90       	pop	r7
     878:	6f 90       	pop	r6
     87a:	5f 90       	pop	r5
     87c:	4f 90       	pop	r4
     87e:	3f 90       	pop	r3
     880:	2f 90       	pop	r2
     882:	1f 90       	pop	r1
     884:	0f 90       	pop	r0
     886:	08 95       	ret

00000888 <OSTickISR>:
     888:	0f 92       	push	r0
     88a:	1f 92       	push	r1
     88c:	2f 92       	push	r2
     88e:	3f 92       	push	r3
     890:	4f 92       	push	r4
     892:	5f 92       	push	r5
     894:	6f 92       	push	r6
     896:	7f 92       	push	r7
     898:	8f 92       	push	r8
     89a:	9f 92       	push	r9
     89c:	af 92       	push	r10
     89e:	bf 92       	push	r11
     8a0:	cf 92       	push	r12
     8a2:	df 92       	push	r13
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	2f 93       	push	r18
     8ae:	3f 93       	push	r19
     8b0:	4f 93       	push	r20
     8b2:	5f 93       	push	r21
     8b4:	6f 93       	push	r22
     8b6:	7f 93       	push	r23
     8b8:	8f 93       	push	r24
     8ba:	9f 93       	push	r25
     8bc:	af 93       	push	r26
     8be:	bf 93       	push	r27
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	ef 93       	push	r30
     8c6:	ff 93       	push	r31
     8c8:	0f b7       	in	r16, 0x3f	; 63
     8ca:	00 68       	ori	r16, 0x80	; 128
     8cc:	0f 93       	push	r16
     8ce:	00 91 3f 04 	lds	r16, 0x043F	; 0x80043f <OSIntNesting>
     8d2:	03 95       	inc	r16
     8d4:	00 93 3f 04 	sts	0x043F, r16	; 0x80043f <OSIntNesting>
     8d8:	01 30       	cpi	r16, 0x01	; 1
     8da:	41 f4       	brne	.+16     	; 0x8ec <_not_first_int>
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
     8e0:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <OSTCBCur>
     8e4:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <OSTCBCur+0x1>
     8e8:	c1 93       	st	Z+, r28
     8ea:	d1 93       	st	Z+, r29

000008ec <_not_first_int>:
     8ec:	04 e6       	ldi	r16, 0x64	; 100
     8ee:	06 bd       	out	0x26, r16	; 38
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	1f 2e       	mov	r1, r31
     8f4:	78 94       	sei
     8f6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <OSTimeTick>
     8fa:	00 00       	nop
     8fc:	0e 94 1a 05 	call	0xa34	; 0xa34 <OSIntExit>
     900:	0f 91       	pop	r16
     902:	0f bf       	out	0x3f, r16	; 63
     904:	ff 91       	pop	r31
     906:	ef 91       	pop	r30
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	bf 91       	pop	r27
     90e:	af 91       	pop	r26
     910:	9f 91       	pop	r25
     912:	8f 91       	pop	r24
     914:	7f 91       	pop	r23
     916:	6f 91       	pop	r22
     918:	5f 91       	pop	r21
     91a:	4f 91       	pop	r20
     91c:	3f 91       	pop	r19
     91e:	2f 91       	pop	r18
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	df 90       	pop	r13
     92a:	cf 90       	pop	r12
     92c:	bf 90       	pop	r11
     92e:	af 90       	pop	r10
     930:	9f 90       	pop	r9
     932:	8f 90       	pop	r8
     934:	7f 90       	pop	r7
     936:	6f 90       	pop	r6
     938:	5f 90       	pop	r5
     93a:	4f 90       	pop	r4
     93c:	3f 90       	pop	r3
     93e:	2f 90       	pop	r2
     940:	1f 90       	pop	r1
     942:	0f 90       	pop	r0
     944:	08 95       	ret

00000946 <OSTaskStkInit>:
     946:	fa 01       	movw	r30, r20
     948:	80 83       	st	Z, r24
     94a:	31 97       	sbiw	r30, 0x01	; 1
     94c:	90 83       	st	Z, r25
     94e:	31 97       	sbiw	r30, 0x01	; 1
     950:	10 82       	st	Z, r1
     952:	31 97       	sbiw	r30, 0x01	; 1
     954:	10 82       	st	Z, r1
     956:	31 97       	sbiw	r30, 0x01	; 1
     958:	10 82       	st	Z, r1
     95a:	31 97       	sbiw	r30, 0x01	; 1
     95c:	10 82       	st	Z, r1
     95e:	31 97       	sbiw	r30, 0x01	; 1
     960:	10 82       	st	Z, r1
     962:	31 97       	sbiw	r30, 0x01	; 1
     964:	10 82       	st	Z, r1
     966:	31 97       	sbiw	r30, 0x01	; 1
     968:	10 82       	st	Z, r1
     96a:	31 97       	sbiw	r30, 0x01	; 1
     96c:	10 82       	st	Z, r1
     96e:	31 97       	sbiw	r30, 0x01	; 1
     970:	10 82       	st	Z, r1
     972:	31 97       	sbiw	r30, 0x01	; 1
     974:	10 82       	st	Z, r1
     976:	31 97       	sbiw	r30, 0x01	; 1
     978:	10 82       	st	Z, r1
     97a:	31 97       	sbiw	r30, 0x01	; 1
     97c:	10 82       	st	Z, r1
     97e:	31 97       	sbiw	r30, 0x01	; 1
     980:	10 82       	st	Z, r1
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	10 82       	st	Z, r1
     986:	31 97       	sbiw	r30, 0x01	; 1
     988:	10 82       	st	Z, r1
     98a:	31 97       	sbiw	r30, 0x01	; 1
     98c:	10 82       	st	Z, r1
     98e:	31 97       	sbiw	r30, 0x01	; 1
     990:	10 82       	st	Z, r1
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	10 82       	st	Z, r1
     996:	31 97       	sbiw	r30, 0x01	; 1
     998:	10 82       	st	Z, r1
     99a:	31 97       	sbiw	r30, 0x01	; 1
     99c:	10 82       	st	Z, r1
     99e:	31 97       	sbiw	r30, 0x01	; 1
     9a0:	10 82       	st	Z, r1
     9a2:	31 97       	sbiw	r30, 0x01	; 1
     9a4:	10 82       	st	Z, r1
     9a6:	31 97       	sbiw	r30, 0x01	; 1
     9a8:	10 82       	st	Z, r1
     9aa:	31 97       	sbiw	r30, 0x01	; 1
     9ac:	10 82       	st	Z, r1
     9ae:	31 97       	sbiw	r30, 0x01	; 1
     9b0:	60 83       	st	Z, r22
     9b2:	31 97       	sbiw	r30, 0x01	; 1
     9b4:	70 83       	st	Z, r23
     9b6:	31 97       	sbiw	r30, 0x01	; 1
     9b8:	10 82       	st	Z, r1
     9ba:	31 97       	sbiw	r30, 0x01	; 1
     9bc:	10 82       	st	Z, r1
     9be:	31 97       	sbiw	r30, 0x01	; 1
     9c0:	10 82       	st	Z, r1
     9c2:	31 97       	sbiw	r30, 0x01	; 1
     9c4:	10 82       	st	Z, r1
     9c6:	31 97       	sbiw	r30, 0x01	; 1
     9c8:	10 82       	st	Z, r1
     9ca:	31 97       	sbiw	r30, 0x01	; 1
     9cc:	10 82       	st	Z, r1
     9ce:	31 97       	sbiw	r30, 0x01	; 1
     9d0:	80 e8       	ldi	r24, 0x80	; 128
     9d2:	80 83       	st	Z, r24
     9d4:	ca 01       	movw	r24, r20
     9d6:	83 97       	sbiw	r24, 0x23	; 35
     9d8:	08 95       	ret

000009da <OSTaskCreateHook>:
     9da:	08 95       	ret

000009dc <OSTaskDelHook>:
     9dc:	08 95       	ret

000009de <OSTaskSwHook>:
     9de:	08 95       	ret

000009e0 <OSTaskStatHook>:
     9e0:	08 95       	ret

000009e2 <OSTimeTickHook>:
     9e2:	08 95       	ret

000009e4 <OSInitHookBegin>:
     9e4:	08 95       	ret

000009e6 <OSInitHookEnd>:
     9e6:	08 95       	ret

000009e8 <OSTaskIdleHook>:
     9e8:	08 95       	ret

000009ea <OSTCBInitHook>:
     9ea:	08 95       	ret

000009ec <OS_TaskIdle>:
     9ec:	f8 94       	cli
     9ee:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSIdleCtr>
     9f2:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <OSIdleCtr+0x1>
     9f6:	a0 91 2b 04 	lds	r26, 0x042B	; 0x80042b <OSIdleCtr+0x2>
     9fa:	b0 91 2c 04 	lds	r27, 0x042C	; 0x80042c <OSIdleCtr+0x3>
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	a1 1d       	adc	r26, r1
     a02:	b1 1d       	adc	r27, r1
     a04:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <OSIdleCtr>
     a08:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <OSIdleCtr+0x1>
     a0c:	a0 93 2b 04 	sts	0x042B, r26	; 0x80042b <OSIdleCtr+0x2>
     a10:	b0 93 2c 04 	sts	0x042C, r27	; 0x80042c <OSIdleCtr+0x3>
     a14:	78 94       	sei
     a16:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <OSTaskIdleHook>
     a1a:	e8 cf       	rjmp	.-48     	; 0x9ec <OS_TaskIdle>

00000a1c <OSIntEnter>:
     a1c:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     a20:	81 30       	cpi	r24, 0x01	; 1
     a22:	39 f4       	brne	.+14     	; 0xa32 <OSIntEnter+0x16>
     a24:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <OSIntNesting>
     a28:	8f 3f       	cpi	r24, 0xFF	; 255
     a2a:	19 f0       	breq	.+6      	; 0xa32 <OSIntEnter+0x16>
     a2c:	8f 5f       	subi	r24, 0xFF	; 255
     a2e:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <OSIntNesting>
     a32:	08 95       	ret

00000a34 <OSIntExit>:
     a34:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	09 f0       	breq	.+2      	; 0xa3e <OSIntExit+0xa>
     a3c:	4c c0       	rjmp	.+152    	; 0xad6 <OSIntExit+0xa2>
     a3e:	f8 94       	cli
     a40:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <OSIntNesting>
     a44:	88 23       	and	r24, r24
     a46:	19 f0       	breq	.+6      	; 0xa4e <OSIntExit+0x1a>
     a48:	81 50       	subi	r24, 0x01	; 1
     a4a:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <OSIntNesting>
     a4e:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <OSIntNesting>
     a52:	81 11       	cpse	r24, r1
     a54:	3f c0       	rjmp	.+126    	; 0xad4 <OSIntExit+0xa0>
     a56:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <OSLockNesting>
     a5a:	81 11       	cpse	r24, r1
     a5c:	3b c0       	rjmp	.+118    	; 0xad4 <OSIntExit+0xa0>
     a5e:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <OSRdyGrp>
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	e0 50       	subi	r30, 0x00	; 0
     a66:	ff 4f       	sbci	r31, 0xFF	; 255
     a68:	e0 81       	ld	r30, Z
     a6a:	e0 93 3e 04 	sts	0x043E, r30	; 0x80043e <OSIntExitY>
     a6e:	ae 2f       	mov	r26, r30
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	a5 5c       	subi	r26, 0xC5	; 197
     a74:	bb 4f       	sbci	r27, 0xFB	; 251
     a76:	ac 91       	ld	r26, X
     a78:	b0 e0       	ldi	r27, 0x00	; 0
     a7a:	a0 50       	subi	r26, 0x00	; 0
     a7c:	bf 4f       	sbci	r27, 0xFF	; 255
     a7e:	ee 0f       	add	r30, r30
     a80:	ee 0f       	add	r30, r30
     a82:	ee 0f       	add	r30, r30
     a84:	8c 91       	ld	r24, X
     a86:	e8 0f       	add	r30, r24
     a88:	e0 93 2d 04 	sts	0x042D, r30	; 0x80042d <OSPrioHighRdy>
     a8c:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <OSPrioCur>
     a90:	e8 17       	cp	r30, r24
     a92:	01 f1       	breq	.+64     	; 0xad4 <OSIntExit+0xa0>
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	ee 0f       	add	r30, r30
     a98:	ff 1f       	adc	r31, r31
     a9a:	ef 57       	subi	r30, 0x7F	; 127
     a9c:	fa 4f       	sbci	r31, 0xFA	; 250
     a9e:	80 81       	ld	r24, Z
     aa0:	91 81       	ldd	r25, Z+1	; 0x01
     aa2:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <OSTCBHighRdy+0x1>
     aa6:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <OSTCBHighRdy>
     aaa:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <OSCtxSwCtr>
     aae:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <OSCtxSwCtr+0x1>
     ab2:	a0 91 33 04 	lds	r26, 0x0433	; 0x800433 <OSCtxSwCtr+0x2>
     ab6:	b0 91 34 04 	lds	r27, 0x0434	; 0x800434 <OSCtxSwCtr+0x3>
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	a1 1d       	adc	r26, r1
     abe:	b1 1d       	adc	r27, r1
     ac0:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <OSCtxSwCtr>
     ac4:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <OSCtxSwCtr+0x1>
     ac8:	a0 93 33 04 	sts	0x0433, r26	; 0x800433 <OSCtxSwCtr+0x2>
     acc:	b0 93 34 04 	sts	0x0434, r27	; 0x800434 <OSCtxSwCtr+0x3>
     ad0:	0e 94 11 04 	call	0x822	; 0x822 <OSIntCtxSw>
     ad4:	78 94       	sei
     ad6:	08 95       	ret

00000ad8 <OSSchedLock>:
     ad8:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     adc:	81 30       	cpi	r24, 0x01	; 1
     ade:	49 f4       	brne	.+18     	; 0xaf2 <OSSchedLock+0x1a>
     ae0:	f8 94       	cli
     ae2:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <OSLockNesting>
     ae6:	8f 3f       	cpi	r24, 0xFF	; 255
     ae8:	19 f0       	breq	.+6      	; 0xaf0 <OSSchedLock+0x18>
     aea:	8f 5f       	subi	r24, 0xFF	; 255
     aec:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <OSLockNesting>
     af0:	78 94       	sei
     af2:	08 95       	ret

00000af4 <OSStart>:
     af4:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     af8:	81 11       	cpse	r24, r1
     afa:	28 c0       	rjmp	.+80     	; 0xb4c <OSStart+0x58>
     afc:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <OSRdyGrp>
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	e0 50       	subi	r30, 0x00	; 0
     b04:	ff 4f       	sbci	r31, 0xFF	; 255
     b06:	e0 81       	ld	r30, Z
     b08:	ae 2f       	mov	r26, r30
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	a5 5c       	subi	r26, 0xC5	; 197
     b0e:	bb 4f       	sbci	r27, 0xFB	; 251
     b10:	ac 91       	ld	r26, X
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	a0 50       	subi	r26, 0x00	; 0
     b16:	bf 4f       	sbci	r27, 0xFF	; 255
     b18:	ee 0f       	add	r30, r30
     b1a:	ee 0f       	add	r30, r30
     b1c:	ee 0f       	add	r30, r30
     b1e:	8c 91       	ld	r24, X
     b20:	e8 0f       	add	r30, r24
     b22:	e0 93 2d 04 	sts	0x042D, r30	; 0x80042d <OSPrioHighRdy>
     b26:	e0 93 2e 04 	sts	0x042E, r30	; 0x80042e <OSPrioCur>
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	ee 0f       	add	r30, r30
     b2e:	ff 1f       	adc	r31, r31
     b30:	ef 57       	subi	r30, 0x7F	; 127
     b32:	fa 4f       	sbci	r31, 0xFA	; 250
     b34:	80 81       	ld	r24, Z
     b36:	91 81       	ldd	r25, Z+1	; 0x01
     b38:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <OSTCBHighRdy+0x1>
     b3c:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <OSTCBHighRdy>
     b40:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <OSTCBCur+0x1>
     b44:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <OSTCBCur>
     b48:	0c 94 84 03 	jmp	0x708	; 0x708 <OSStartHighRdy>
     b4c:	08 95       	ret

00000b4e <OSTimeTick>:
     b4e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <OSTimeTickHook>
     b52:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     b56:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <OSTCBList>
     b5a:	f0 91 30 04 	lds	r31, 0x0430	; 0x800430 <OSTCBList+0x1>
     b5e:	21 e0       	ldi	r18, 0x01	; 1
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	01 f1       	breq	.+64     	; 0xba6 <OSTimeTick+0x58>
     b66:	08 95       	ret
     b68:	f8 94       	cli
     b6a:	86 81       	ldd	r24, Z+6	; 0x06
     b6c:	97 81       	ldd	r25, Z+7	; 0x07
     b6e:	00 97       	sbiw	r24, 0x00	; 0
     b70:	b1 f0       	breq	.+44     	; 0xb9e <OSTimeTick+0x50>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	97 83       	std	Z+7, r25	; 0x07
     b76:	86 83       	std	Z+6, r24	; 0x06
     b78:	89 2b       	or	r24, r25
     b7a:	89 f4       	brne	.+34     	; 0xb9e <OSTimeTick+0x50>
     b7c:	80 85       	ldd	r24, Z+8	; 0x08
     b7e:	83 fd       	sbrc	r24, 3
     b80:	16 c0       	rjmp	.+44     	; 0xbae <OSTimeTick+0x60>
     b82:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <OSRdyGrp>
     b86:	95 85       	ldd	r25, Z+13	; 0x0d
     b88:	89 2b       	or	r24, r25
     b8a:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <OSRdyGrp>
     b8e:	a3 85       	ldd	r26, Z+11	; 0x0b
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	a5 5c       	subi	r26, 0xC5	; 197
     b94:	bb 4f       	sbci	r27, 0xFB	; 251
     b96:	8c 91       	ld	r24, X
     b98:	94 85       	ldd	r25, Z+12	; 0x0c
     b9a:	89 2b       	or	r24, r25
     b9c:	8c 93       	st	X, r24
     b9e:	02 80       	ldd	r0, Z+2	; 0x02
     ba0:	f3 81       	ldd	r31, Z+3	; 0x03
     ba2:	e0 2d       	mov	r30, r0
     ba4:	78 94       	sei
     ba6:	81 85       	ldd	r24, Z+9	; 0x09
     ba8:	80 31       	cpi	r24, 0x10	; 16
     baa:	f1 f6       	brne	.-68     	; 0xb68 <OSTimeTick+0x1a>
     bac:	dc cf       	rjmp	.-72     	; 0xb66 <OSTimeTick+0x18>
     bae:	37 83       	std	Z+7, r19	; 0x07
     bb0:	26 83       	std	Z+6, r18	; 0x06
     bb2:	f5 cf       	rjmp	.-22     	; 0xb9e <OSTimeTick+0x50>

00000bb4 <OSVersion>:
     bb4:	8c ef       	ldi	r24, 0xFC	; 252
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	08 95       	ret

00000bba <OS_Dummy>:
     bba:	08 95       	ret

00000bbc <OS_Sched>:
     bbc:	f8 94       	cli
     bbe:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <OSIntNesting>
     bc2:	81 11       	cpse	r24, r1
     bc4:	3d c0       	rjmp	.+122    	; 0xc40 <OS_Sched+0x84>
     bc6:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <OSLockNesting>
     bca:	81 11       	cpse	r24, r1
     bcc:	39 c0       	rjmp	.+114    	; 0xc40 <OS_Sched+0x84>
     bce:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <OSRdyGrp>
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	e0 50       	subi	r30, 0x00	; 0
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	e0 81       	ld	r30, Z
     bda:	ae 2f       	mov	r26, r30
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	a5 5c       	subi	r26, 0xC5	; 197
     be0:	bb 4f       	sbci	r27, 0xFB	; 251
     be2:	ac 91       	ld	r26, X
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	a0 50       	subi	r26, 0x00	; 0
     be8:	bf 4f       	sbci	r27, 0xFF	; 255
     bea:	ee 0f       	add	r30, r30
     bec:	ee 0f       	add	r30, r30
     bee:	ee 0f       	add	r30, r30
     bf0:	8c 91       	ld	r24, X
     bf2:	e8 0f       	add	r30, r24
     bf4:	e0 93 2d 04 	sts	0x042D, r30	; 0x80042d <OSPrioHighRdy>
     bf8:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <OSPrioCur>
     bfc:	e8 17       	cp	r30, r24
     bfe:	01 f1       	breq	.+64     	; 0xc40 <OS_Sched+0x84>
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	ee 0f       	add	r30, r30
     c04:	ff 1f       	adc	r31, r31
     c06:	ef 57       	subi	r30, 0x7F	; 127
     c08:	fa 4f       	sbci	r31, 0xFA	; 250
     c0a:	80 81       	ld	r24, Z
     c0c:	91 81       	ldd	r25, Z+1	; 0x01
     c0e:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <OSTCBHighRdy+0x1>
     c12:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <OSTCBHighRdy>
     c16:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <OSCtxSwCtr>
     c1a:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <OSCtxSwCtr+0x1>
     c1e:	a0 91 33 04 	lds	r26, 0x0433	; 0x800433 <OSCtxSwCtr+0x2>
     c22:	b0 91 34 04 	lds	r27, 0x0434	; 0x800434 <OSCtxSwCtr+0x3>
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	a1 1d       	adc	r26, r1
     c2a:	b1 1d       	adc	r27, r1
     c2c:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <OSCtxSwCtr>
     c30:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <OSCtxSwCtr+0x1>
     c34:	a0 93 33 04 	sts	0x0433, r26	; 0x800433 <OSCtxSwCtr+0x2>
     c38:	b0 93 34 04 	sts	0x0434, r27	; 0x800434 <OSCtxSwCtr+0x3>
     c3c:	0e 94 b4 03 	call	0x768	; 0x768 <OSCtxSw>
     c40:	78 94       	sei
     c42:	08 95       	ret

00000c44 <OSSchedUnlock>:
     c44:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     c48:	81 30       	cpi	r24, 0x01	; 1
     c4a:	91 f4       	brne	.+36     	; 0xc70 <OSSchedUnlock+0x2c>
     c4c:	f8 94       	cli
     c4e:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <OSLockNesting>
     c52:	88 23       	and	r24, r24
     c54:	61 f0       	breq	.+24     	; 0xc6e <OSSchedUnlock+0x2a>
     c56:	81 50       	subi	r24, 0x01	; 1
     c58:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <OSLockNesting>
     c5c:	81 11       	cpse	r24, r1
     c5e:	07 c0       	rjmp	.+14     	; 0xc6e <OSSchedUnlock+0x2a>
     c60:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <OSIntNesting>
     c64:	81 11       	cpse	r24, r1
     c66:	03 c0       	rjmp	.+6      	; 0xc6e <OSSchedUnlock+0x2a>
     c68:	78 94       	sei
     c6a:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <OS_Sched>
     c6e:	78 94       	sei
     c70:	08 95       	ret

00000c72 <OSTimeDly.part.0>:
     c72:	ac 01       	movw	r20, r24
     c74:	f8 94       	cli
     c76:	a0 91 40 04 	lds	r26, 0x0440	; 0x800440 <OSTCBCur>
     c7a:	b0 91 41 04 	lds	r27, 0x0441	; 0x800441 <OSTCBCur+0x1>
     c7e:	1b 96       	adiw	r26, 0x0b	; 11
     c80:	ec 91       	ld	r30, X
     c82:	1b 97       	sbiw	r26, 0x0b	; 11
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	1c 96       	adiw	r26, 0x0c	; 12
     c88:	9c 91       	ld	r25, X
     c8a:	1c 97       	sbiw	r26, 0x0c	; 12
     c8c:	90 95       	com	r25
     c8e:	e5 5c       	subi	r30, 0xC5	; 197
     c90:	fb 4f       	sbci	r31, 0xFB	; 251
     c92:	80 81       	ld	r24, Z
     c94:	98 23       	and	r25, r24
     c96:	90 83       	st	Z, r25
     c98:	91 11       	cpse	r25, r1
     c9a:	0a c0       	rjmp	.+20     	; 0xcb0 <OSTimeDly.part.0+0x3e>
     c9c:	1d 96       	adiw	r26, 0x0d	; 13
     c9e:	9c 91       	ld	r25, X
     ca0:	1d 97       	sbiw	r26, 0x0d	; 13
     ca2:	29 2f       	mov	r18, r25
     ca4:	20 95       	com	r18
     ca6:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <OSRdyGrp>
     caa:	92 23       	and	r25, r18
     cac:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <OSRdyGrp>
     cb0:	17 96       	adiw	r26, 0x07	; 7
     cb2:	5c 93       	st	X, r21
     cb4:	4e 93       	st	-X, r20
     cb6:	16 97       	sbiw	r26, 0x06	; 6
     cb8:	78 94       	sei
     cba:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <OS_Sched>

00000cbe <OS_TCBInit>:
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	f8 94       	cli
     cc6:	c0 91 35 04 	lds	r28, 0x0435	; 0x800435 <OSTCBFreeList>
     cca:	d0 91 36 04 	lds	r29, 0x0436	; 0x800436 <OSTCBFreeList+0x1>
     cce:	20 97       	sbiw	r28, 0x00	; 0
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <OS_TCBInit+0x16>
     cd2:	54 c0       	rjmp	.+168    	; 0xd7c <OS_TCBInit+0xbe>
     cd4:	18 2f       	mov	r17, r24
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	9b 81       	ldd	r25, Y+3	; 0x03
     cda:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <OSTCBFreeList+0x1>
     cde:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <OSTCBFreeList>
     ce2:	78 94       	sei
     ce4:	79 83       	std	Y+1, r23	; 0x01
     ce6:	68 83       	st	Y, r22
     ce8:	19 87       	std	Y+9, r17	; 0x09
     cea:	18 86       	std	Y+8, r1	; 0x08
     cec:	1f 82       	std	Y+7, r1	; 0x07
     cee:	1e 82       	std	Y+6, r1	; 0x06
     cf0:	1e 86       	std	Y+14, r1	; 0x0e
     cf2:	e1 2f       	mov	r30, r17
     cf4:	e6 95       	lsr	r30
     cf6:	e6 95       	lsr	r30
     cf8:	e6 95       	lsr	r30
     cfa:	eb 87       	std	Y+11, r30	; 0x0b
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	e0 50       	subi	r30, 0x00	; 0
     d00:	fe 4f       	sbci	r31, 0xFE	; 254
     d02:	80 81       	ld	r24, Z
     d04:	8d 87       	std	Y+13, r24	; 0x0d
     d06:	e1 2f       	mov	r30, r17
     d08:	e7 70       	andi	r30, 0x07	; 7
     d0a:	ea 87       	std	Y+10, r30	; 0x0a
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	e0 50       	subi	r30, 0x00	; 0
     d10:	fe 4f       	sbci	r31, 0xFE	; 254
     d12:	80 81       	ld	r24, Z
     d14:	8c 87       	std	Y+12, r24	; 0x0c
     d16:	ce 01       	movw	r24, r28
     d18:	0e 94 f5 04 	call	0x9ea	; 0x9ea <OSTCBInitHook>
     d1c:	ce 01       	movw	r24, r28
     d1e:	0e 94 ed 04 	call	0x9da	; 0x9da <OSTaskCreateHook>
     d22:	f8 94       	cli
     d24:	e1 2f       	mov	r30, r17
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	ee 0f       	add	r30, r30
     d2a:	ff 1f       	adc	r31, r31
     d2c:	ef 57       	subi	r30, 0x7F	; 127
     d2e:	fa 4f       	sbci	r31, 0xFA	; 250
     d30:	d1 83       	std	Z+1, r29	; 0x01
     d32:	c0 83       	st	Z, r28
     d34:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <OSTCBList>
     d38:	f0 91 30 04 	lds	r31, 0x0430	; 0x800430 <OSTCBList+0x1>
     d3c:	fb 83       	std	Y+3, r31	; 0x03
     d3e:	ea 83       	std	Y+2, r30	; 0x02
     d40:	1d 82       	std	Y+5, r1	; 0x05
     d42:	1c 82       	std	Y+4, r1	; 0x04
     d44:	30 97       	sbiw	r30, 0x00	; 0
     d46:	11 f0       	breq	.+4      	; 0xd4c <OS_TCBInit+0x8e>
     d48:	d5 83       	std	Z+5, r29	; 0x05
     d4a:	c4 83       	std	Z+4, r28	; 0x04
     d4c:	d0 93 30 04 	sts	0x0430, r29	; 0x800430 <OSTCBList+0x1>
     d50:	c0 93 2f 04 	sts	0x042F, r28	; 0x80042f <OSTCBList>
     d54:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <OSRdyGrp>
     d58:	9d 85       	ldd	r25, Y+13	; 0x0d
     d5a:	89 2b       	or	r24, r25
     d5c:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <OSRdyGrp>
     d60:	eb 85       	ldd	r30, Y+11	; 0x0b
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	e5 5c       	subi	r30, 0xC5	; 197
     d66:	fb 4f       	sbci	r31, 0xFB	; 251
     d68:	80 81       	ld	r24, Z
     d6a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d6c:	89 2b       	or	r24, r25
     d6e:	80 83       	st	Z, r24
     d70:	78 94       	sei
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	08 95       	ret
     d7c:	78 94       	sei
     d7e:	86 e4       	ldi	r24, 0x46	; 70
     d80:	f9 cf       	rjmp	.-14     	; 0xd74 <OS_TCBInit+0xb6>

00000d82 <OSTaskCreate>:
     d82:	9f 92       	push	r9
     d84:	af 92       	push	r10
     d86:	bf 92       	push	r11
     d88:	cf 92       	push	r12
     d8a:	df 92       	push	r13
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	f8 94       	cli
     d9a:	c2 2f       	mov	r28, r18
     d9c:	d0 e0       	ldi	r29, 0x00	; 0
     d9e:	cc 0f       	add	r28, r28
     da0:	dd 1f       	adc	r29, r29
     da2:	cf 57       	subi	r28, 0x7F	; 127
     da4:	da 4f       	sbci	r29, 0xFA	; 250
     da6:	e8 81       	ld	r30, Y
     da8:	f9 81       	ldd	r31, Y+1	; 0x01
     daa:	ef 2b       	or	r30, r31
     dac:	09 f0       	breq	.+2      	; 0xdb0 <OSTaskCreate+0x2e>
     dae:	3b c0       	rjmp	.+118    	; 0xe26 <OSTaskCreate+0xa4>
     db0:	92 2e       	mov	r9, r18
     db2:	21 e0       	ldi	r18, 0x01	; 1
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	39 83       	std	Y+1, r19	; 0x01
     db8:	28 83       	st	Y, r18
     dba:	78 94       	sei
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	0e 94 a3 04 	call	0x946	; 0x946 <OSTaskStkInit>
     dc4:	b1 2c       	mov	r11, r1
     dc6:	a1 2c       	mov	r10, r1
     dc8:	d1 2c       	mov	r13, r1
     dca:	c1 2c       	mov	r12, r1
     dcc:	e1 2c       	mov	r14, r1
     dce:	f1 2c       	mov	r15, r1
     dd0:	87 01       	movw	r16, r14
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	bc 01       	movw	r22, r24
     ddc:	89 2d       	mov	r24, r9
     dde:	0e 94 5f 06 	call	0xcbe	; 0xcbe <OS_TCBInit>
     de2:	18 2f       	mov	r17, r24
     de4:	81 11       	cpse	r24, r1
     de6:	1a c0       	rjmp	.+52     	; 0xe1c <OSTaskCreate+0x9a>
     de8:	f8 94       	cli
     dea:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <OSTaskCtr>
     dee:	8f 5f       	subi	r24, 0xFF	; 255
     df0:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <OSTaskCtr>
     df4:	78 94       	sei
     df6:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	11 f4       	brne	.+4      	; 0xe02 <OSTaskCreate+0x80>
     dfe:	0e 94 de 05 	call	0xbbc	; 0xbbc <OS_Sched>
     e02:	81 2f       	mov	r24, r17
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	ff 90       	pop	r15
     e0e:	ef 90       	pop	r14
     e10:	df 90       	pop	r13
     e12:	cf 90       	pop	r12
     e14:	bf 90       	pop	r11
     e16:	af 90       	pop	r10
     e18:	9f 90       	pop	r9
     e1a:	08 95       	ret
     e1c:	f8 94       	cli
     e1e:	19 82       	std	Y+1, r1	; 0x01
     e20:	18 82       	st	Y, r1
     e22:	78 94       	sei
     e24:	ee cf       	rjmp	.-36     	; 0xe02 <OSTaskCreate+0x80>
     e26:	78 94       	sei
     e28:	18 e2       	ldi	r17, 0x28	; 40
     e2a:	eb cf       	rjmp	.-42     	; 0xe02 <OSTaskCreate+0x80>

00000e2c <OSInit>:
     e2c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <OSInitHookBegin>
     e30:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <OSIntNesting>
     e34:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <OSLockNesting>
     e38:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <OSTaskCtr>
     e3c:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <OSRunning>
     e40:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <OSCtxSwCtr>
     e44:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <OSCtxSwCtr+0x1>
     e48:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <OSCtxSwCtr+0x2>
     e4c:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <OSCtxSwCtr+0x3>
     e50:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <OSIdleCtr>
     e54:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <OSIdleCtr+0x1>
     e58:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <OSIdleCtr+0x2>
     e5c:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <OSIdleCtr+0x3>
     e60:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <OSRdyGrp>
     e64:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <OSRdyTbl>
     e68:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <OSRdyTbl+0x1>
     e6c:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <OSRdyTbl+0x2>
     e70:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <OSPrioCur>
     e74:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <OSPrioHighRdy>
     e78:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <OSTCBHighRdy+0x1>
     e7c:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <OSTCBHighRdy>
     e80:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <OSTCBCur+0x1>
     e84:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <OSTCBCur>
     e88:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <OSTCBList+0x1>
     e8c:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <OSTCBList>
     e90:	e1 e8       	ldi	r30, 0x81	; 129
     e92:	f5 e0       	ldi	r31, 0x05	; 5
     e94:	11 92       	st	Z+, r1
     e96:	11 92       	st	Z+, r1
     e98:	85 e0       	ldi	r24, 0x05	; 5
     e9a:	e3 3a       	cpi	r30, 0xA3	; 163
     e9c:	f8 07       	cpc	r31, r24
     e9e:	d1 f7       	brne	.-12     	; 0xe94 <OSInit+0x68>
     ea0:	e2 e8       	ldi	r30, 0x82	; 130
     ea2:	f4 e0       	ldi	r31, 0x04	; 4
     ea4:	cf 01       	movw	r24, r30
     ea6:	0f 96       	adiw	r24, 0x0f	; 15
     ea8:	93 83       	std	Z+3, r25	; 0x03
     eaa:	82 83       	std	Z+2, r24	; 0x02
     eac:	fc 01       	movw	r30, r24
     eae:	85 e0       	ldi	r24, 0x05	; 5
     eb0:	e2 37       	cpi	r30, 0x72	; 114
     eb2:	f8 07       	cpc	r31, r24
     eb4:	b9 f7       	brne	.-18     	; 0xea4 <OSInit+0x78>
     eb6:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <OSTCBTbl+0xf3>
     eba:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <OSTCBTbl+0xf2>
     ebe:	82 e8       	ldi	r24, 0x82	; 130
     ec0:	94 e0       	ldi	r25, 0x04	; 4
     ec2:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <OSTCBFreeList+0x1>
     ec6:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <OSTCBFreeList>
     eca:	20 e1       	ldi	r18, 0x10	; 16
     ecc:	41 e8       	ldi	r20, 0x81	; 129
     ece:	54 e0       	ldi	r21, 0x04	; 4
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	86 ef       	ldi	r24, 0xF6	; 246
     ed6:	94 e0       	ldi	r25, 0x04	; 4
     ed8:	0e 94 c1 06 	call	0xd82	; 0xd82 <OSTaskCreate>
     edc:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <OSInitHookEnd>

00000ee0 <OSTaskDel>:
     ee0:	ff 92       	push	r15
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	f0 90 3f 04 	lds	r15, 0x043F	; 0x80043f <OSIntNesting>
     eee:	f1 10       	cpse	r15, r1
     ef0:	76 c0       	rjmp	.+236    	; 0xfde <OSTaskDel+0xfe>
     ef2:	f8 94       	cli
     ef4:	8f 3f       	cpi	r24, 0xFF	; 255
     ef6:	29 f4       	brne	.+10     	; 0xf02 <OSTaskDel+0x22>
     ef8:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <OSTCBCur>
     efc:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <OSTCBCur+0x1>
     f00:	81 85       	ldd	r24, Z+9	; 0x09
     f02:	08 2f       	mov	r16, r24
     f04:	10 e0       	ldi	r17, 0x00	; 0
     f06:	00 0f       	add	r16, r16
     f08:	11 1f       	adc	r17, r17
     f0a:	f8 01       	movw	r30, r16
     f0c:	ef 57       	subi	r30, 0x7F	; 127
     f0e:	fa 4f       	sbci	r31, 0xFA	; 250
     f10:	c0 81       	ld	r28, Z
     f12:	d1 81       	ldd	r29, Z+1	; 0x01
     f14:	20 97       	sbiw	r28, 0x00	; 0
     f16:	09 f4       	brne	.+2      	; 0xf1a <OSTaskDel+0x3a>
     f18:	5e c0       	rjmp	.+188    	; 0xfd6 <OSTaskDel+0xf6>
     f1a:	eb 85       	ldd	r30, Y+11	; 0x0b
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	8c 85       	ldd	r24, Y+12	; 0x0c
     f20:	80 95       	com	r24
     f22:	e5 5c       	subi	r30, 0xC5	; 197
     f24:	fb 4f       	sbci	r31, 0xFB	; 251
     f26:	90 81       	ld	r25, Z
     f28:	89 23       	and	r24, r25
     f2a:	80 83       	st	Z, r24
     f2c:	81 11       	cpse	r24, r1
     f2e:	08 c0       	rjmp	.+16     	; 0xf40 <OSTaskDel+0x60>
     f30:	8d 85       	ldd	r24, Y+13	; 0x0d
     f32:	98 2f       	mov	r25, r24
     f34:	90 95       	com	r25
     f36:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <OSRdyGrp>
     f3a:	89 23       	and	r24, r25
     f3c:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <OSRdyGrp>
     f40:	1f 82       	std	Y+7, r1	; 0x07
     f42:	1e 82       	std	Y+6, r1	; 0x06
     f44:	18 86       	std	Y+8, r1	; 0x08
     f46:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <OSLockNesting>
     f4a:	8f 3f       	cpi	r24, 0xFF	; 255
     f4c:	19 f0       	breq	.+6      	; 0xf54 <OSTaskDel+0x74>
     f4e:	8f 5f       	subi	r24, 0xFF	; 255
     f50:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <OSLockNesting>
     f54:	78 94       	sei
     f56:	f8 94       	cli
     f58:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <OSLockNesting>
     f5c:	88 23       	and	r24, r24
     f5e:	19 f0       	breq	.+6      	; 0xf66 <OSTaskDel+0x86>
     f60:	81 50       	subi	r24, 0x01	; 1
     f62:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <OSLockNesting>
     f66:	ce 01       	movw	r24, r28
     f68:	0e 94 ee 04 	call	0x9dc	; 0x9dc <OSTaskDelHook>
     f6c:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <OSTaskCtr>
     f70:	81 50       	subi	r24, 0x01	; 1
     f72:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <OSTaskCtr>
     f76:	f8 01       	movw	r30, r16
     f78:	ef 57       	subi	r30, 0x7F	; 127
     f7a:	fa 4f       	sbci	r31, 0xFA	; 250
     f7c:	11 82       	std	Z+1, r1	; 0x01
     f7e:	10 82       	st	Z, r1
     f80:	ec 81       	ldd	r30, Y+4	; 0x04
     f82:	fd 81       	ldd	r31, Y+5	; 0x05
     f84:	aa 81       	ldd	r26, Y+2	; 0x02
     f86:	bb 81       	ldd	r27, Y+3	; 0x03
     f88:	30 97       	sbiw	r30, 0x00	; 0
     f8a:	e1 f4       	brne	.+56     	; 0xfc4 <OSTaskDel+0xe4>
     f8c:	15 96       	adiw	r26, 0x05	; 5
     f8e:	1c 92       	st	X, r1
     f90:	1e 92       	st	-X, r1
     f92:	14 97       	sbiw	r26, 0x04	; 4
     f94:	b0 93 30 04 	sts	0x0430, r27	; 0x800430 <OSTCBList+0x1>
     f98:	a0 93 2f 04 	sts	0x042F, r26	; 0x80042f <OSTCBList>
     f9c:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <OSTCBFreeList>
     fa0:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <OSTCBFreeList+0x1>
     fa4:	9b 83       	std	Y+3, r25	; 0x03
     fa6:	8a 83       	std	Y+2, r24	; 0x02
     fa8:	d0 93 36 04 	sts	0x0436, r29	; 0x800436 <OSTCBFreeList+0x1>
     fac:	c0 93 35 04 	sts	0x0435, r28	; 0x800435 <OSTCBFreeList>
     fb0:	78 94       	sei
     fb2:	0e 94 de 05 	call	0xbbc	; 0xbbc <OS_Sched>
     fb6:	8f 2d       	mov	r24, r15
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	ff 90       	pop	r15
     fc2:	08 95       	ret
     fc4:	b3 83       	std	Z+3, r27	; 0x03
     fc6:	a2 83       	std	Z+2, r26	; 0x02
     fc8:	aa 81       	ldd	r26, Y+2	; 0x02
     fca:	bb 81       	ldd	r27, Y+3	; 0x03
     fcc:	15 96       	adiw	r26, 0x05	; 5
     fce:	fc 93       	st	X, r31
     fd0:	ee 93       	st	-X, r30
     fd2:	14 97       	sbiw	r26, 0x04	; 4
     fd4:	e3 cf       	rjmp	.-58     	; 0xf9c <OSTaskDel+0xbc>
     fd6:	78 94       	sei
     fd8:	9c e3       	ldi	r25, 0x3C	; 60
     fda:	f9 2e       	mov	r15, r25
     fdc:	ec cf       	rjmp	.-40     	; 0xfb6 <OSTaskDel+0xd6>
     fde:	8f e3       	ldi	r24, 0x3F	; 63
     fe0:	f8 2e       	mov	r15, r24
     fe2:	e9 cf       	rjmp	.-46     	; 0xfb6 <OSTaskDel+0xd6>

00000fe4 <OSTaskDelReq>:
     fe4:	8f 3f       	cpi	r24, 0xFF	; 255
     fe6:	41 f4       	brne	.+16     	; 0xff8 <OSTaskDelReq+0x14>
     fe8:	f8 94       	cli
     fea:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <OSTCBCur>
     fee:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <OSTCBCur+0x1>
     ff2:	86 85       	ldd	r24, Z+14	; 0x0e
     ff4:	78 94       	sei
     ff6:	08 95       	ret
     ff8:	f8 94       	cli
     ffa:	e8 2f       	mov	r30, r24
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	ee 0f       	add	r30, r30
    1000:	ff 1f       	adc	r31, r31
    1002:	ef 57       	subi	r30, 0x7F	; 127
    1004:	fa 4f       	sbci	r31, 0xFA	; 250
    1006:	01 90       	ld	r0, Z+
    1008:	f0 81       	ld	r31, Z
    100a:	e0 2d       	mov	r30, r0
    100c:	8b e0       	ldi	r24, 0x0B	; 11
    100e:	30 97       	sbiw	r30, 0x00	; 0
    1010:	89 f3       	breq	.-30     	; 0xff4 <OSTaskDelReq+0x10>
    1012:	8e e3       	ldi	r24, 0x3E	; 62
    1014:	86 87       	std	Z+14, r24	; 0x0e
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	ed cf       	rjmp	.-38     	; 0xff4 <OSTaskDelReq+0x10>

0000101a <OSTimeDly>:
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	11 f0       	breq	.+4      	; 0x1022 <OSTimeDly+0x8>
    101e:	0c 94 39 06 	jmp	0xc72	; 0xc72 <OSTimeDly.part.0>
    1022:	08 95       	ret

00001024 <OSTimeDlyHMSM>:
    1024:	cf 92       	push	r12
    1026:	df 92       	push	r13
    1028:	ef 92       	push	r14
    102a:	ff 92       	push	r15
    102c:	81 11       	cpse	r24, r1
    102e:	0d c0       	rjmp	.+26     	; 0x104a <OSTimeDlyHMSM+0x26>
    1030:	61 11       	cpse	r22, r1
    1032:	0b c0       	rjmp	.+22     	; 0x104a <OSTimeDlyHMSM+0x26>
    1034:	41 11       	cpse	r20, r1
    1036:	0c c0       	rjmp	.+24     	; 0x1050 <OSTimeDlyHMSM+0x2c>
    1038:	21 15       	cp	r18, r1
    103a:	31 05       	cpc	r19, r1
    103c:	61 f4       	brne	.+24     	; 0x1056 <OSTimeDlyHMSM+0x32>
    103e:	84 e5       	ldi	r24, 0x54	; 84
    1040:	ff 90       	pop	r15
    1042:	ef 90       	pop	r14
    1044:	df 90       	pop	r13
    1046:	cf 90       	pop	r12
    1048:	08 95       	ret
    104a:	6c 33       	cpi	r22, 0x3C	; 60
    104c:	08 f0       	brcs	.+2      	; 0x1050 <OSTimeDlyHMSM+0x2c>
    104e:	4f c0       	rjmp	.+158    	; 0x10ee <OSTimeDlyHMSM+0xca>
    1050:	4c 33       	cpi	r20, 0x3C	; 60
    1052:	08 f0       	brcs	.+2      	; 0x1056 <OSTimeDlyHMSM+0x32>
    1054:	4e c0       	rjmp	.+156    	; 0x10f2 <OSTimeDlyHMSM+0xce>
    1056:	28 3e       	cpi	r18, 0xE8	; 232
    1058:	93 e0       	ldi	r25, 0x03	; 3
    105a:	39 07       	cpc	r19, r25
    105c:	08 f0       	brcs	.+2      	; 0x1060 <OSTimeDlyHMSM+0x3c>
    105e:	4b c0       	rjmp	.+150    	; 0x10f6 <OSTimeDlyHMSM+0xd2>
    1060:	f9 01       	movw	r30, r18
    1062:	58 2f       	mov	r21, r24
    1064:	26 2f       	mov	r18, r22
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	ac e3       	ldi	r26, 0x3C	; 60
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__umulhisi3>
    1070:	6b 01       	movw	r12, r22
    1072:	7c 01       	movw	r14, r24
    1074:	c4 0e       	add	r12, r20
    1076:	d1 1c       	adc	r13, r1
    1078:	e1 1c       	adc	r14, r1
    107a:	f1 1c       	adc	r15, r1
    107c:	25 2f       	mov	r18, r21
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	a0 e1       	ldi	r26, 0x10	; 16
    1082:	be e0       	ldi	r27, 0x0E	; 14
    1084:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__umulhisi3>
    1088:	a7 01       	movw	r20, r14
    108a:	96 01       	movw	r18, r12
    108c:	26 0f       	add	r18, r22
    108e:	37 1f       	adc	r19, r23
    1090:	48 1f       	adc	r20, r24
    1092:	59 1f       	adc	r21, r25
    1094:	a4 e6       	ldi	r26, 0x64	; 100
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__muluhisi3>
    109c:	6b 01       	movw	r12, r22
    109e:	7c 01       	movw	r14, r24
    10a0:	9f 01       	movw	r18, r30
    10a2:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__umulhisi3>
    10a6:	6c 50       	subi	r22, 0x0C	; 12
    10a8:	7e 4f       	sbci	r23, 0xFE	; 254
    10aa:	8f 4f       	sbci	r24, 0xFF	; 255
    10ac:	9f 4f       	sbci	r25, 0xFF	; 255
    10ae:	28 ee       	ldi	r18, 0xE8	; 232
    10b0:	33 e0       	ldi	r19, 0x03	; 3
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	0e 94 c9 08 	call	0x1192	; 0x1192 <__udivmodsi4>
    10ba:	d7 01       	movw	r26, r14
    10bc:	c6 01       	movw	r24, r12
    10be:	82 0f       	add	r24, r18
    10c0:	93 1f       	adc	r25, r19
    10c2:	a4 1f       	adc	r26, r20
    10c4:	b5 1f       	adc	r27, r21
    10c6:	7d 01       	movw	r14, r26
    10c8:	0e 94 0d 08 	call	0x101a	; 0x101a <OSTimeDly>
    10cc:	e1 14       	cp	r14, r1
    10ce:	f1 04       	cpc	r15, r1
    10d0:	11 f4       	brne	.+4      	; 0x10d6 <OSTimeDlyHMSM+0xb2>
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	b5 cf       	rjmp	.-150    	; 0x1040 <OSTimeDlyHMSM+0x1c>
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e8       	ldi	r25, 0x80	; 128
    10da:	0e 94 39 06 	call	0xc72	; 0xc72 <OSTimeDly.part.0>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e8       	ldi	r25, 0x80	; 128
    10e2:	0e 94 39 06 	call	0xc72	; 0xc72 <OSTimeDly.part.0>
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	e8 1a       	sub	r14, r24
    10ea:	f1 08       	sbc	r15, r1
    10ec:	ef cf       	rjmp	.-34     	; 0x10cc <OSTimeDlyHMSM+0xa8>
    10ee:	81 e5       	ldi	r24, 0x51	; 81
    10f0:	a7 cf       	rjmp	.-178    	; 0x1040 <OSTimeDlyHMSM+0x1c>
    10f2:	82 e5       	ldi	r24, 0x52	; 82
    10f4:	a5 cf       	rjmp	.-182    	; 0x1040 <OSTimeDlyHMSM+0x1c>
    10f6:	83 e5       	ldi	r24, 0x53	; 83
    10f8:	a3 cf       	rjmp	.-186    	; 0x1040 <OSTimeDlyHMSM+0x1c>

000010fa <main>:

}

int main( void )
{
 robo_Setup(); /* initialize HAL for RoboKar */
    10fa:	0e 94 c8 02 	call	0x590	; 0x590 <robo_Setup>
 OSInit(); /* initialize UCOS-II kernel */
    10fe:	0e 94 16 07 	call	0xe2c	; 0xe2c <OSInit>

 robo_motorSpeed(STOP_SPEED, STOP_SPEED); /* Stop the robot, value STOP_SPEED == 0 */
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <robo_motorSpeed>
 myrobot.rspeed = STOP_SPEED; /* Initialize myrobot states */
    110e:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <myrobot+0x1>
    1112:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <myrobot>
 myrobot.lspeed = STOP_SPEED;
    1116:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <myrobot+0x3>
    111a:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <myrobot+0x2>
 myrobot.obstacle = 0; /* No collisioin */
    111e:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <myrobot+0x4>

 OSTaskCreate(TaskStart, /* create TaskStart Task */
    1122:	21 e0       	ldi	r18, 0x01	; 1
    1124:	4e e9       	ldi	r20, 0x9E	; 158
    1126:	53 e0       	ldi	r21, 0x03	; 3
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	8a ef       	ldi	r24, 0xFA	; 250
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 c1 06 	call	0xd82	; 0xd82 <OSTaskCreate>
 (void *)0,
 (void *)&TaskStartStk[TASK_STK_SZ - 1],
 TASK_START_PRIO);
 robo_Honk(); robo_wait4goPress(); /* Wait for to GO */
    1134:	0e 94 8e 02 	call	0x51c	; 0x51c <robo_Honk>
    1138:	0e 94 b4 02 	call	0x568	; 0x568 <robo_wait4goPress>
 OSStart(); /* Start multitasking */
    113c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <OSStart>
    1140:	ff cf       	rjmp	.-2      	; 0x1140 <main+0x46>

00001142 <__udivmodhi4>:
    1142:	aa 1b       	sub	r26, r26
    1144:	bb 1b       	sub	r27, r27
    1146:	51 e1       	ldi	r21, 0x11	; 17
    1148:	07 c0       	rjmp	.+14     	; 0x1158 <__udivmodhi4_ep>

0000114a <__udivmodhi4_loop>:
    114a:	aa 1f       	adc	r26, r26
    114c:	bb 1f       	adc	r27, r27
    114e:	a6 17       	cp	r26, r22
    1150:	b7 07       	cpc	r27, r23
    1152:	10 f0       	brcs	.+4      	; 0x1158 <__udivmodhi4_ep>
    1154:	a6 1b       	sub	r26, r22
    1156:	b7 0b       	sbc	r27, r23

00001158 <__udivmodhi4_ep>:
    1158:	88 1f       	adc	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	5a 95       	dec	r21
    115e:	a9 f7       	brne	.-22     	; 0x114a <__udivmodhi4_loop>
    1160:	80 95       	com	r24
    1162:	90 95       	com	r25
    1164:	bc 01       	movw	r22, r24
    1166:	cd 01       	movw	r24, r26
    1168:	08 95       	ret

0000116a <__divmodhi4>:
    116a:	97 fb       	bst	r25, 7
    116c:	07 2e       	mov	r0, r23
    116e:	16 f4       	brtc	.+4      	; 0x1174 <__divmodhi4+0xa>
    1170:	00 94       	com	r0
    1172:	07 d0       	rcall	.+14     	; 0x1182 <__divmodhi4_neg1>
    1174:	77 fd       	sbrc	r23, 7
    1176:	09 d0       	rcall	.+18     	; 0x118a <__divmodhi4_neg2>
    1178:	0e 94 a1 08 	call	0x1142	; 0x1142 <__udivmodhi4>
    117c:	07 fc       	sbrc	r0, 7
    117e:	05 d0       	rcall	.+10     	; 0x118a <__divmodhi4_neg2>
    1180:	3e f4       	brtc	.+14     	; 0x1190 <__divmodhi4_exit>

00001182 <__divmodhi4_neg1>:
    1182:	90 95       	com	r25
    1184:	81 95       	neg	r24
    1186:	9f 4f       	sbci	r25, 0xFF	; 255
    1188:	08 95       	ret

0000118a <__divmodhi4_neg2>:
    118a:	70 95       	com	r23
    118c:	61 95       	neg	r22
    118e:	7f 4f       	sbci	r23, 0xFF	; 255

00001190 <__divmodhi4_exit>:
    1190:	08 95       	ret

00001192 <__udivmodsi4>:
    1192:	a1 e2       	ldi	r26, 0x21	; 33
    1194:	1a 2e       	mov	r1, r26
    1196:	aa 1b       	sub	r26, r26
    1198:	bb 1b       	sub	r27, r27
    119a:	fd 01       	movw	r30, r26
    119c:	0d c0       	rjmp	.+26     	; 0x11b8 <__udivmodsi4_ep>

0000119e <__udivmodsi4_loop>:
    119e:	aa 1f       	adc	r26, r26
    11a0:	bb 1f       	adc	r27, r27
    11a2:	ee 1f       	adc	r30, r30
    11a4:	ff 1f       	adc	r31, r31
    11a6:	a2 17       	cp	r26, r18
    11a8:	b3 07       	cpc	r27, r19
    11aa:	e4 07       	cpc	r30, r20
    11ac:	f5 07       	cpc	r31, r21
    11ae:	20 f0       	brcs	.+8      	; 0x11b8 <__udivmodsi4_ep>
    11b0:	a2 1b       	sub	r26, r18
    11b2:	b3 0b       	sbc	r27, r19
    11b4:	e4 0b       	sbc	r30, r20
    11b6:	f5 0b       	sbc	r31, r21

000011b8 <__udivmodsi4_ep>:
    11b8:	66 1f       	adc	r22, r22
    11ba:	77 1f       	adc	r23, r23
    11bc:	88 1f       	adc	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	1a 94       	dec	r1
    11c2:	69 f7       	brne	.-38     	; 0x119e <__udivmodsi4_loop>
    11c4:	60 95       	com	r22
    11c6:	70 95       	com	r23
    11c8:	80 95       	com	r24
    11ca:	90 95       	com	r25
    11cc:	9b 01       	movw	r18, r22
    11ce:	ac 01       	movw	r20, r24
    11d0:	bd 01       	movw	r22, r26
    11d2:	cf 01       	movw	r24, r30
    11d4:	08 95       	ret

000011d6 <__umulhisi3>:
    11d6:	a2 9f       	mul	r26, r18
    11d8:	b0 01       	movw	r22, r0
    11da:	b3 9f       	mul	r27, r19
    11dc:	c0 01       	movw	r24, r0
    11de:	a3 9f       	mul	r26, r19
    11e0:	70 0d       	add	r23, r0
    11e2:	81 1d       	adc	r24, r1
    11e4:	11 24       	eor	r1, r1
    11e6:	91 1d       	adc	r25, r1
    11e8:	b2 9f       	mul	r27, r18
    11ea:	70 0d       	add	r23, r0
    11ec:	81 1d       	adc	r24, r1
    11ee:	11 24       	eor	r1, r1
    11f0:	91 1d       	adc	r25, r1
    11f2:	08 95       	ret

000011f4 <__muluhisi3>:
    11f4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__umulhisi3>
    11f8:	a5 9f       	mul	r26, r21
    11fa:	90 0d       	add	r25, r0
    11fc:	b4 9f       	mul	r27, r20
    11fe:	90 0d       	add	r25, r0
    1200:	a4 9f       	mul	r26, r20
    1202:	80 0d       	add	r24, r0
    1204:	91 1d       	adc	r25, r1
    1206:	11 24       	eor	r1, r1
    1208:	08 95       	ret

0000120a <_exit>:
    120a:	f8 94       	cli

0000120c <__stop_program>:
    120c:	ff cf       	rjmp	.-2      	; 0x120c <__stop_program>
