
robokargame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  00001232  000012c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001232  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000389  0080021a  0080021a  000013e0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001438  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000146e  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000815  00000000  00000000  000029ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a3a  00000000  00000000  00003203  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00003c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000621  00000000  00000000  00003ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a0  00000000  00000000  000042c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00004365  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e3       	ldi	r30, 0x32	; 50
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 3a       	cpi	r26, 0xA3	; 163
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 8f 08 	call	0x111e	; 0x111e <main>
      9e:	0c 94 17 09 	jmp	0x122e	; 0x122e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CheckCollision>:
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ) /* obstacle? */
     myrobot.obstacle = 1; /* signal obstacle present */
      a6:	c1 e0       	ldi	r28, 0x01	; 1
/*------High pririority task----------*/
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ) /* obstacle? */
      a8:	0e 94 58 02 	call	0x4b0	; 0x4b0 <robo_proxSensor>
      ac:	01 97       	sbiw	r24, 0x01	; 1
      ae:	51 f4       	brne	.+20     	; 0xc4 <CheckCollision+0x1e>
     myrobot.obstacle = 1; /* signal obstacle present */
      b0:	c0 93 9e 02 	sts	0x029E, r28	; 0x80029e <myrobot+0x4>
 else
     myrobot.obstacle = 0; /* signal no obstacle */

 OSTimeDlyHMSM(0, 0, 0, 100); /* Task period ~ 100 ms */
      b4:	24 e6       	ldi	r18, 0x64	; 100
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	40 e0       	ldi	r20, 0x00	; 0
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 24 08 	call	0x1048	; 0x1048 <OSTimeDlyHMSM>
/*------High pririority task----------*/
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ) /* obstacle? */
      c2:	f2 cf       	rjmp	.-28     	; 0xa8 <CheckCollision+0x2>
     myrobot.obstacle = 1; /* signal obstacle present */
 else
     myrobot.obstacle = 0; /* signal no obstacle */
      c4:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <myrobot+0x4>
      c8:	f5 cf       	rjmp	.-22     	; 0xb4 <CheckCollision+0xe>

000000ca <CntrlMotors>:

 for(;;)
 {
  speed_r = myrobot.rspeed;
  speed_l = myrobot.lspeed;
  robo_motorSpeed(0, 0);
      ca:	70 e0       	ldi	r23, 0x00	; 0
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <robo_motorSpeed>
  OSTimeDlyHMSM(0, 0, 0, 10); /* Task period ~ 250 ms */
      d6:	2a e0       	ldi	r18, 0x0A	; 10
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	40 e0       	ldi	r20, 0x00	; 0
      dc:	60 e0       	ldi	r22, 0x00	; 0
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	0e 94 24 08 	call	0x1048	; 0x1048 <OSTimeDlyHMSM>
      e4:	f2 cf       	rjmp	.-28     	; 0xca <CntrlMotors>

000000e6 <Navig>:
   myrobot.rspeed = -LOW_SPEED; /* REVERSE */
   myrobot.lspeed = -LOW_SPEED;
  }
  else /* obstacle is far away & no collision */
  {
   myrobot.rspeed = MEDIUM_SPEED; /* move forward with medium speed */
      e6:	c7 e3       	ldi	r28, 0x37	; 55
      e8:	d0 e0       	ldi	r29, 0x00	; 0
{
 for (;;)
 {
  if (myrobot.obstacle == 1) /* If blocked then reverse */
  {
   myrobot.rspeed = -LOW_SPEED; /* REVERSE */
      ea:	0d ed       	ldi	r16, 0xDD	; 221
      ec:	1f ef       	ldi	r17, 0xFF	; 255
	} else if (robo_lineSensor() == 1){
		myrobot.rspeed = LOW_SPEED; 
   		myrobot.lspeed = -LOW_SPEED;
	}

	myrobot.rspeed = LOW_SPEED; 
      ee:	83 e2       	ldi	r24, 0x23	; 35
      f0:	e8 2e       	mov	r14, r24
      f2:	f1 2c       	mov	r15, r1
  {
    myrobot.rspeed = - MEDIUM_SPEED; 
   myrobot.lspeed = HIGH_SPEED; /* corner right */
  }else if (robo_lineSensor() == 6)
  {
    myrobot.rspeed = HIGH_SPEED; 
      f4:	90 e5       	ldi	r25, 0x50	; 80
      f6:	c9 2e       	mov	r12, r25
      f8:	d1 2c       	mov	r13, r1
   myrobot.lspeed = - MEDIUM_SPEED; /* corner left */
      fa:	29 ec       	ldi	r18, 0xC9	; 201
      fc:	a2 2e       	mov	r10, r18
      fe:	bb 24       	eor	r11, r11
     100:	ba 94       	dec	r11

void Navig (void *data)
{
 for (;;)
 {
  if (myrobot.obstacle == 1) /* If blocked then reverse */
     102:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <myrobot+0x4>
     106:	81 30       	cpi	r24, 0x01	; 1
     108:	49 f5       	brne	.+82     	; 0x15c <Navig+0x76>
  {
   myrobot.rspeed = -LOW_SPEED; /* REVERSE */
     10a:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     10e:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
   myrobot.lspeed = -LOW_SPEED;
     112:	10 93 9d 02 	sts	0x029D, r17	; 0x80029d <myrobot+0x3>
     116:	00 93 9c 02 	sts	0x029C, r16	; 0x80029c <myrobot+0x2>
   myrobot.rspeed = MEDIUM_SPEED; /* move forward with medium speed */
   myrobot.lspeed = MEDIUM_SPEED;
  }

//   for line sensor
  if (robo_lineSensor() == 2 || robo_lineSensor() == 7) /* go straight */
     11a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <robo_lineSensor>
     11e:	02 97       	sbiw	r24, 0x02	; 2
     120:	31 f5       	brne	.+76     	; 0x16e <Navig+0x88>
  {
   myrobot.rspeed = MEDIUM_SPEED;
     122:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     126:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
   myrobot.lspeed = MEDIUM_SPEED;
  }else if (robo_lineSensor() == 1)
  {
    myrobot.rspeed = -LOW_SPEED; /* turn right */
   myrobot.lspeed = MEDIUM_SPEED;
     12a:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <myrobot+0x3>
     12e:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <myrobot+0x2>
   	myrobot.lspeed = LOW_SPEED;

  }

// for light sensor
  if (robo_lightSensor() > 60) /* it is too bright, I'm photophobia */
     132:	0e 94 64 02 	call	0x4c8	; 0x4c8 <robo_lightSensor>
     136:	cd 97       	sbiw	r24, 0x3d	; 61
     138:	0c f4       	brge	.+2      	; 0x13c <Navig+0x56>
     13a:	65 c0       	rjmp	.+202    	; 0x206 <Navig+0x120>
  {
   myrobot.rspeed = -LOW_SPEED; /* turn right to avoid */
     13c:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     140:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
   myrobot.lspeed = LOW_SPEED;
     144:	f0 92 9d 02 	sts	0x029D, r15	; 0x80029d <myrobot+0x3>
     148:	e0 92 9c 02 	sts	0x029C, r14	; 0x80029c <myrobot+0x2>
  } else{
    myrobot.rspeed = MEDIUM_SPEED; /* move forward with medium speed */
   myrobot.lspeed = MEDIUM_SPEED;
  }

  OSTimeDlyHMSM(0, 0, 0, 10); /* Task period ~ 500 ms */
     14c:	2a e0       	ldi	r18, 0x0A	; 10
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	40 e0       	ldi	r20, 0x00	; 0
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	0e 94 24 08 	call	0x1048	; 0x1048 <OSTimeDlyHMSM>

void Navig (void *data)
{
 for (;;)
 {
  if (myrobot.obstacle == 1) /* If blocked then reverse */
     15a:	d3 cf       	rjmp	.-90     	; 0x102 <Navig+0x1c>
   myrobot.rspeed = -LOW_SPEED; /* REVERSE */
   myrobot.lspeed = -LOW_SPEED;
  }
  else /* obstacle is far away & no collision */
  {
   myrobot.rspeed = MEDIUM_SPEED; /* move forward with medium speed */
     15c:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     160:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
   myrobot.lspeed = MEDIUM_SPEED;
     164:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <myrobot+0x3>
     168:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <myrobot+0x2>
     16c:	d6 cf       	rjmp	.-84     	; 0x11a <Navig+0x34>
  }

//   for line sensor
  if (robo_lineSensor() == 2 || robo_lineSensor() == 7) /* go straight */
     16e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <robo_lineSensor>
     172:	07 97       	sbiw	r24, 0x07	; 7
     174:	b1 f2       	breq	.-84     	; 0x122 <Navig+0x3c>
  {
   myrobot.rspeed = MEDIUM_SPEED;
   myrobot.lspeed = MEDIUM_SPEED;
  }else if (robo_lineSensor() == 1)
     176:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <robo_lineSensor>
     17a:	01 97       	sbiw	r24, 0x01	; 1
     17c:	29 f4       	brne	.+10     	; 0x188 <Navig+0xa2>
  {
    myrobot.rspeed = -LOW_SPEED; /* turn right */
     17e:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     182:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
     186:	d1 cf       	rjmp	.-94     	; 0x12a <Navig+0x44>
   myrobot.lspeed = MEDIUM_SPEED;
  }else if (robo_lineSensor() == 4)
     188:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <robo_lineSensor>
     18c:	04 97       	sbiw	r24, 0x04	; 4
     18e:	49 f4       	brne	.+18     	; 0x1a2 <Navig+0xbc>
  {
    myrobot.rspeed = MEDIUM_SPEED; 
     190:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     194:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
    myrobot.rspeed = HIGH_SPEED; 
   myrobot.lspeed = - MEDIUM_SPEED; /* corner left */
  }else if (robo_lineSensor() == 0)
  {
    myrobot.rspeed = -LOW_SPEED; 
   myrobot.lspeed = -LOW_SPEED; /* stranded straight */
     198:	10 93 9d 02 	sts	0x029D, r17	; 0x80029d <myrobot+0x3>
     19c:	00 93 9c 02 	sts	0x029C, r16	; 0x80029c <myrobot+0x2>
     1a0:	c8 cf       	rjmp	.-112    	; 0x132 <Navig+0x4c>
   myrobot.lspeed = MEDIUM_SPEED;
  }else if (robo_lineSensor() == 4)
  {
    myrobot.rspeed = MEDIUM_SPEED; 
   myrobot.lspeed = -LOW_SPEED; /* turn left */
  }else if (robo_lineSensor() == 3)
     1a2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <robo_lineSensor>
     1a6:	03 97       	sbiw	r24, 0x03	; 3
     1a8:	49 f4       	brne	.+18     	; 0x1bc <Navig+0xd6>
  {
    myrobot.rspeed = - MEDIUM_SPEED; 
     1aa:	b0 92 9b 02 	sts	0x029B, r11	; 0x80029b <myrobot+0x1>
     1ae:	a0 92 9a 02 	sts	0x029A, r10	; 0x80029a <myrobot>
   myrobot.lspeed = HIGH_SPEED; /* corner right */
     1b2:	d0 92 9d 02 	sts	0x029D, r13	; 0x80029d <myrobot+0x3>
     1b6:	c0 92 9c 02 	sts	0x029C, r12	; 0x80029c <myrobot+0x2>
     1ba:	bb cf       	rjmp	.-138    	; 0x132 <Navig+0x4c>
  }else if (robo_lineSensor() == 6)
     1bc:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <robo_lineSensor>
     1c0:	06 97       	sbiw	r24, 0x06	; 6
     1c2:	49 f4       	brne	.+18     	; 0x1d6 <Navig+0xf0>
  {
    myrobot.rspeed = HIGH_SPEED; 
     1c4:	d0 92 9b 02 	sts	0x029B, r13	; 0x80029b <myrobot+0x1>
     1c8:	c0 92 9a 02 	sts	0x029A, r12	; 0x80029a <myrobot>
   myrobot.lspeed = - MEDIUM_SPEED; /* corner left */
     1cc:	b0 92 9d 02 	sts	0x029D, r11	; 0x80029d <myrobot+0x3>
     1d0:	a0 92 9c 02 	sts	0x029C, r10	; 0x80029c <myrobot+0x2>
     1d4:	ae cf       	rjmp	.-164    	; 0x132 <Navig+0x4c>
  }else if (robo_lineSensor() == 0)
     1d6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <robo_lineSensor>
     1da:	89 2b       	or	r24, r25
     1dc:	29 f4       	brne	.+10     	; 0x1e8 <Navig+0x102>
  {
    myrobot.rspeed = -LOW_SPEED; 
     1de:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     1e2:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
     1e6:	d8 cf       	rjmp	.-80     	; 0x198 <Navig+0xb2>
   myrobot.lspeed = -LOW_SPEED; /* stranded straight */
  }
  else{
    // off track
	if (robo_lineSensor() == 4){
     1e8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <robo_lineSensor>
     1ec:	04 97       	sbiw	r24, 0x04	; 4
     1ee:	11 f0       	breq	.+4      	; 0x1f4 <Navig+0x10e>
		myrobot.rspeed = -LOW_SPEED; 
   		myrobot.lspeed = LOW_SPEED;
	} else if (robo_lineSensor() == 1){
     1f0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <robo_lineSensor>
		myrobot.rspeed = LOW_SPEED; 
   		myrobot.lspeed = -LOW_SPEED;
	}

	myrobot.rspeed = LOW_SPEED; 
     1f4:	f0 92 9b 02 	sts	0x029B, r15	; 0x80029b <myrobot+0x1>
     1f8:	e0 92 9a 02 	sts	0x029A, r14	; 0x80029a <myrobot>
   	myrobot.lspeed = LOW_SPEED;
     1fc:	f0 92 9d 02 	sts	0x029D, r15	; 0x80029d <myrobot+0x3>
     200:	e0 92 9c 02 	sts	0x029C, r14	; 0x80029c <myrobot+0x2>
     204:	96 cf       	rjmp	.-212    	; 0x132 <Navig+0x4c>
  if (robo_lightSensor() > 60) /* it is too bright, I'm photophobia */
  {
   myrobot.rspeed = -LOW_SPEED; /* turn right to avoid */
   myrobot.lspeed = LOW_SPEED;
  } else{
    myrobot.rspeed = MEDIUM_SPEED; /* move forward with medium speed */
     206:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     20a:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
   myrobot.lspeed = MEDIUM_SPEED;
     20e:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <myrobot+0x3>
     212:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <myrobot+0x2>
     216:	9a cf       	rjmp	.-204    	; 0x14c <Navig+0x66>

00000218 <TaskStart>:

/*------Highest pririority task----------*/
/* Create all other tasks here */
void TaskStart( void *data )
{
 OS_ticks_init(); /* enable RTOS timer tick */
     218:	0e 94 cb 02 	call	0x596	; 0x596 <OS_ticks_init>

 OSTaskCreate(CheckCollision , /* Task function */
     21c:	22 e0       	ldi	r18, 0x02	; 2
     21e:	49 e9       	ldi	r20, 0x99	; 153
     220:	52 e0       	ldi	r21, 0x02	; 2
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	83 e5       	ldi	r24, 0x53	; 83
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 d3 06 	call	0xda6	; 0xda6 <OSTaskCreate>
 (void *)0, /* nothing passed to task */
 (void *)&ChkCollideStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_CHKCOLLIDE_PRIO); /* priority of task */

 OSTaskCreate(CntrlMotors , /* Task function */
     22e:	23 e0       	ldi	r18, 0x03	; 3
     230:	4e e1       	ldi	r20, 0x1E	; 30
     232:	53 e0       	ldi	r21, 0x03	; 3
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	60 e0       	ldi	r22, 0x00	; 0
     238:	85 e6       	ldi	r24, 0x65	; 101
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0e 94 d3 06 	call	0xda6	; 0xda6 <OSTaskCreate>
 (void *)0, /* nothing passed to task */
 (void *)&CtrlmotorStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_CTRLMOTOR_PRIO); /* priority of task */

 OSTaskCreate(Navig, /* Task function */
     240:	24 e0       	ldi	r18, 0x04	; 4
     242:	4e e1       	ldi	r20, 0x1E	; 30
     244:	54 e0       	ldi	r21, 0x04	; 4
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	60 e0       	ldi	r22, 0x00	; 0
     24a:	83 e7       	ldi	r24, 0x73	; 115
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 d3 06 	call	0xda6	; 0xda6 <OSTaskCreate>
 TASK_NAVIG_PRIO); /* priority of task */

 while(1)
 {
  OSTimeDlyHMSM(0, 0, 5, 0); /* Task period ~ 5 secs, argument position: HOURS, MINUTES, SECONDS, and MILLISECONDS S*/ 
  robo_LED_toggle(); /* Show that we are alive */
     252:	c1 e0       	ldi	r28, 0x01	; 1
 (void *)&NavigStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_NAVIG_PRIO); /* priority of task */

 while(1)
 {
  OSTimeDlyHMSM(0, 0, 5, 0); /* Task period ~ 5 secs, argument position: HOURS, MINUTES, SECONDS, and MILLISECONDS S*/ 
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	45 e0       	ldi	r20, 0x05	; 5
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	0e 94 24 08 	call	0x1048	; 0x1048 <OSTimeDlyHMSM>
  robo_LED_toggle(); /* Show that we are alive */
     262:	85 b1       	in	r24, 0x05	; 5
     264:	8c 27       	eor	r24, r28
     266:	85 b9       	out	0x05, r24	; 5
     268:	f5 cf       	rjmp	.-22     	; 0x254 <TaskStart+0x3c>

0000026a <ADC_init>:
     26a:	80 e4       	ldi	r24, 0x40	; 64
     26c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     270:	86 e8       	ldi	r24, 0x86	; 134
     272:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     276:	08 95       	ret

00000278 <ADC_read>:
     278:	f8 94       	cli
     27a:	80 64       	ori	r24, 0x40	; 64
     27c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     280:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     284:	80 64       	ori	r24, 0x40	; 64
     286:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     28a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     28e:	84 ff       	sbrs	r24, 4
     290:	fc cf       	rjmp	.-8      	; 0x28a <ADC_read+0x12>
     292:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     296:	80 61       	ori	r24, 0x10	; 16
     298:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     29c:	78 94       	sei
     29e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     2a2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     2a6:	93 70       	andi	r25, 0x03	; 3
     2a8:	08 95       	ret

000002aa <PWM8_write>:
     2aa:	81 11       	cpse	r24, r1
     2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <PWM8_write+0xe>
     2ae:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     2b2:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     2b6:	08 95       	ret
     2b8:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     2bc:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     2c0:	08 95       	ret

000002c2 <motor_init>:
     2c2:	8a b1       	in	r24, 0x0a	; 10
     2c4:	80 6f       	ori	r24, 0xF0	; 240
     2c6:	8a b9       	out	0x0a, r24	; 10
     2c8:	8b b1       	in	r24, 0x0b	; 11
     2ca:	8f 70       	andi	r24, 0x0F	; 15
     2cc:	8b b9       	out	0x0b, r24	; 11
     2ce:	81 ea       	ldi	r24, 0xA1	; 161
     2d0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     2d4:	83 e0       	ldi	r24, 0x03	; 3
     2d6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     2da:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     2de:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     2e2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     2e6:	a8 e8       	ldi	r26, 0x88	; 136
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	1c 92       	st	X, r1
     2ec:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     2f0:	ea e8       	ldi	r30, 0x8A	; 138
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	10 82       	st	Z, r1
     2f6:	84 b1       	in	r24, 0x04	; 4
     2f8:	86 60       	ori	r24, 0x06	; 6
     2fa:	84 b9       	out	0x04, r24	; 4
     2fc:	11 96       	adiw	r26, 0x01	; 1
     2fe:	1c 92       	st	X, r1
     300:	1e 92       	st	-X, r1
     302:	11 82       	std	Z+1, r1	; 0x01
     304:	10 82       	st	Z, r1
     306:	08 95       	ret

00000308 <motor_set_speed>:
     308:	77 ff       	sbrs	r23, 7
     30a:	02 c0       	rjmp	.+4      	; 0x310 <motor_set_speed+0x8>
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	65 36       	cpi	r22, 0x65	; 101
     312:	71 05       	cpc	r23, r1
     314:	14 f0       	brlt	.+4      	; 0x31a <motor_set_speed+0x12>
     316:	64 e6       	ldi	r22, 0x64	; 100
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	9b 01       	movw	r18, r22
     31c:	22 0f       	add	r18, r18
     31e:	33 1f       	adc	r19, r19
     320:	75 95       	asr	r23
     322:	67 95       	ror	r22
     324:	62 0f       	add	r22, r18
     326:	73 1f       	adc	r23, r19
     328:	81 11       	cpse	r24, r1
     32a:	09 c0       	rjmp	.+18     	; 0x33e <motor_set_speed+0x36>
     32c:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     330:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     334:	70 93 20 04 	sts	0x0420, r23	; 0x800420 <rightWst+0x1>
     338:	60 93 1f 04 	sts	0x041F, r22	; 0x80041f <rightWst>
     33c:	08 95       	ret
     33e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     342:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     346:	70 93 24 04 	sts	0x0424, r23	; 0x800424 <leftWst+0x1>
     34a:	60 93 23 04 	sts	0x0423, r22	; 0x800423 <leftWst>
     34e:	08 95       	ret

00000350 <motor_set_dir>:
     350:	cf 93       	push	r28
     352:	c6 2f       	mov	r28, r22
     354:	26 2f       	mov	r18, r22
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	81 11       	cpse	r24, r1
     35a:	2b c0       	rjmp	.+86     	; 0x3b2 <motor_set_dir+0x62>
     35c:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <rightWst+0x2>
     360:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <rightWst+0x3>
     364:	82 17       	cp	r24, r18
     366:	93 07       	cpc	r25, r19
     368:	59 f0       	breq	.+22     	; 0x380 <motor_set_dir+0x30>
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	0e 94 84 01 	call	0x308	; 0x308 <motor_set_speed>
     374:	8f e9       	ldi	r24, 0x9F	; 159
     376:	9f e0       	ldi	r25, 0x0F	; 15
     378:	01 97       	sbiw	r24, 0x01	; 1
     37a:	f1 f7       	brne	.-4      	; 0x378 <motor_set_dir+0x28>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <motor_set_dir+0x2e>
     37e:	00 00       	nop
     380:	c1 11       	cpse	r28, r1
     382:	0e c0       	rjmp	.+28     	; 0x3a0 <motor_set_dir+0x50>
     384:	5e 98       	cbi	0x0b, 6	; 11
     386:	5f 9a       	sbi	0x0b, 7	; 11
     388:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <rightWst+0x3>
     38c:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <rightWst+0x2>
     390:	8f e3       	ldi	r24, 0x3F	; 63
     392:	9c e9       	ldi	r25, 0x9C	; 156
     394:	01 97       	sbiw	r24, 0x01	; 1
     396:	f1 f7       	brne	.-4      	; 0x394 <motor_set_dir+0x44>
     398:	00 c0       	rjmp	.+0      	; 0x39a <motor_set_dir+0x4a>
     39a:	00 00       	nop
     39c:	cf 91       	pop	r28
     39e:	08 95       	ret
     3a0:	5e 9a       	sbi	0x0b, 6	; 11
     3a2:	5f 98       	cbi	0x0b, 7	; 11
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <rightWst+0x3>
     3ac:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <rightWst+0x2>
     3b0:	ef cf       	rjmp	.-34     	; 0x390 <motor_set_dir+0x40>
     3b2:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <leftWst+0x2>
     3b6:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <leftWst+0x3>
     3ba:	82 17       	cp	r24, r18
     3bc:	93 07       	cpc	r25, r19
     3be:	59 f0       	breq	.+22     	; 0x3d6 <motor_set_dir+0x86>
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	0e 94 84 01 	call	0x308	; 0x308 <motor_set_speed>
     3ca:	8f e9       	ldi	r24, 0x9F	; 159
     3cc:	9f e0       	ldi	r25, 0x0F	; 15
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <motor_set_dir+0x7e>
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <motor_set_dir+0x84>
     3d4:	00 00       	nop
     3d6:	c1 11       	cpse	r28, r1
     3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <motor_set_dir+0x98>
     3da:	5c 9a       	sbi	0x0b, 4	; 11
     3dc:	5d 98       	cbi	0x0b, 5	; 11
     3de:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <leftWst+0x3>
     3e2:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <leftWst+0x2>
     3e6:	d4 cf       	rjmp	.-88     	; 0x390 <motor_set_dir+0x40>
     3e8:	5c 98       	cbi	0x0b, 4	; 11
     3ea:	5d 9a       	sbi	0x0b, 5	; 11
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <leftWst+0x3>
     3f4:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <leftWst+0x2>
     3f8:	cb cf       	rjmp	.-106    	; 0x390 <motor_set_dir+0x40>

000003fa <robo_motorSpeed>:
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	ec 01       	movw	r28, r24
     404:	8b 01       	movw	r16, r22
     406:	97 ff       	sbrs	r25, 7
     408:	1c c0       	rjmp	.+56     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
     40a:	61 e0       	ldi	r22, 0x01	; 1
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	0e 94 a8 01 	call	0x350	; 0x350 <motor_set_dir>
     412:	d1 95       	neg	r29
     414:	c1 95       	neg	r28
     416:	d1 09       	sbc	r29, r1
     418:	17 ff       	sbrs	r17, 7
     41a:	18 c0       	rjmp	.+48     	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
     41c:	61 e0       	ldi	r22, 0x01	; 1
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	0e 94 a8 01 	call	0x350	; 0x350 <motor_set_dir>
     424:	11 95       	neg	r17
     426:	01 95       	neg	r16
     428:	11 09       	sbc	r17, r1
     42a:	b8 01       	movw	r22, r16
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	0e 94 84 01 	call	0x308	; 0x308 <motor_set_speed>
     432:	be 01       	movw	r22, r28
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	0c 94 84 01 	jmp	0x308	; 0x308 <motor_set_speed>
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	0e 94 a8 01 	call	0x350	; 0x350 <motor_set_dir>
     44a:	e6 cf       	rjmp	.-52     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	0e 94 a8 01 	call	0x350	; 0x350 <motor_set_dir>
     454:	ea cf       	rjmp	.-44     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>

00000456 <USART0_init>:
     456:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     45a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     45e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     462:	88 e1       	ldi	r24, 0x18	; 24
     464:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     468:	86 e0       	ldi	r24, 0x06	; 6
     46a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     46e:	08 95       	ret

00000470 <cputchar>:
     470:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     474:	95 ff       	sbrs	r25, 5
     476:	fc cf       	rjmp	.-8      	; 0x470 <cputchar>
     478:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     47c:	08 95       	ret

0000047e <cgetchar>:
     47e:	cf 93       	push	r28
     480:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     484:	87 ff       	sbrs	r24, 7
     486:	fc cf       	rjmp	.-8      	; 0x480 <cgetchar+0x2>
     488:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     48c:	8c 2f       	mov	r24, r28
     48e:	0e 94 38 02 	call	0x470	; 0x470 <cputchar>
     492:	8c 2f       	mov	r24, r28
     494:	cf 91       	pop	r28
     496:	08 95       	ret

00000498 <cputs>:
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	ec 01       	movw	r28, r24
     49e:	89 91       	ld	r24, Y+
     4a0:	81 11       	cpse	r24, r1
     4a2:	03 c0       	rjmp	.+6      	; 0x4aa <cputs+0x12>
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret
     4aa:	0e 94 38 02 	call	0x470	; 0x470 <cputchar>
     4ae:	f7 cf       	rjmp	.-18     	; 0x49e <cputs+0x6>

000004b0 <robo_proxSensor>:
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	0e 94 3c 01 	call	0x278	; 0x278 <ADC_read>
     4b6:	21 e0       	ldi	r18, 0x01	; 1
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	84 36       	cpi	r24, 0x64	; 100
     4bc:	91 05       	cpc	r25, r1
     4be:	10 f0       	brcs	.+4      	; 0x4c4 <robo_proxSensor+0x14>
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	c9 01       	movw	r24, r18
     4c6:	08 95       	ret

000004c8 <robo_lightSensor>:
     4c8:	84 e0       	ldi	r24, 0x04	; 4
     4ca:	0e 94 3c 01 	call	0x278	; 0x278 <ADC_read>
     4ce:	2b ef       	ldi	r18, 0xFB	; 251
     4d0:	ac 01       	movw	r20, r24
     4d2:	24 03       	mulsu	r18, r20
     4d4:	c0 01       	movw	r24, r0
     4d6:	25 9f       	mul	r18, r21
     4d8:	90 0d       	add	r25, r0
     4da:	11 24       	eor	r1, r1
     4dc:	85 50       	subi	r24, 0x05	; 5
     4de:	9c 4e       	sbci	r25, 0xEC	; 236
     4e0:	63 e3       	ldi	r22, 0x33	; 51
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	0e 94 c7 08 	call	0x118e	; 0x118e <__divmodhi4>
     4e8:	cb 01       	movw	r24, r22
     4ea:	65 36       	cpi	r22, 0x65	; 101
     4ec:	71 05       	cpc	r23, r1
     4ee:	14 f0       	brlt	.+4      	; 0x4f4 <robo_lightSensor+0x2c>
     4f0:	84 e6       	ldi	r24, 0x64	; 100
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	08 95       	ret

000004f6 <robo_lineSensor>:
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	c0 e0       	ldi	r28, 0x00	; 0
     4fc:	d1 e0       	ldi	r29, 0x01	; 1
     4fe:	cc 0f       	add	r28, r28
     500:	8d 2f       	mov	r24, r29
     502:	0e 94 3c 01 	call	0x278	; 0x278 <ADC_read>
     506:	8c 32       	cpi	r24, 0x2C	; 44
     508:	91 40       	sbci	r25, 0x01	; 1
     50a:	0c f4       	brge	.+2      	; 0x50e <robo_lineSensor+0x18>
     50c:	c1 60       	ori	r28, 0x01	; 1
     50e:	df 5f       	subi	r29, 0xFF	; 255
     510:	d4 30       	cpi	r29, 0x04	; 4
     512:	a9 f7       	brne	.-22     	; 0x4fe <robo_lineSensor+0x8>
     514:	8c 2f       	mov	r24, r28
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	08 95       	ret

0000051e <robo_bumpSensorR>:
     51e:	83 b1       	in	r24, 0x03	; 3
     520:	82 95       	swap	r24
     522:	8f 70       	andi	r24, 0x0F	; 15
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	89 27       	eor	r24, r25
     528:	81 70       	andi	r24, 0x01	; 1
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	08 95       	ret

0000052e <robo_bumpSensorL>:
     52e:	83 b1       	in	r24, 0x03	; 3
     530:	86 95       	lsr	r24
     532:	86 95       	lsr	r24
     534:	86 95       	lsr	r24
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	89 27       	eor	r24, r25
     53a:	81 70       	andi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	08 95       	ret

00000540 <robo_Honk>:
     540:	5b 9a       	sbi	0x0b, 3	; 11
     542:	2f ef       	ldi	r18, 0xFF	; 255
     544:	85 ea       	ldi	r24, 0xA5	; 165
     546:	9e e0       	ldi	r25, 0x0E	; 14
     548:	21 50       	subi	r18, 0x01	; 1
     54a:	80 40       	sbci	r24, 0x00	; 0
     54c:	90 40       	sbci	r25, 0x00	; 0
     54e:	e1 f7       	brne	.-8      	; 0x548 <robo_Honk+0x8>
     550:	00 c0       	rjmp	.+0      	; 0x552 <robo_Honk+0x12>
     552:	00 00       	nop
     554:	5b 98       	cbi	0x0b, 3	; 11
     556:	2f ef       	ldi	r18, 0xFF	; 255
     558:	85 ea       	ldi	r24, 0xA5	; 165
     55a:	9e e0       	ldi	r25, 0x0E	; 14
     55c:	21 50       	subi	r18, 0x01	; 1
     55e:	80 40       	sbci	r24, 0x00	; 0
     560:	90 40       	sbci	r25, 0x00	; 0
     562:	e1 f7       	brne	.-8      	; 0x55c <robo_Honk+0x1c>
     564:	00 c0       	rjmp	.+0      	; 0x566 <robo_Honk+0x26>
     566:	00 00       	nop
     568:	08 95       	ret

0000056a <robo_checkBattery>:
     56a:	85 e0       	ldi	r24, 0x05	; 5
     56c:	0e 94 3c 01 	call	0x278	; 0x278 <ADC_read>
     570:	84 3f       	cpi	r24, 0xF4	; 244
     572:	91 40       	sbci	r25, 0x01	; 1
     574:	10 f4       	brcc	.+4      	; 0x57a <robo_checkBattery+0x10>
     576:	28 9a       	sbi	0x05, 0	; 5
     578:	08 95       	ret
     57a:	28 98       	cbi	0x05, 0	; 5
     57c:	08 95       	ret

0000057e <robo_goPressed>:
     57e:	89 b1       	in	r24, 0x09	; 9
     580:	82 fb       	bst	r24, 2
     582:	88 27       	eor	r24, r24
     584:	80 f9       	bld	r24, 0
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	89 27       	eor	r24, r25
     58a:	08 95       	ret

0000058c <robo_wait4goPress>:
     58c:	0e 94 bf 02 	call	0x57e	; 0x57e <robo_goPressed>
     590:	88 23       	and	r24, r24
     592:	e1 f3       	breq	.-8      	; 0x58c <robo_wait4goPress>
     594:	08 95       	ret

00000596 <OS_ticks_init>:
     596:	f8 94       	cli
     598:	85 e0       	ldi	r24, 0x05	; 5
     59a:	85 bd       	out	0x25, r24	; 37
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     5a2:	84 e6       	ldi	r24, 0x64	; 100
     5a4:	86 bd       	out	0x26, r24	; 38
     5a6:	78 94       	sei
     5a8:	08 95       	ret

000005aa <HAL_init>:
     5aa:	87 e6       	ldi	r24, 0x67	; 103
     5ac:	0e 94 2b 02 	call	0x456	; 0x456 <USART0_init>
     5b0:	0c 94 35 01 	jmp	0x26a	; 0x26a <ADC_init>

000005b4 <robo_Setup>:
     5b4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <HAL_init>
     5b8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <motor_init>
     5bc:	53 9a       	sbi	0x0a, 3	; 10
     5be:	5b 98       	cbi	0x0b, 3	; 11
     5c0:	20 9a       	sbi	0x04, 0	; 4
     5c2:	52 98       	cbi	0x0a, 2	; 10
     5c4:	5a 9a       	sbi	0x0b, 2	; 11
     5c6:	24 98       	cbi	0x04, 4	; 4
     5c8:	23 98       	cbi	0x04, 3	; 4
     5ca:	85 b1       	in	r24, 0x05	; 5
     5cc:	88 61       	ori	r24, 0x18	; 24
     5ce:	85 b9       	out	0x05, r24	; 5
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0e 94 a8 01 	call	0x350	; 0x350 <motor_set_dir>
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	0e 94 a8 01 	call	0x350	; 0x350 <motor_set_dir>
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <robo_motorSpeed>

000005ec <cprintf>:
     5ec:	4f 92       	push	r4
     5ee:	5f 92       	push	r5
     5f0:	6f 92       	push	r6
     5f2:	7f 92       	push	r7
     5f4:	8f 92       	push	r8
     5f6:	9f 92       	push	r9
     5f8:	af 92       	push	r10
     5fa:	bf 92       	push	r11
     5fc:	cf 92       	push	r12
     5fe:	df 92       	push	r13
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	de 01       	movw	r26, r28
     612:	53 96       	adiw	r26, 0x13	; 19
     614:	ed 91       	ld	r30, X+
     616:	fd 91       	ld	r31, X+
     618:	8d 01       	movw	r16, r26
     61a:	5a e0       	ldi	r21, 0x0A	; 10
     61c:	65 2e       	mov	r6, r21
     61e:	71 2c       	mov	r7, r1
     620:	80 81       	ld	r24, Z
     622:	85 32       	cpi	r24, 0x25	; 37
     624:	81 f4       	brne	.+32     	; 0x646 <cprintf+0x5a>
     626:	5f 01       	movw	r10, r30
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	a8 0e       	add	r10, r24
     62c:	b1 1c       	adc	r11, r1
     62e:	81 81       	ldd	r24, Z+1	; 0x01
     630:	84 36       	cpi	r24, 0x64	; 100
     632:	09 f4       	brne	.+2      	; 0x636 <cprintf+0x4a>
     634:	50 c0       	rjmp	.+160    	; 0x6d6 <cprintf+0xea>
     636:	90 f4       	brcc	.+36     	; 0x65c <cprintf+0x70>
     638:	83 36       	cpi	r24, 0x63	; 99
     63a:	61 f4       	brne	.+24     	; 0x654 <cprintf+0x68>
     63c:	f8 01       	movw	r30, r16
     63e:	80 81       	ld	r24, Z
     640:	0e 5f       	subi	r16, 0xFE	; 254
     642:	1f 4f       	sbci	r17, 0xFF	; 255
     644:	07 c0       	rjmp	.+14     	; 0x654 <cprintf+0x68>
     646:	88 23       	and	r24, r24
     648:	09 f4       	brne	.+2      	; 0x64c <cprintf+0x60>
     64a:	5d c0       	rjmp	.+186    	; 0x706 <cprintf+0x11a>
     64c:	5f 01       	movw	r10, r30
     64e:	9f ef       	ldi	r25, 0xFF	; 255
     650:	a9 1a       	sub	r10, r25
     652:	b9 0a       	sbc	r11, r25
     654:	0e 94 38 02 	call	0x470	; 0x470 <cputchar>
     658:	f5 01       	movw	r30, r10
     65a:	e2 cf       	rjmp	.-60     	; 0x620 <cprintf+0x34>
     65c:	83 37       	cpi	r24, 0x73	; 115
     65e:	71 f1       	breq	.+92     	; 0x6bc <cprintf+0xd0>
     660:	30 e1       	ldi	r19, 0x10	; 16
     662:	83 2e       	mov	r8, r19
     664:	91 2c       	mov	r9, r1
     666:	e1 2c       	mov	r14, r1
     668:	40 e1       	ldi	r20, 0x10	; 16
     66a:	f4 2e       	mov	r15, r20
     66c:	88 37       	cpi	r24, 0x78	; 120
     66e:	91 f7       	brne	.-28     	; 0x654 <cprintf+0x68>
     670:	f8 01       	movw	r30, r16
     672:	c0 80       	ld	r12, Z
     674:	d1 80       	ldd	r13, Z+1	; 0x01
     676:	0e 5f       	subi	r16, 0xFE	; 254
     678:	1f 4f       	sbci	r17, 0xFF	; 255
     67a:	84 36       	cpi	r24, 0x64	; 100
     67c:	59 f4       	brne	.+22     	; 0x694 <cprintf+0xa8>
     67e:	d7 fe       	sbrs	r13, 7
     680:	06 c0       	rjmp	.+12     	; 0x68e <cprintf+0xa2>
     682:	d1 94       	neg	r13
     684:	c1 94       	neg	r12
     686:	d1 08       	sbc	r13, r1
     688:	8d e2       	ldi	r24, 0x2D	; 45
     68a:	0e 94 38 02 	call	0x470	; 0x470 <cputchar>
     68e:	ce 14       	cp	r12, r14
     690:	df 04       	cpc	r13, r15
     692:	48 f1       	brcs	.+82     	; 0x6e6 <cprintf+0xfa>
     694:	c6 01       	movw	r24, r12
     696:	b7 01       	movw	r22, r14
     698:	0e 94 b3 08 	call	0x1166	; 0x1166 <__udivmodhi4>
     69c:	2c 01       	movw	r4, r24
     69e:	68 5f       	subi	r22, 0xF8	; 248
     6a0:	7d 4f       	sbci	r23, 0xFD	; 253
     6a2:	fb 01       	movw	r30, r22
     6a4:	80 81       	ld	r24, Z
     6a6:	0e 94 38 02 	call	0x470	; 0x470 <cputchar>
     6aa:	62 01       	movw	r12, r4
     6ac:	c7 01       	movw	r24, r14
     6ae:	b4 01       	movw	r22, r8
     6b0:	0e 94 b3 08 	call	0x1166	; 0x1166 <__udivmodhi4>
     6b4:	7b 01       	movw	r14, r22
     6b6:	67 2b       	or	r22, r23
     6b8:	69 f7       	brne	.-38     	; 0x694 <cprintf+0xa8>
     6ba:	ce cf       	rjmp	.-100    	; 0x658 <cprintf+0x6c>
     6bc:	f8 01       	movw	r30, r16
     6be:	e0 80       	ld	r14, Z
     6c0:	f1 80       	ldd	r15, Z+1	; 0x01
     6c2:	0e 5f       	subi	r16, 0xFE	; 254
     6c4:	1f 4f       	sbci	r17, 0xFF	; 255
     6c6:	f7 01       	movw	r30, r14
     6c8:	81 91       	ld	r24, Z+
     6ca:	7f 01       	movw	r14, r30
     6cc:	88 23       	and	r24, r24
     6ce:	21 f2       	breq	.-120    	; 0x658 <cprintf+0x6c>
     6d0:	0e 94 38 02 	call	0x470	; 0x470 <cputchar>
     6d4:	f8 cf       	rjmp	.-16     	; 0x6c6 <cprintf+0xda>
     6d6:	9a e0       	ldi	r25, 0x0A	; 10
     6d8:	89 2e       	mov	r8, r25
     6da:	91 2c       	mov	r9, r1
     6dc:	20 e1       	ldi	r18, 0x10	; 16
     6de:	e2 2e       	mov	r14, r18
     6e0:	27 e2       	ldi	r18, 0x27	; 39
     6e2:	f2 2e       	mov	r15, r18
     6e4:	c5 cf       	rjmp	.-118    	; 0x670 <cprintf+0x84>
     6e6:	c7 01       	movw	r24, r14
     6e8:	b3 01       	movw	r22, r6
     6ea:	0e 94 b3 08 	call	0x1166	; 0x1166 <__udivmodhi4>
     6ee:	7b 01       	movw	r14, r22
     6f0:	62 30       	cpi	r22, 0x02	; 2
     6f2:	71 05       	cpc	r23, r1
     6f4:	60 f6       	brcc	.-104    	; 0x68e <cprintf+0xa2>
     6f6:	c6 01       	movw	r24, r12
     6f8:	0e 94 b3 08 	call	0x1166	; 0x1166 <__udivmodhi4>
     6fc:	fb 01       	movw	r30, r22
     6fe:	e8 5f       	subi	r30, 0xF8	; 248
     700:	fd 4f       	sbci	r31, 0xFD	; 253
     702:	80 81       	ld	r24, Z
     704:	a7 cf       	rjmp	.-178    	; 0x654 <cprintf+0x68>
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	ff 90       	pop	r15
     714:	ef 90       	pop	r14
     716:	df 90       	pop	r13
     718:	cf 90       	pop	r12
     71a:	bf 90       	pop	r11
     71c:	af 90       	pop	r10
     71e:	9f 90       	pop	r9
     720:	8f 90       	pop	r8
     722:	7f 90       	pop	r7
     724:	6f 90       	pop	r6
     726:	5f 90       	pop	r5
     728:	4f 90       	pop	r4
     72a:	08 95       	ret

0000072c <OSStartHighRdy>:
     72c:	00 91 28 04 	lds	r16, 0x0428	; 0x800428 <OSRunning>
     730:	03 95       	inc	r16
     732:	00 93 28 04 	sts	0x0428, r16	; 0x800428 <OSRunning>
     736:	e0 91 38 04 	lds	r30, 0x0438	; 0x800438 <OSTCBHighRdy>
     73a:	f0 91 39 04 	lds	r31, 0x0439	; 0x800439 <OSTCBHighRdy+0x1>
     73e:	c1 91       	ld	r28, Z+
     740:	cd bf       	out	0x3d, r28	; 61
     742:	d1 91       	ld	r29, Z+
     744:	de bf       	out	0x3e, r29	; 62
     746:	0f 91       	pop	r16
     748:	0f bf       	out	0x3f, r16	; 63
     74a:	ff 91       	pop	r31
     74c:	ef 91       	pop	r30
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	bf 91       	pop	r27
     754:	af 91       	pop	r26
     756:	9f 91       	pop	r25
     758:	8f 91       	pop	r24
     75a:	7f 91       	pop	r23
     75c:	6f 91       	pop	r22
     75e:	5f 91       	pop	r21
     760:	4f 91       	pop	r20
     762:	3f 91       	pop	r19
     764:	2f 91       	pop	r18
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
     76e:	df 90       	pop	r13
     770:	cf 90       	pop	r12
     772:	bf 90       	pop	r11
     774:	af 90       	pop	r10
     776:	9f 90       	pop	r9
     778:	8f 90       	pop	r8
     77a:	7f 90       	pop	r7
     77c:	6f 90       	pop	r6
     77e:	5f 90       	pop	r5
     780:	4f 90       	pop	r4
     782:	3f 90       	pop	r3
     784:	2f 90       	pop	r2
     786:	1f 90       	pop	r1
     788:	0f 90       	pop	r0
     78a:	08 95       	ret

0000078c <OSCtxSw>:
     78c:	0f 92       	push	r0
     78e:	1f 92       	push	r1
     790:	2f 92       	push	r2
     792:	3f 92       	push	r3
     794:	4f 92       	push	r4
     796:	5f 92       	push	r5
     798:	6f 92       	push	r6
     79a:	7f 92       	push	r7
     79c:	8f 92       	push	r8
     79e:	9f 92       	push	r9
     7a0:	af 92       	push	r10
     7a2:	bf 92       	push	r11
     7a4:	cf 92       	push	r12
     7a6:	df 92       	push	r13
     7a8:	ef 92       	push	r14
     7aa:	ff 92       	push	r15
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	2f 93       	push	r18
     7b2:	3f 93       	push	r19
     7b4:	4f 93       	push	r20
     7b6:	5f 93       	push	r21
     7b8:	6f 93       	push	r22
     7ba:	7f 93       	push	r23
     7bc:	8f 93       	push	r24
     7be:	9f 93       	push	r25
     7c0:	af 93       	push	r26
     7c2:	bf 93       	push	r27
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	ef 93       	push	r30
     7ca:	ff 93       	push	r31
     7cc:	0f b7       	in	r16, 0x3f	; 63
     7ce:	0f 93       	push	r16
     7d0:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <OSTCBCur>
     7d4:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <OSTCBCur+0x1>
     7d8:	cd b7       	in	r28, 0x3d	; 61
     7da:	c1 93       	st	Z+, r28
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	d1 93       	st	Z+, r29
     7e0:	00 91 2d 04 	lds	r16, 0x042D	; 0x80042d <OSPrioHighRdy>
     7e4:	00 93 2e 04 	sts	0x042E, r16	; 0x80042e <OSPrioCur>
     7e8:	e0 91 38 04 	lds	r30, 0x0438	; 0x800438 <OSTCBHighRdy>
     7ec:	f0 91 39 04 	lds	r31, 0x0439	; 0x800439 <OSTCBHighRdy+0x1>
     7f0:	e0 93 40 04 	sts	0x0440, r30	; 0x800440 <OSTCBCur>
     7f4:	f0 93 41 04 	sts	0x0441, r31	; 0x800441 <OSTCBCur+0x1>
     7f8:	c1 91       	ld	r28, Z+
     7fa:	cd bf       	out	0x3d, r28	; 61
     7fc:	d1 91       	ld	r29, Z+
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f 91       	pop	r16
     802:	0f bf       	out	0x3f, r16	; 63
     804:	ff 91       	pop	r31
     806:	ef 91       	pop	r30
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	bf 91       	pop	r27
     80e:	af 91       	pop	r26
     810:	9f 91       	pop	r25
     812:	8f 91       	pop	r24
     814:	7f 91       	pop	r23
     816:	6f 91       	pop	r22
     818:	5f 91       	pop	r21
     81a:	4f 91       	pop	r20
     81c:	3f 91       	pop	r19
     81e:	2f 91       	pop	r18
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	ff 90       	pop	r15
     826:	ef 90       	pop	r14
     828:	df 90       	pop	r13
     82a:	cf 90       	pop	r12
     82c:	bf 90       	pop	r11
     82e:	af 90       	pop	r10
     830:	9f 90       	pop	r9
     832:	8f 90       	pop	r8
     834:	7f 90       	pop	r7
     836:	6f 90       	pop	r6
     838:	5f 90       	pop	r5
     83a:	4f 90       	pop	r4
     83c:	3f 90       	pop	r3
     83e:	2f 90       	pop	r2
     840:	1f 90       	pop	r1
     842:	0f 90       	pop	r0
     844:	08 95       	ret

00000846 <OSIntCtxSw>:
     846:	00 91 2d 04 	lds	r16, 0x042D	; 0x80042d <OSPrioHighRdy>
     84a:	00 93 2e 04 	sts	0x042E, r16	; 0x80042e <OSPrioCur>
     84e:	e0 91 38 04 	lds	r30, 0x0438	; 0x800438 <OSTCBHighRdy>
     852:	f0 91 39 04 	lds	r31, 0x0439	; 0x800439 <OSTCBHighRdy+0x1>
     856:	e0 93 40 04 	sts	0x0440, r30	; 0x800440 <OSTCBCur>
     85a:	f0 93 41 04 	sts	0x0441, r31	; 0x800441 <OSTCBCur+0x1>
     85e:	c1 91       	ld	r28, Z+
     860:	cd bf       	out	0x3d, r28	; 61
     862:	d1 91       	ld	r29, Z+
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f 91       	pop	r16
     868:	0f bf       	out	0x3f, r16	; 63
     86a:	ff 91       	pop	r31
     86c:	ef 91       	pop	r30
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	bf 91       	pop	r27
     874:	af 91       	pop	r26
     876:	9f 91       	pop	r25
     878:	8f 91       	pop	r24
     87a:	7f 91       	pop	r23
     87c:	6f 91       	pop	r22
     87e:	5f 91       	pop	r21
     880:	4f 91       	pop	r20
     882:	3f 91       	pop	r19
     884:	2f 91       	pop	r18
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	df 90       	pop	r13
     890:	cf 90       	pop	r12
     892:	bf 90       	pop	r11
     894:	af 90       	pop	r10
     896:	9f 90       	pop	r9
     898:	8f 90       	pop	r8
     89a:	7f 90       	pop	r7
     89c:	6f 90       	pop	r6
     89e:	5f 90       	pop	r5
     8a0:	4f 90       	pop	r4
     8a2:	3f 90       	pop	r3
     8a4:	2f 90       	pop	r2
     8a6:	1f 90       	pop	r1
     8a8:	0f 90       	pop	r0
     8aa:	08 95       	ret

000008ac <OSTickISR>:
     8ac:	0f 92       	push	r0
     8ae:	1f 92       	push	r1
     8b0:	2f 92       	push	r2
     8b2:	3f 92       	push	r3
     8b4:	4f 92       	push	r4
     8b6:	5f 92       	push	r5
     8b8:	6f 92       	push	r6
     8ba:	7f 92       	push	r7
     8bc:	8f 92       	push	r8
     8be:	9f 92       	push	r9
     8c0:	af 92       	push	r10
     8c2:	bf 92       	push	r11
     8c4:	cf 92       	push	r12
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	2f 93       	push	r18
     8d2:	3f 93       	push	r19
     8d4:	4f 93       	push	r20
     8d6:	5f 93       	push	r21
     8d8:	6f 93       	push	r22
     8da:	7f 93       	push	r23
     8dc:	8f 93       	push	r24
     8de:	9f 93       	push	r25
     8e0:	af 93       	push	r26
     8e2:	bf 93       	push	r27
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	ef 93       	push	r30
     8ea:	ff 93       	push	r31
     8ec:	0f b7       	in	r16, 0x3f	; 63
     8ee:	00 68       	ori	r16, 0x80	; 128
     8f0:	0f 93       	push	r16
     8f2:	00 91 3f 04 	lds	r16, 0x043F	; 0x80043f <OSIntNesting>
     8f6:	03 95       	inc	r16
     8f8:	00 93 3f 04 	sts	0x043F, r16	; 0x80043f <OSIntNesting>
     8fc:	01 30       	cpi	r16, 0x01	; 1
     8fe:	41 f4       	brne	.+16     	; 0x910 <_not_first_int>
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
     904:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <OSTCBCur>
     908:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <OSTCBCur+0x1>
     90c:	c1 93       	st	Z+, r28
     90e:	d1 93       	st	Z+, r29

00000910 <_not_first_int>:
     910:	04 e6       	ldi	r16, 0x64	; 100
     912:	06 bd       	out	0x26, r16	; 38
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	1f 2e       	mov	r1, r31
     918:	78 94       	sei
     91a:	0e 94 b9 05 	call	0xb72	; 0xb72 <OSTimeTick>
     91e:	00 00       	nop
     920:	0e 94 2c 05 	call	0xa58	; 0xa58 <OSIntExit>
     924:	0f 91       	pop	r16
     926:	0f bf       	out	0x3f, r16	; 63
     928:	ff 91       	pop	r31
     92a:	ef 91       	pop	r30
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	bf 91       	pop	r27
     932:	af 91       	pop	r26
     934:	9f 91       	pop	r25
     936:	8f 91       	pop	r24
     938:	7f 91       	pop	r23
     93a:	6f 91       	pop	r22
     93c:	5f 91       	pop	r21
     93e:	4f 91       	pop	r20
     940:	3f 91       	pop	r19
     942:	2f 91       	pop	r18
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	df 90       	pop	r13
     94e:	cf 90       	pop	r12
     950:	bf 90       	pop	r11
     952:	af 90       	pop	r10
     954:	9f 90       	pop	r9
     956:	8f 90       	pop	r8
     958:	7f 90       	pop	r7
     95a:	6f 90       	pop	r6
     95c:	5f 90       	pop	r5
     95e:	4f 90       	pop	r4
     960:	3f 90       	pop	r3
     962:	2f 90       	pop	r2
     964:	1f 90       	pop	r1
     966:	0f 90       	pop	r0
     968:	08 95       	ret

0000096a <OSTaskStkInit>:
     96a:	fa 01       	movw	r30, r20
     96c:	80 83       	st	Z, r24
     96e:	31 97       	sbiw	r30, 0x01	; 1
     970:	90 83       	st	Z, r25
     972:	31 97       	sbiw	r30, 0x01	; 1
     974:	10 82       	st	Z, r1
     976:	31 97       	sbiw	r30, 0x01	; 1
     978:	10 82       	st	Z, r1
     97a:	31 97       	sbiw	r30, 0x01	; 1
     97c:	10 82       	st	Z, r1
     97e:	31 97       	sbiw	r30, 0x01	; 1
     980:	10 82       	st	Z, r1
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	10 82       	st	Z, r1
     986:	31 97       	sbiw	r30, 0x01	; 1
     988:	10 82       	st	Z, r1
     98a:	31 97       	sbiw	r30, 0x01	; 1
     98c:	10 82       	st	Z, r1
     98e:	31 97       	sbiw	r30, 0x01	; 1
     990:	10 82       	st	Z, r1
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	10 82       	st	Z, r1
     996:	31 97       	sbiw	r30, 0x01	; 1
     998:	10 82       	st	Z, r1
     99a:	31 97       	sbiw	r30, 0x01	; 1
     99c:	10 82       	st	Z, r1
     99e:	31 97       	sbiw	r30, 0x01	; 1
     9a0:	10 82       	st	Z, r1
     9a2:	31 97       	sbiw	r30, 0x01	; 1
     9a4:	10 82       	st	Z, r1
     9a6:	31 97       	sbiw	r30, 0x01	; 1
     9a8:	10 82       	st	Z, r1
     9aa:	31 97       	sbiw	r30, 0x01	; 1
     9ac:	10 82       	st	Z, r1
     9ae:	31 97       	sbiw	r30, 0x01	; 1
     9b0:	10 82       	st	Z, r1
     9b2:	31 97       	sbiw	r30, 0x01	; 1
     9b4:	10 82       	st	Z, r1
     9b6:	31 97       	sbiw	r30, 0x01	; 1
     9b8:	10 82       	st	Z, r1
     9ba:	31 97       	sbiw	r30, 0x01	; 1
     9bc:	10 82       	st	Z, r1
     9be:	31 97       	sbiw	r30, 0x01	; 1
     9c0:	10 82       	st	Z, r1
     9c2:	31 97       	sbiw	r30, 0x01	; 1
     9c4:	10 82       	st	Z, r1
     9c6:	31 97       	sbiw	r30, 0x01	; 1
     9c8:	10 82       	st	Z, r1
     9ca:	31 97       	sbiw	r30, 0x01	; 1
     9cc:	10 82       	st	Z, r1
     9ce:	31 97       	sbiw	r30, 0x01	; 1
     9d0:	10 82       	st	Z, r1
     9d2:	31 97       	sbiw	r30, 0x01	; 1
     9d4:	60 83       	st	Z, r22
     9d6:	31 97       	sbiw	r30, 0x01	; 1
     9d8:	70 83       	st	Z, r23
     9da:	31 97       	sbiw	r30, 0x01	; 1
     9dc:	10 82       	st	Z, r1
     9de:	31 97       	sbiw	r30, 0x01	; 1
     9e0:	10 82       	st	Z, r1
     9e2:	31 97       	sbiw	r30, 0x01	; 1
     9e4:	10 82       	st	Z, r1
     9e6:	31 97       	sbiw	r30, 0x01	; 1
     9e8:	10 82       	st	Z, r1
     9ea:	31 97       	sbiw	r30, 0x01	; 1
     9ec:	10 82       	st	Z, r1
     9ee:	31 97       	sbiw	r30, 0x01	; 1
     9f0:	10 82       	st	Z, r1
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	80 e8       	ldi	r24, 0x80	; 128
     9f6:	80 83       	st	Z, r24
     9f8:	ca 01       	movw	r24, r20
     9fa:	83 97       	sbiw	r24, 0x23	; 35
     9fc:	08 95       	ret

000009fe <OSTaskCreateHook>:
     9fe:	08 95       	ret

00000a00 <OSTaskDelHook>:
     a00:	08 95       	ret

00000a02 <OSTaskSwHook>:
     a02:	08 95       	ret

00000a04 <OSTaskStatHook>:
     a04:	08 95       	ret

00000a06 <OSTimeTickHook>:
     a06:	08 95       	ret

00000a08 <OSInitHookBegin>:
     a08:	08 95       	ret

00000a0a <OSInitHookEnd>:
     a0a:	08 95       	ret

00000a0c <OSTaskIdleHook>:
     a0c:	08 95       	ret

00000a0e <OSTCBInitHook>:
     a0e:	08 95       	ret

00000a10 <OS_TaskIdle>:
     a10:	f8 94       	cli
     a12:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSIdleCtr>
     a16:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <OSIdleCtr+0x1>
     a1a:	a0 91 2b 04 	lds	r26, 0x042B	; 0x80042b <OSIdleCtr+0x2>
     a1e:	b0 91 2c 04 	lds	r27, 0x042C	; 0x80042c <OSIdleCtr+0x3>
     a22:	01 96       	adiw	r24, 0x01	; 1
     a24:	a1 1d       	adc	r26, r1
     a26:	b1 1d       	adc	r27, r1
     a28:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <OSIdleCtr>
     a2c:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <OSIdleCtr+0x1>
     a30:	a0 93 2b 04 	sts	0x042B, r26	; 0x80042b <OSIdleCtr+0x2>
     a34:	b0 93 2c 04 	sts	0x042C, r27	; 0x80042c <OSIdleCtr+0x3>
     a38:	78 94       	sei
     a3a:	0e 94 06 05 	call	0xa0c	; 0xa0c <OSTaskIdleHook>
     a3e:	e8 cf       	rjmp	.-48     	; 0xa10 <OS_TaskIdle>

00000a40 <OSIntEnter>:
     a40:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	39 f4       	brne	.+14     	; 0xa56 <OSIntEnter+0x16>
     a48:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <OSIntNesting>
     a4c:	8f 3f       	cpi	r24, 0xFF	; 255
     a4e:	19 f0       	breq	.+6      	; 0xa56 <OSIntEnter+0x16>
     a50:	8f 5f       	subi	r24, 0xFF	; 255
     a52:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <OSIntNesting>
     a56:	08 95       	ret

00000a58 <OSIntExit>:
     a58:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     a5c:	81 30       	cpi	r24, 0x01	; 1
     a5e:	09 f0       	breq	.+2      	; 0xa62 <OSIntExit+0xa>
     a60:	4c c0       	rjmp	.+152    	; 0xafa <OSIntExit+0xa2>
     a62:	f8 94       	cli
     a64:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <OSIntNesting>
     a68:	88 23       	and	r24, r24
     a6a:	19 f0       	breq	.+6      	; 0xa72 <OSIntExit+0x1a>
     a6c:	81 50       	subi	r24, 0x01	; 1
     a6e:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <OSIntNesting>
     a72:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <OSIntNesting>
     a76:	81 11       	cpse	r24, r1
     a78:	3f c0       	rjmp	.+126    	; 0xaf8 <OSIntExit+0xa0>
     a7a:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <OSLockNesting>
     a7e:	81 11       	cpse	r24, r1
     a80:	3b c0       	rjmp	.+118    	; 0xaf8 <OSIntExit+0xa0>
     a82:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <OSRdyGrp>
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	e0 50       	subi	r30, 0x00	; 0
     a8a:	ff 4f       	sbci	r31, 0xFF	; 255
     a8c:	e0 81       	ld	r30, Z
     a8e:	e0 93 3e 04 	sts	0x043E, r30	; 0x80043e <OSIntExitY>
     a92:	ae 2f       	mov	r26, r30
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	a5 5c       	subi	r26, 0xC5	; 197
     a98:	bb 4f       	sbci	r27, 0xFB	; 251
     a9a:	ac 91       	ld	r26, X
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	a0 50       	subi	r26, 0x00	; 0
     aa0:	bf 4f       	sbci	r27, 0xFF	; 255
     aa2:	ee 0f       	add	r30, r30
     aa4:	ee 0f       	add	r30, r30
     aa6:	ee 0f       	add	r30, r30
     aa8:	8c 91       	ld	r24, X
     aaa:	e8 0f       	add	r30, r24
     aac:	e0 93 2d 04 	sts	0x042D, r30	; 0x80042d <OSPrioHighRdy>
     ab0:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <OSPrioCur>
     ab4:	e8 17       	cp	r30, r24
     ab6:	01 f1       	breq	.+64     	; 0xaf8 <OSIntExit+0xa0>
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	ee 0f       	add	r30, r30
     abc:	ff 1f       	adc	r31, r31
     abe:	ef 57       	subi	r30, 0x7F	; 127
     ac0:	fa 4f       	sbci	r31, 0xFA	; 250
     ac2:	80 81       	ld	r24, Z
     ac4:	91 81       	ldd	r25, Z+1	; 0x01
     ac6:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <OSTCBHighRdy+0x1>
     aca:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <OSTCBHighRdy>
     ace:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <OSCtxSwCtr>
     ad2:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <OSCtxSwCtr+0x1>
     ad6:	a0 91 33 04 	lds	r26, 0x0433	; 0x800433 <OSCtxSwCtr+0x2>
     ada:	b0 91 34 04 	lds	r27, 0x0434	; 0x800434 <OSCtxSwCtr+0x3>
     ade:	01 96       	adiw	r24, 0x01	; 1
     ae0:	a1 1d       	adc	r26, r1
     ae2:	b1 1d       	adc	r27, r1
     ae4:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <OSCtxSwCtr>
     ae8:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <OSCtxSwCtr+0x1>
     aec:	a0 93 33 04 	sts	0x0433, r26	; 0x800433 <OSCtxSwCtr+0x2>
     af0:	b0 93 34 04 	sts	0x0434, r27	; 0x800434 <OSCtxSwCtr+0x3>
     af4:	0e 94 23 04 	call	0x846	; 0x846 <OSIntCtxSw>
     af8:	78 94       	sei
     afa:	08 95       	ret

00000afc <OSSchedLock>:
     afc:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     b00:	81 30       	cpi	r24, 0x01	; 1
     b02:	49 f4       	brne	.+18     	; 0xb16 <OSSchedLock+0x1a>
     b04:	f8 94       	cli
     b06:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <OSLockNesting>
     b0a:	8f 3f       	cpi	r24, 0xFF	; 255
     b0c:	19 f0       	breq	.+6      	; 0xb14 <OSSchedLock+0x18>
     b0e:	8f 5f       	subi	r24, 0xFF	; 255
     b10:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <OSLockNesting>
     b14:	78 94       	sei
     b16:	08 95       	ret

00000b18 <OSStart>:
     b18:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     b1c:	81 11       	cpse	r24, r1
     b1e:	28 c0       	rjmp	.+80     	; 0xb70 <OSStart+0x58>
     b20:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <OSRdyGrp>
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	e0 50       	subi	r30, 0x00	; 0
     b28:	ff 4f       	sbci	r31, 0xFF	; 255
     b2a:	e0 81       	ld	r30, Z
     b2c:	ae 2f       	mov	r26, r30
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	a5 5c       	subi	r26, 0xC5	; 197
     b32:	bb 4f       	sbci	r27, 0xFB	; 251
     b34:	ac 91       	ld	r26, X
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	a0 50       	subi	r26, 0x00	; 0
     b3a:	bf 4f       	sbci	r27, 0xFF	; 255
     b3c:	ee 0f       	add	r30, r30
     b3e:	ee 0f       	add	r30, r30
     b40:	ee 0f       	add	r30, r30
     b42:	8c 91       	ld	r24, X
     b44:	e8 0f       	add	r30, r24
     b46:	e0 93 2d 04 	sts	0x042D, r30	; 0x80042d <OSPrioHighRdy>
     b4a:	e0 93 2e 04 	sts	0x042E, r30	; 0x80042e <OSPrioCur>
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	ee 0f       	add	r30, r30
     b52:	ff 1f       	adc	r31, r31
     b54:	ef 57       	subi	r30, 0x7F	; 127
     b56:	fa 4f       	sbci	r31, 0xFA	; 250
     b58:	80 81       	ld	r24, Z
     b5a:	91 81       	ldd	r25, Z+1	; 0x01
     b5c:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <OSTCBHighRdy+0x1>
     b60:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <OSTCBHighRdy>
     b64:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <OSTCBCur+0x1>
     b68:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <OSTCBCur>
     b6c:	0c 94 96 03 	jmp	0x72c	; 0x72c <OSStartHighRdy>
     b70:	08 95       	ret

00000b72 <OSTimeTick>:
     b72:	0e 94 03 05 	call	0xa06	; 0xa06 <OSTimeTickHook>
     b76:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     b7a:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <OSTCBList>
     b7e:	f0 91 30 04 	lds	r31, 0x0430	; 0x800430 <OSTCBList+0x1>
     b82:	21 e0       	ldi	r18, 0x01	; 1
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	01 f1       	breq	.+64     	; 0xbca <OSTimeTick+0x58>
     b8a:	08 95       	ret
     b8c:	f8 94       	cli
     b8e:	86 81       	ldd	r24, Z+6	; 0x06
     b90:	97 81       	ldd	r25, Z+7	; 0x07
     b92:	00 97       	sbiw	r24, 0x00	; 0
     b94:	b1 f0       	breq	.+44     	; 0xbc2 <OSTimeTick+0x50>
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	97 83       	std	Z+7, r25	; 0x07
     b9a:	86 83       	std	Z+6, r24	; 0x06
     b9c:	89 2b       	or	r24, r25
     b9e:	89 f4       	brne	.+34     	; 0xbc2 <OSTimeTick+0x50>
     ba0:	80 85       	ldd	r24, Z+8	; 0x08
     ba2:	83 fd       	sbrc	r24, 3
     ba4:	16 c0       	rjmp	.+44     	; 0xbd2 <OSTimeTick+0x60>
     ba6:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <OSRdyGrp>
     baa:	95 85       	ldd	r25, Z+13	; 0x0d
     bac:	89 2b       	or	r24, r25
     bae:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <OSRdyGrp>
     bb2:	a3 85       	ldd	r26, Z+11	; 0x0b
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	a5 5c       	subi	r26, 0xC5	; 197
     bb8:	bb 4f       	sbci	r27, 0xFB	; 251
     bba:	8c 91       	ld	r24, X
     bbc:	94 85       	ldd	r25, Z+12	; 0x0c
     bbe:	89 2b       	or	r24, r25
     bc0:	8c 93       	st	X, r24
     bc2:	02 80       	ldd	r0, Z+2	; 0x02
     bc4:	f3 81       	ldd	r31, Z+3	; 0x03
     bc6:	e0 2d       	mov	r30, r0
     bc8:	78 94       	sei
     bca:	81 85       	ldd	r24, Z+9	; 0x09
     bcc:	80 31       	cpi	r24, 0x10	; 16
     bce:	f1 f6       	brne	.-68     	; 0xb8c <OSTimeTick+0x1a>
     bd0:	dc cf       	rjmp	.-72     	; 0xb8a <OSTimeTick+0x18>
     bd2:	37 83       	std	Z+7, r19	; 0x07
     bd4:	26 83       	std	Z+6, r18	; 0x06
     bd6:	f5 cf       	rjmp	.-22     	; 0xbc2 <OSTimeTick+0x50>

00000bd8 <OSVersion>:
     bd8:	8c ef       	ldi	r24, 0xFC	; 252
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	08 95       	ret

00000bde <OS_Dummy>:
     bde:	08 95       	ret

00000be0 <OS_Sched>:
     be0:	f8 94       	cli
     be2:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <OSIntNesting>
     be6:	81 11       	cpse	r24, r1
     be8:	3d c0       	rjmp	.+122    	; 0xc64 <OS_Sched+0x84>
     bea:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <OSLockNesting>
     bee:	81 11       	cpse	r24, r1
     bf0:	39 c0       	rjmp	.+114    	; 0xc64 <OS_Sched+0x84>
     bf2:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <OSRdyGrp>
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	e0 50       	subi	r30, 0x00	; 0
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	e0 81       	ld	r30, Z
     bfe:	ae 2f       	mov	r26, r30
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	a5 5c       	subi	r26, 0xC5	; 197
     c04:	bb 4f       	sbci	r27, 0xFB	; 251
     c06:	ac 91       	ld	r26, X
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	a0 50       	subi	r26, 0x00	; 0
     c0c:	bf 4f       	sbci	r27, 0xFF	; 255
     c0e:	ee 0f       	add	r30, r30
     c10:	ee 0f       	add	r30, r30
     c12:	ee 0f       	add	r30, r30
     c14:	8c 91       	ld	r24, X
     c16:	e8 0f       	add	r30, r24
     c18:	e0 93 2d 04 	sts	0x042D, r30	; 0x80042d <OSPrioHighRdy>
     c1c:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <OSPrioCur>
     c20:	e8 17       	cp	r30, r24
     c22:	01 f1       	breq	.+64     	; 0xc64 <OS_Sched+0x84>
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	ef 57       	subi	r30, 0x7F	; 127
     c2c:	fa 4f       	sbci	r31, 0xFA	; 250
     c2e:	80 81       	ld	r24, Z
     c30:	91 81       	ldd	r25, Z+1	; 0x01
     c32:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <OSTCBHighRdy+0x1>
     c36:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <OSTCBHighRdy>
     c3a:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <OSCtxSwCtr>
     c3e:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <OSCtxSwCtr+0x1>
     c42:	a0 91 33 04 	lds	r26, 0x0433	; 0x800433 <OSCtxSwCtr+0x2>
     c46:	b0 91 34 04 	lds	r27, 0x0434	; 0x800434 <OSCtxSwCtr+0x3>
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	a1 1d       	adc	r26, r1
     c4e:	b1 1d       	adc	r27, r1
     c50:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <OSCtxSwCtr>
     c54:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <OSCtxSwCtr+0x1>
     c58:	a0 93 33 04 	sts	0x0433, r26	; 0x800433 <OSCtxSwCtr+0x2>
     c5c:	b0 93 34 04 	sts	0x0434, r27	; 0x800434 <OSCtxSwCtr+0x3>
     c60:	0e 94 c6 03 	call	0x78c	; 0x78c <OSCtxSw>
     c64:	78 94       	sei
     c66:	08 95       	ret

00000c68 <OSSchedUnlock>:
     c68:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	91 f4       	brne	.+36     	; 0xc94 <OSSchedUnlock+0x2c>
     c70:	f8 94       	cli
     c72:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <OSLockNesting>
     c76:	88 23       	and	r24, r24
     c78:	61 f0       	breq	.+24     	; 0xc92 <OSSchedUnlock+0x2a>
     c7a:	81 50       	subi	r24, 0x01	; 1
     c7c:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <OSLockNesting>
     c80:	81 11       	cpse	r24, r1
     c82:	07 c0       	rjmp	.+14     	; 0xc92 <OSSchedUnlock+0x2a>
     c84:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <OSIntNesting>
     c88:	81 11       	cpse	r24, r1
     c8a:	03 c0       	rjmp	.+6      	; 0xc92 <OSSchedUnlock+0x2a>
     c8c:	78 94       	sei
     c8e:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <OS_Sched>
     c92:	78 94       	sei
     c94:	08 95       	ret

00000c96 <OSTimeDly.part.0>:
     c96:	ac 01       	movw	r20, r24
     c98:	f8 94       	cli
     c9a:	a0 91 40 04 	lds	r26, 0x0440	; 0x800440 <OSTCBCur>
     c9e:	b0 91 41 04 	lds	r27, 0x0441	; 0x800441 <OSTCBCur+0x1>
     ca2:	1b 96       	adiw	r26, 0x0b	; 11
     ca4:	ec 91       	ld	r30, X
     ca6:	1b 97       	sbiw	r26, 0x0b	; 11
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	1c 96       	adiw	r26, 0x0c	; 12
     cac:	9c 91       	ld	r25, X
     cae:	1c 97       	sbiw	r26, 0x0c	; 12
     cb0:	90 95       	com	r25
     cb2:	e5 5c       	subi	r30, 0xC5	; 197
     cb4:	fb 4f       	sbci	r31, 0xFB	; 251
     cb6:	80 81       	ld	r24, Z
     cb8:	98 23       	and	r25, r24
     cba:	90 83       	st	Z, r25
     cbc:	91 11       	cpse	r25, r1
     cbe:	0a c0       	rjmp	.+20     	; 0xcd4 <OSTimeDly.part.0+0x3e>
     cc0:	1d 96       	adiw	r26, 0x0d	; 13
     cc2:	9c 91       	ld	r25, X
     cc4:	1d 97       	sbiw	r26, 0x0d	; 13
     cc6:	29 2f       	mov	r18, r25
     cc8:	20 95       	com	r18
     cca:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <OSRdyGrp>
     cce:	92 23       	and	r25, r18
     cd0:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <OSRdyGrp>
     cd4:	17 96       	adiw	r26, 0x07	; 7
     cd6:	5c 93       	st	X, r21
     cd8:	4e 93       	st	-X, r20
     cda:	16 97       	sbiw	r26, 0x06	; 6
     cdc:	78 94       	sei
     cde:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <OS_Sched>

00000ce2 <OS_TCBInit>:
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	f8 94       	cli
     cea:	c0 91 35 04 	lds	r28, 0x0435	; 0x800435 <OSTCBFreeList>
     cee:	d0 91 36 04 	lds	r29, 0x0436	; 0x800436 <OSTCBFreeList+0x1>
     cf2:	20 97       	sbiw	r28, 0x00	; 0
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <OS_TCBInit+0x16>
     cf6:	54 c0       	rjmp	.+168    	; 0xda0 <OS_TCBInit+0xbe>
     cf8:	18 2f       	mov	r17, r24
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	9b 81       	ldd	r25, Y+3	; 0x03
     cfe:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <OSTCBFreeList+0x1>
     d02:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <OSTCBFreeList>
     d06:	78 94       	sei
     d08:	79 83       	std	Y+1, r23	; 0x01
     d0a:	68 83       	st	Y, r22
     d0c:	19 87       	std	Y+9, r17	; 0x09
     d0e:	18 86       	std	Y+8, r1	; 0x08
     d10:	1f 82       	std	Y+7, r1	; 0x07
     d12:	1e 82       	std	Y+6, r1	; 0x06
     d14:	1e 86       	std	Y+14, r1	; 0x0e
     d16:	e1 2f       	mov	r30, r17
     d18:	e6 95       	lsr	r30
     d1a:	e6 95       	lsr	r30
     d1c:	e6 95       	lsr	r30
     d1e:	eb 87       	std	Y+11, r30	; 0x0b
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	e0 50       	subi	r30, 0x00	; 0
     d24:	fe 4f       	sbci	r31, 0xFE	; 254
     d26:	80 81       	ld	r24, Z
     d28:	8d 87       	std	Y+13, r24	; 0x0d
     d2a:	e1 2f       	mov	r30, r17
     d2c:	e7 70       	andi	r30, 0x07	; 7
     d2e:	ea 87       	std	Y+10, r30	; 0x0a
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	e0 50       	subi	r30, 0x00	; 0
     d34:	fe 4f       	sbci	r31, 0xFE	; 254
     d36:	80 81       	ld	r24, Z
     d38:	8c 87       	std	Y+12, r24	; 0x0c
     d3a:	ce 01       	movw	r24, r28
     d3c:	0e 94 07 05 	call	0xa0e	; 0xa0e <OSTCBInitHook>
     d40:	ce 01       	movw	r24, r28
     d42:	0e 94 ff 04 	call	0x9fe	; 0x9fe <OSTaskCreateHook>
     d46:	f8 94       	cli
     d48:	e1 2f       	mov	r30, r17
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	ee 0f       	add	r30, r30
     d4e:	ff 1f       	adc	r31, r31
     d50:	ef 57       	subi	r30, 0x7F	; 127
     d52:	fa 4f       	sbci	r31, 0xFA	; 250
     d54:	d1 83       	std	Z+1, r29	; 0x01
     d56:	c0 83       	st	Z, r28
     d58:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <OSTCBList>
     d5c:	f0 91 30 04 	lds	r31, 0x0430	; 0x800430 <OSTCBList+0x1>
     d60:	fb 83       	std	Y+3, r31	; 0x03
     d62:	ea 83       	std	Y+2, r30	; 0x02
     d64:	1d 82       	std	Y+5, r1	; 0x05
     d66:	1c 82       	std	Y+4, r1	; 0x04
     d68:	30 97       	sbiw	r30, 0x00	; 0
     d6a:	11 f0       	breq	.+4      	; 0xd70 <OS_TCBInit+0x8e>
     d6c:	d5 83       	std	Z+5, r29	; 0x05
     d6e:	c4 83       	std	Z+4, r28	; 0x04
     d70:	d0 93 30 04 	sts	0x0430, r29	; 0x800430 <OSTCBList+0x1>
     d74:	c0 93 2f 04 	sts	0x042F, r28	; 0x80042f <OSTCBList>
     d78:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <OSRdyGrp>
     d7c:	9d 85       	ldd	r25, Y+13	; 0x0d
     d7e:	89 2b       	or	r24, r25
     d80:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <OSRdyGrp>
     d84:	eb 85       	ldd	r30, Y+11	; 0x0b
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	e5 5c       	subi	r30, 0xC5	; 197
     d8a:	fb 4f       	sbci	r31, 0xFB	; 251
     d8c:	80 81       	ld	r24, Z
     d8e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d90:	89 2b       	or	r24, r25
     d92:	80 83       	st	Z, r24
     d94:	78 94       	sei
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	1f 91       	pop	r17
     d9e:	08 95       	ret
     da0:	78 94       	sei
     da2:	86 e4       	ldi	r24, 0x46	; 70
     da4:	f9 cf       	rjmp	.-14     	; 0xd98 <OS_TCBInit+0xb6>

00000da6 <OSTaskCreate>:
     da6:	9f 92       	push	r9
     da8:	af 92       	push	r10
     daa:	bf 92       	push	r11
     dac:	cf 92       	push	r12
     dae:	df 92       	push	r13
     db0:	ef 92       	push	r14
     db2:	ff 92       	push	r15
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	f8 94       	cli
     dbe:	c2 2f       	mov	r28, r18
     dc0:	d0 e0       	ldi	r29, 0x00	; 0
     dc2:	cc 0f       	add	r28, r28
     dc4:	dd 1f       	adc	r29, r29
     dc6:	cf 57       	subi	r28, 0x7F	; 127
     dc8:	da 4f       	sbci	r29, 0xFA	; 250
     dca:	e8 81       	ld	r30, Y
     dcc:	f9 81       	ldd	r31, Y+1	; 0x01
     dce:	ef 2b       	or	r30, r31
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <OSTaskCreate+0x2e>
     dd2:	3b c0       	rjmp	.+118    	; 0xe4a <OSTaskCreate+0xa4>
     dd4:	92 2e       	mov	r9, r18
     dd6:	21 e0       	ldi	r18, 0x01	; 1
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	39 83       	std	Y+1, r19	; 0x01
     ddc:	28 83       	st	Y, r18
     dde:	78 94       	sei
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	0e 94 b5 04 	call	0x96a	; 0x96a <OSTaskStkInit>
     de8:	b1 2c       	mov	r11, r1
     dea:	a1 2c       	mov	r10, r1
     dec:	d1 2c       	mov	r13, r1
     dee:	c1 2c       	mov	r12, r1
     df0:	e1 2c       	mov	r14, r1
     df2:	f1 2c       	mov	r15, r1
     df4:	87 01       	movw	r16, r14
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	40 e0       	ldi	r20, 0x00	; 0
     dfe:	bc 01       	movw	r22, r24
     e00:	89 2d       	mov	r24, r9
     e02:	0e 94 71 06 	call	0xce2	; 0xce2 <OS_TCBInit>
     e06:	18 2f       	mov	r17, r24
     e08:	81 11       	cpse	r24, r1
     e0a:	1a c0       	rjmp	.+52     	; 0xe40 <OSTaskCreate+0x9a>
     e0c:	f8 94       	cli
     e0e:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <OSTaskCtr>
     e12:	8f 5f       	subi	r24, 0xFF	; 255
     e14:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <OSTaskCtr>
     e18:	78 94       	sei
     e1a:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	11 f4       	brne	.+4      	; 0xe26 <OSTaskCreate+0x80>
     e22:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OS_Sched>
     e26:	81 2f       	mov	r24, r17
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	df 90       	pop	r13
     e36:	cf 90       	pop	r12
     e38:	bf 90       	pop	r11
     e3a:	af 90       	pop	r10
     e3c:	9f 90       	pop	r9
     e3e:	08 95       	ret
     e40:	f8 94       	cli
     e42:	19 82       	std	Y+1, r1	; 0x01
     e44:	18 82       	st	Y, r1
     e46:	78 94       	sei
     e48:	ee cf       	rjmp	.-36     	; 0xe26 <OSTaskCreate+0x80>
     e4a:	78 94       	sei
     e4c:	18 e2       	ldi	r17, 0x28	; 40
     e4e:	eb cf       	rjmp	.-42     	; 0xe26 <OSTaskCreate+0x80>

00000e50 <OSInit>:
     e50:	0e 94 04 05 	call	0xa08	; 0xa08 <OSInitHookBegin>
     e54:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <OSIntNesting>
     e58:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <OSLockNesting>
     e5c:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <OSTaskCtr>
     e60:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <OSRunning>
     e64:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <OSCtxSwCtr>
     e68:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <OSCtxSwCtr+0x1>
     e6c:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <OSCtxSwCtr+0x2>
     e70:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <OSCtxSwCtr+0x3>
     e74:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <OSIdleCtr>
     e78:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <OSIdleCtr+0x1>
     e7c:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <OSIdleCtr+0x2>
     e80:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <OSIdleCtr+0x3>
     e84:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <OSRdyGrp>
     e88:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <OSRdyTbl>
     e8c:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <OSRdyTbl+0x1>
     e90:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <OSRdyTbl+0x2>
     e94:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <OSPrioCur>
     e98:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <OSPrioHighRdy>
     e9c:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <OSTCBHighRdy+0x1>
     ea0:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <OSTCBHighRdy>
     ea4:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <OSTCBCur+0x1>
     ea8:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <OSTCBCur>
     eac:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <OSTCBList+0x1>
     eb0:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <OSTCBList>
     eb4:	e1 e8       	ldi	r30, 0x81	; 129
     eb6:	f5 e0       	ldi	r31, 0x05	; 5
     eb8:	11 92       	st	Z+, r1
     eba:	11 92       	st	Z+, r1
     ebc:	85 e0       	ldi	r24, 0x05	; 5
     ebe:	e3 3a       	cpi	r30, 0xA3	; 163
     ec0:	f8 07       	cpc	r31, r24
     ec2:	d1 f7       	brne	.-12     	; 0xeb8 <OSInit+0x68>
     ec4:	e2 e8       	ldi	r30, 0x82	; 130
     ec6:	f4 e0       	ldi	r31, 0x04	; 4
     ec8:	cf 01       	movw	r24, r30
     eca:	0f 96       	adiw	r24, 0x0f	; 15
     ecc:	93 83       	std	Z+3, r25	; 0x03
     ece:	82 83       	std	Z+2, r24	; 0x02
     ed0:	fc 01       	movw	r30, r24
     ed2:	85 e0       	ldi	r24, 0x05	; 5
     ed4:	e2 37       	cpi	r30, 0x72	; 114
     ed6:	f8 07       	cpc	r31, r24
     ed8:	b9 f7       	brne	.-18     	; 0xec8 <OSInit+0x78>
     eda:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <OSTCBTbl+0xf3>
     ede:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <OSTCBTbl+0xf2>
     ee2:	82 e8       	ldi	r24, 0x82	; 130
     ee4:	94 e0       	ldi	r25, 0x04	; 4
     ee6:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <OSTCBFreeList+0x1>
     eea:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <OSTCBFreeList>
     eee:	20 e1       	ldi	r18, 0x10	; 16
     ef0:	41 e8       	ldi	r20, 0x81	; 129
     ef2:	54 e0       	ldi	r21, 0x04	; 4
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	88 e0       	ldi	r24, 0x08	; 8
     efa:	95 e0       	ldi	r25, 0x05	; 5
     efc:	0e 94 d3 06 	call	0xda6	; 0xda6 <OSTaskCreate>
     f00:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <OSInitHookEnd>

00000f04 <OSTaskDel>:
     f04:	ff 92       	push	r15
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	f0 90 3f 04 	lds	r15, 0x043F	; 0x80043f <OSIntNesting>
     f12:	f1 10       	cpse	r15, r1
     f14:	76 c0       	rjmp	.+236    	; 0x1002 <OSTaskDel+0xfe>
     f16:	f8 94       	cli
     f18:	8f 3f       	cpi	r24, 0xFF	; 255
     f1a:	29 f4       	brne	.+10     	; 0xf26 <OSTaskDel+0x22>
     f1c:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <OSTCBCur>
     f20:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <OSTCBCur+0x1>
     f24:	81 85       	ldd	r24, Z+9	; 0x09
     f26:	08 2f       	mov	r16, r24
     f28:	10 e0       	ldi	r17, 0x00	; 0
     f2a:	00 0f       	add	r16, r16
     f2c:	11 1f       	adc	r17, r17
     f2e:	f8 01       	movw	r30, r16
     f30:	ef 57       	subi	r30, 0x7F	; 127
     f32:	fa 4f       	sbci	r31, 0xFA	; 250
     f34:	c0 81       	ld	r28, Z
     f36:	d1 81       	ldd	r29, Z+1	; 0x01
     f38:	20 97       	sbiw	r28, 0x00	; 0
     f3a:	09 f4       	brne	.+2      	; 0xf3e <OSTaskDel+0x3a>
     f3c:	5e c0       	rjmp	.+188    	; 0xffa <OSTaskDel+0xf6>
     f3e:	eb 85       	ldd	r30, Y+11	; 0x0b
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	8c 85       	ldd	r24, Y+12	; 0x0c
     f44:	80 95       	com	r24
     f46:	e5 5c       	subi	r30, 0xC5	; 197
     f48:	fb 4f       	sbci	r31, 0xFB	; 251
     f4a:	90 81       	ld	r25, Z
     f4c:	89 23       	and	r24, r25
     f4e:	80 83       	st	Z, r24
     f50:	81 11       	cpse	r24, r1
     f52:	08 c0       	rjmp	.+16     	; 0xf64 <OSTaskDel+0x60>
     f54:	8d 85       	ldd	r24, Y+13	; 0x0d
     f56:	98 2f       	mov	r25, r24
     f58:	90 95       	com	r25
     f5a:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <OSRdyGrp>
     f5e:	89 23       	and	r24, r25
     f60:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <OSRdyGrp>
     f64:	1f 82       	std	Y+7, r1	; 0x07
     f66:	1e 82       	std	Y+6, r1	; 0x06
     f68:	18 86       	std	Y+8, r1	; 0x08
     f6a:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <OSLockNesting>
     f6e:	8f 3f       	cpi	r24, 0xFF	; 255
     f70:	19 f0       	breq	.+6      	; 0xf78 <OSTaskDel+0x74>
     f72:	8f 5f       	subi	r24, 0xFF	; 255
     f74:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <OSLockNesting>
     f78:	78 94       	sei
     f7a:	f8 94       	cli
     f7c:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <OSLockNesting>
     f80:	88 23       	and	r24, r24
     f82:	19 f0       	breq	.+6      	; 0xf8a <OSTaskDel+0x86>
     f84:	81 50       	subi	r24, 0x01	; 1
     f86:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <OSLockNesting>
     f8a:	ce 01       	movw	r24, r28
     f8c:	0e 94 00 05 	call	0xa00	; 0xa00 <OSTaskDelHook>
     f90:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <OSTaskCtr>
     f94:	81 50       	subi	r24, 0x01	; 1
     f96:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <OSTaskCtr>
     f9a:	f8 01       	movw	r30, r16
     f9c:	ef 57       	subi	r30, 0x7F	; 127
     f9e:	fa 4f       	sbci	r31, 0xFA	; 250
     fa0:	11 82       	std	Z+1, r1	; 0x01
     fa2:	10 82       	st	Z, r1
     fa4:	ec 81       	ldd	r30, Y+4	; 0x04
     fa6:	fd 81       	ldd	r31, Y+5	; 0x05
     fa8:	aa 81       	ldd	r26, Y+2	; 0x02
     faa:	bb 81       	ldd	r27, Y+3	; 0x03
     fac:	30 97       	sbiw	r30, 0x00	; 0
     fae:	e1 f4       	brne	.+56     	; 0xfe8 <OSTaskDel+0xe4>
     fb0:	15 96       	adiw	r26, 0x05	; 5
     fb2:	1c 92       	st	X, r1
     fb4:	1e 92       	st	-X, r1
     fb6:	14 97       	sbiw	r26, 0x04	; 4
     fb8:	b0 93 30 04 	sts	0x0430, r27	; 0x800430 <OSTCBList+0x1>
     fbc:	a0 93 2f 04 	sts	0x042F, r26	; 0x80042f <OSTCBList>
     fc0:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <OSTCBFreeList>
     fc4:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <OSTCBFreeList+0x1>
     fc8:	9b 83       	std	Y+3, r25	; 0x03
     fca:	8a 83       	std	Y+2, r24	; 0x02
     fcc:	d0 93 36 04 	sts	0x0436, r29	; 0x800436 <OSTCBFreeList+0x1>
     fd0:	c0 93 35 04 	sts	0x0435, r28	; 0x800435 <OSTCBFreeList>
     fd4:	78 94       	sei
     fd6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <OS_Sched>
     fda:	8f 2d       	mov	r24, r15
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	ff 90       	pop	r15
     fe6:	08 95       	ret
     fe8:	b3 83       	std	Z+3, r27	; 0x03
     fea:	a2 83       	std	Z+2, r26	; 0x02
     fec:	aa 81       	ldd	r26, Y+2	; 0x02
     fee:	bb 81       	ldd	r27, Y+3	; 0x03
     ff0:	15 96       	adiw	r26, 0x05	; 5
     ff2:	fc 93       	st	X, r31
     ff4:	ee 93       	st	-X, r30
     ff6:	14 97       	sbiw	r26, 0x04	; 4
     ff8:	e3 cf       	rjmp	.-58     	; 0xfc0 <OSTaskDel+0xbc>
     ffa:	78 94       	sei
     ffc:	9c e3       	ldi	r25, 0x3C	; 60
     ffe:	f9 2e       	mov	r15, r25
    1000:	ec cf       	rjmp	.-40     	; 0xfda <OSTaskDel+0xd6>
    1002:	8f e3       	ldi	r24, 0x3F	; 63
    1004:	f8 2e       	mov	r15, r24
    1006:	e9 cf       	rjmp	.-46     	; 0xfda <OSTaskDel+0xd6>

00001008 <OSTaskDelReq>:
    1008:	8f 3f       	cpi	r24, 0xFF	; 255
    100a:	41 f4       	brne	.+16     	; 0x101c <OSTaskDelReq+0x14>
    100c:	f8 94       	cli
    100e:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <OSTCBCur>
    1012:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <OSTCBCur+0x1>
    1016:	86 85       	ldd	r24, Z+14	; 0x0e
    1018:	78 94       	sei
    101a:	08 95       	ret
    101c:	f8 94       	cli
    101e:	e8 2f       	mov	r30, r24
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	ee 0f       	add	r30, r30
    1024:	ff 1f       	adc	r31, r31
    1026:	ef 57       	subi	r30, 0x7F	; 127
    1028:	fa 4f       	sbci	r31, 0xFA	; 250
    102a:	01 90       	ld	r0, Z+
    102c:	f0 81       	ld	r31, Z
    102e:	e0 2d       	mov	r30, r0
    1030:	8b e0       	ldi	r24, 0x0B	; 11
    1032:	30 97       	sbiw	r30, 0x00	; 0
    1034:	89 f3       	breq	.-30     	; 0x1018 <OSTaskDelReq+0x10>
    1036:	8e e3       	ldi	r24, 0x3E	; 62
    1038:	86 87       	std	Z+14, r24	; 0x0e
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	ed cf       	rjmp	.-38     	; 0x1018 <OSTaskDelReq+0x10>

0000103e <OSTimeDly>:
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	11 f0       	breq	.+4      	; 0x1046 <OSTimeDly+0x8>
    1042:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <OSTimeDly.part.0>
    1046:	08 95       	ret

00001048 <OSTimeDlyHMSM>:
    1048:	cf 92       	push	r12
    104a:	df 92       	push	r13
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	81 11       	cpse	r24, r1
    1052:	0d c0       	rjmp	.+26     	; 0x106e <OSTimeDlyHMSM+0x26>
    1054:	61 11       	cpse	r22, r1
    1056:	0b c0       	rjmp	.+22     	; 0x106e <OSTimeDlyHMSM+0x26>
    1058:	41 11       	cpse	r20, r1
    105a:	0c c0       	rjmp	.+24     	; 0x1074 <OSTimeDlyHMSM+0x2c>
    105c:	21 15       	cp	r18, r1
    105e:	31 05       	cpc	r19, r1
    1060:	61 f4       	brne	.+24     	; 0x107a <OSTimeDlyHMSM+0x32>
    1062:	84 e5       	ldi	r24, 0x54	; 84
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	df 90       	pop	r13
    106a:	cf 90       	pop	r12
    106c:	08 95       	ret
    106e:	6c 33       	cpi	r22, 0x3C	; 60
    1070:	08 f0       	brcs	.+2      	; 0x1074 <OSTimeDlyHMSM+0x2c>
    1072:	4f c0       	rjmp	.+158    	; 0x1112 <OSTimeDlyHMSM+0xca>
    1074:	4c 33       	cpi	r20, 0x3C	; 60
    1076:	08 f0       	brcs	.+2      	; 0x107a <OSTimeDlyHMSM+0x32>
    1078:	4e c0       	rjmp	.+156    	; 0x1116 <OSTimeDlyHMSM+0xce>
    107a:	28 3e       	cpi	r18, 0xE8	; 232
    107c:	93 e0       	ldi	r25, 0x03	; 3
    107e:	39 07       	cpc	r19, r25
    1080:	08 f0       	brcs	.+2      	; 0x1084 <OSTimeDlyHMSM+0x3c>
    1082:	4b c0       	rjmp	.+150    	; 0x111a <OSTimeDlyHMSM+0xd2>
    1084:	f9 01       	movw	r30, r18
    1086:	58 2f       	mov	r21, r24
    1088:	26 2f       	mov	r18, r22
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	ac e3       	ldi	r26, 0x3C	; 60
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__umulhisi3>
    1094:	6b 01       	movw	r12, r22
    1096:	7c 01       	movw	r14, r24
    1098:	c4 0e       	add	r12, r20
    109a:	d1 1c       	adc	r13, r1
    109c:	e1 1c       	adc	r14, r1
    109e:	f1 1c       	adc	r15, r1
    10a0:	25 2f       	mov	r18, r21
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	a0 e1       	ldi	r26, 0x10	; 16
    10a6:	be e0       	ldi	r27, 0x0E	; 14
    10a8:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__umulhisi3>
    10ac:	a7 01       	movw	r20, r14
    10ae:	96 01       	movw	r18, r12
    10b0:	26 0f       	add	r18, r22
    10b2:	37 1f       	adc	r19, r23
    10b4:	48 1f       	adc	r20, r24
    10b6:	59 1f       	adc	r21, r25
    10b8:	a4 e6       	ldi	r26, 0x64	; 100
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	0e 94 0c 09 	call	0x1218	; 0x1218 <__muluhisi3>
    10c0:	6b 01       	movw	r12, r22
    10c2:	7c 01       	movw	r14, r24
    10c4:	9f 01       	movw	r18, r30
    10c6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__umulhisi3>
    10ca:	6c 50       	subi	r22, 0x0C	; 12
    10cc:	7e 4f       	sbci	r23, 0xFE	; 254
    10ce:	8f 4f       	sbci	r24, 0xFF	; 255
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	28 ee       	ldi	r18, 0xE8	; 232
    10d4:	33 e0       	ldi	r19, 0x03	; 3
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	50 e0       	ldi	r21, 0x00	; 0
    10da:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__udivmodsi4>
    10de:	d7 01       	movw	r26, r14
    10e0:	c6 01       	movw	r24, r12
    10e2:	82 0f       	add	r24, r18
    10e4:	93 1f       	adc	r25, r19
    10e6:	a4 1f       	adc	r26, r20
    10e8:	b5 1f       	adc	r27, r21
    10ea:	7d 01       	movw	r14, r26
    10ec:	0e 94 1f 08 	call	0x103e	; 0x103e <OSTimeDly>
    10f0:	e1 14       	cp	r14, r1
    10f2:	f1 04       	cpc	r15, r1
    10f4:	11 f4       	brne	.+4      	; 0x10fa <OSTimeDlyHMSM+0xb2>
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	b5 cf       	rjmp	.-150    	; 0x1064 <OSTimeDlyHMSM+0x1c>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e8       	ldi	r25, 0x80	; 128
    10fe:	0e 94 4b 06 	call	0xc96	; 0xc96 <OSTimeDly.part.0>
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e8       	ldi	r25, 0x80	; 128
    1106:	0e 94 4b 06 	call	0xc96	; 0xc96 <OSTimeDly.part.0>
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	e8 1a       	sub	r14, r24
    110e:	f1 08       	sbc	r15, r1
    1110:	ef cf       	rjmp	.-34     	; 0x10f0 <OSTimeDlyHMSM+0xa8>
    1112:	81 e5       	ldi	r24, 0x51	; 81
    1114:	a7 cf       	rjmp	.-178    	; 0x1064 <OSTimeDlyHMSM+0x1c>
    1116:	82 e5       	ldi	r24, 0x52	; 82
    1118:	a5 cf       	rjmp	.-182    	; 0x1064 <OSTimeDlyHMSM+0x1c>
    111a:	83 e5       	ldi	r24, 0x53	; 83
    111c:	a3 cf       	rjmp	.-186    	; 0x1064 <OSTimeDlyHMSM+0x1c>

0000111e <main>:

}

int main( void )
{
 robo_Setup(); /* initialize HAL for RoboKar */
    111e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <robo_Setup>
 OSInit(); /* initialize UCOS-II kernel */
    1122:	0e 94 28 07 	call	0xe50	; 0xe50 <OSInit>

 robo_motorSpeed(STOP_SPEED, STOP_SPEED); /* Stop the robot, value STOP_SPEED == 0 */
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <robo_motorSpeed>
 myrobot.rspeed = STOP_SPEED; /* Initialize myrobot states */
    1132:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <myrobot+0x1>
    1136:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <myrobot>
 myrobot.lspeed = STOP_SPEED;
    113a:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <myrobot+0x3>
    113e:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <myrobot+0x2>
 myrobot.obstacle = 0; /* No collisioin */
    1142:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <myrobot+0x4>

 OSTaskCreate(TaskStart, /* create TaskStart Task */
    1146:	21 e0       	ldi	r18, 0x01	; 1
    1148:	4e e9       	ldi	r20, 0x9E	; 158
    114a:	53 e0       	ldi	r21, 0x03	; 3
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	8c e0       	ldi	r24, 0x0C	; 12
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	0e 94 d3 06 	call	0xda6	; 0xda6 <OSTaskCreate>
 (void *)0,
 (void *)&TaskStartStk[TASK_STK_SZ - 1],
 TASK_START_PRIO);
 robo_Honk(); robo_wait4goPress(); /* Wait for to GO */
    1158:	0e 94 a0 02 	call	0x540	; 0x540 <robo_Honk>
    115c:	0e 94 c6 02 	call	0x58c	; 0x58c <robo_wait4goPress>
 OSStart(); /* Start multitasking */
    1160:	0e 94 8c 05 	call	0xb18	; 0xb18 <OSStart>
    1164:	ff cf       	rjmp	.-2      	; 0x1164 <main+0x46>

00001166 <__udivmodhi4>:
    1166:	aa 1b       	sub	r26, r26
    1168:	bb 1b       	sub	r27, r27
    116a:	51 e1       	ldi	r21, 0x11	; 17
    116c:	07 c0       	rjmp	.+14     	; 0x117c <__udivmodhi4_ep>

0000116e <__udivmodhi4_loop>:
    116e:	aa 1f       	adc	r26, r26
    1170:	bb 1f       	adc	r27, r27
    1172:	a6 17       	cp	r26, r22
    1174:	b7 07       	cpc	r27, r23
    1176:	10 f0       	brcs	.+4      	; 0x117c <__udivmodhi4_ep>
    1178:	a6 1b       	sub	r26, r22
    117a:	b7 0b       	sbc	r27, r23

0000117c <__udivmodhi4_ep>:
    117c:	88 1f       	adc	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	5a 95       	dec	r21
    1182:	a9 f7       	brne	.-22     	; 0x116e <__udivmodhi4_loop>
    1184:	80 95       	com	r24
    1186:	90 95       	com	r25
    1188:	bc 01       	movw	r22, r24
    118a:	cd 01       	movw	r24, r26
    118c:	08 95       	ret

0000118e <__divmodhi4>:
    118e:	97 fb       	bst	r25, 7
    1190:	07 2e       	mov	r0, r23
    1192:	16 f4       	brtc	.+4      	; 0x1198 <__divmodhi4+0xa>
    1194:	00 94       	com	r0
    1196:	07 d0       	rcall	.+14     	; 0x11a6 <__divmodhi4_neg1>
    1198:	77 fd       	sbrc	r23, 7
    119a:	09 d0       	rcall	.+18     	; 0x11ae <__divmodhi4_neg2>
    119c:	0e 94 b3 08 	call	0x1166	; 0x1166 <__udivmodhi4>
    11a0:	07 fc       	sbrc	r0, 7
    11a2:	05 d0       	rcall	.+10     	; 0x11ae <__divmodhi4_neg2>
    11a4:	3e f4       	brtc	.+14     	; 0x11b4 <__divmodhi4_exit>

000011a6 <__divmodhi4_neg1>:
    11a6:	90 95       	com	r25
    11a8:	81 95       	neg	r24
    11aa:	9f 4f       	sbci	r25, 0xFF	; 255
    11ac:	08 95       	ret

000011ae <__divmodhi4_neg2>:
    11ae:	70 95       	com	r23
    11b0:	61 95       	neg	r22
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255

000011b4 <__divmodhi4_exit>:
    11b4:	08 95       	ret

000011b6 <__udivmodsi4>:
    11b6:	a1 e2       	ldi	r26, 0x21	; 33
    11b8:	1a 2e       	mov	r1, r26
    11ba:	aa 1b       	sub	r26, r26
    11bc:	bb 1b       	sub	r27, r27
    11be:	fd 01       	movw	r30, r26
    11c0:	0d c0       	rjmp	.+26     	; 0x11dc <__udivmodsi4_ep>

000011c2 <__udivmodsi4_loop>:
    11c2:	aa 1f       	adc	r26, r26
    11c4:	bb 1f       	adc	r27, r27
    11c6:	ee 1f       	adc	r30, r30
    11c8:	ff 1f       	adc	r31, r31
    11ca:	a2 17       	cp	r26, r18
    11cc:	b3 07       	cpc	r27, r19
    11ce:	e4 07       	cpc	r30, r20
    11d0:	f5 07       	cpc	r31, r21
    11d2:	20 f0       	brcs	.+8      	; 0x11dc <__udivmodsi4_ep>
    11d4:	a2 1b       	sub	r26, r18
    11d6:	b3 0b       	sbc	r27, r19
    11d8:	e4 0b       	sbc	r30, r20
    11da:	f5 0b       	sbc	r31, r21

000011dc <__udivmodsi4_ep>:
    11dc:	66 1f       	adc	r22, r22
    11de:	77 1f       	adc	r23, r23
    11e0:	88 1f       	adc	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	1a 94       	dec	r1
    11e6:	69 f7       	brne	.-38     	; 0x11c2 <__udivmodsi4_loop>
    11e8:	60 95       	com	r22
    11ea:	70 95       	com	r23
    11ec:	80 95       	com	r24
    11ee:	90 95       	com	r25
    11f0:	9b 01       	movw	r18, r22
    11f2:	ac 01       	movw	r20, r24
    11f4:	bd 01       	movw	r22, r26
    11f6:	cf 01       	movw	r24, r30
    11f8:	08 95       	ret

000011fa <__umulhisi3>:
    11fa:	a2 9f       	mul	r26, r18
    11fc:	b0 01       	movw	r22, r0
    11fe:	b3 9f       	mul	r27, r19
    1200:	c0 01       	movw	r24, r0
    1202:	a3 9f       	mul	r26, r19
    1204:	70 0d       	add	r23, r0
    1206:	81 1d       	adc	r24, r1
    1208:	11 24       	eor	r1, r1
    120a:	91 1d       	adc	r25, r1
    120c:	b2 9f       	mul	r27, r18
    120e:	70 0d       	add	r23, r0
    1210:	81 1d       	adc	r24, r1
    1212:	11 24       	eor	r1, r1
    1214:	91 1d       	adc	r25, r1
    1216:	08 95       	ret

00001218 <__muluhisi3>:
    1218:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__umulhisi3>
    121c:	a5 9f       	mul	r26, r21
    121e:	90 0d       	add	r25, r0
    1220:	b4 9f       	mul	r27, r20
    1222:	90 0d       	add	r25, r0
    1224:	a4 9f       	mul	r26, r20
    1226:	80 0d       	add	r24, r0
    1228:	91 1d       	adc	r25, r1
    122a:	11 24       	eor	r1, r1
    122c:	08 95       	ret

0000122e <_exit>:
    122e:	f8 94       	cli

00001230 <__stop_program>:
    1230:	ff cf       	rjmp	.-2      	; 0x1230 <__stop_program>
