
robokargame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  0000127c  00001310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000127c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000038b  0080021a  0080021a  0000142a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000142a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001480  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000147e  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083e  00000000  00000000  00002a46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a5f  00000000  00000000  00003284  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00003ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062f  00000000  00000000  00003d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e8  00000000  00000000  00004387  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000446f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e7       	ldi	r30, 0x7C	; 124
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 3a       	cpi	r26, 0xA5	; 165
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b0 08 	call	0x1160	; 0x1160 <main>
      9e:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CheckCollision>:
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ) /* obstacle? */
     myrobot.obstacle = 1; /* signal obstacle present */
      a6:	c1 e0       	ldi	r28, 0x01	; 1
/*------High pririority task----------*/
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ) /* obstacle? */
      a8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <robo_proxSensor>
      ac:	01 97       	sbiw	r24, 0x01	; 1
      ae:	51 f4       	brne	.+20     	; 0xc4 <CheckCollision+0x1e>
     myrobot.obstacle = 1; /* signal obstacle present */
      b0:	c0 93 9e 02 	sts	0x029E, r28	; 0x80029e <myrobot+0x4>
 else
     myrobot.obstacle = 0; /* signal no obstacle */

 OSTimeDlyHMSM(0, 0, 0, 100); /* Task period ~ 100 ms */
      b4:	24 e6       	ldi	r18, 0x64	; 100
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	40 e0       	ldi	r20, 0x00	; 0
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 45 08 	call	0x108a	; 0x108a <OSTimeDlyHMSM>
/*------High pririority task----------*/
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ) /* obstacle? */
      c2:	f2 cf       	rjmp	.-28     	; 0xa8 <CheckCollision+0x2>
     myrobot.obstacle = 1; /* signal obstacle present */
 else
     myrobot.obstacle = 0; /* signal no obstacle */
      c4:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <myrobot+0x4>
      c8:	f5 cf       	rjmp	.-22     	; 0xb4 <CheckCollision+0xe>

000000ca <CntrlMotors>:

 for(;;)
 {
  speed_r = myrobot.rspeed;
  speed_l = myrobot.lspeed;
  robo_motorSpeed(speed_l, speed_r);
      ca:	60 91 9a 02 	lds	r22, 0x029A	; 0x80029a <myrobot>
      ce:	70 91 9b 02 	lds	r23, 0x029B	; 0x80029b <myrobot+0x1>
      d2:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <myrobot+0x2>
      d6:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <myrobot+0x3>
      da:	0e 94 1e 02 	call	0x43c	; 0x43c <robo_motorSpeed>
  OSTimeDlyHMSM(0, 0, 0, 10); /* Task period ~ 250 ms */
      de:	2a e0       	ldi	r18, 0x0A	; 10
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 45 08 	call	0x108a	; 0x108a <OSTimeDlyHMSM>
      ec:	ee cf       	rjmp	.-36     	; 0xca <CntrlMotors>

000000ee <Navig>:
  

	// for light sensor
	  if (robo_lightSensor() > 80) /* it is too bright, I'm photophobia */
	  {
	   myrobot.rspeed = -LOW_SPEED; /* turn right to avoid */
      ee:	cd ed       	ldi	r28, 0xDD	; 221
      f0:	df ef       	ldi	r29, 0xFF	; 255
	   myrobot.lspeed = LOW_SPEED;
      f2:	83 e2       	ldi	r24, 0x23	; 35
      f4:	48 2e       	mov	r4, r24
      f6:	51 2c       	mov	r5, r1


		//OSTimeDlyHMSM(0, 0, 0, 20);

	  }else{
	  	myrobot.rspeed = 50; 
      f8:	02 e3       	ldi	r16, 0x32	; 50
      fa:	10 e0       	ldi	r17, 0x00	; 0
	   	myrobot.lspeed = 75; /* bias left */
      fc:	9b e4       	ldi	r25, 0x4B	; 75
      fe:	69 2e       	mov	r6, r25
     100:	71 2c       	mov	r7, r1
		if(count>=30){
			myrobot.rspeed= 70;
			myrobot.lspeed = MEDIUM_SPEED;
			// count = 0;
		} else {
			myrobot.rspeed = -50; 
     102:	2e ec       	ldi	r18, 0xCE	; 206
     104:	c2 2e       	mov	r12, r18
     106:	dd 24       	eor	r13, r13
     108:	da 94       	dec	r13
	    	myrobot.lspeed = -40;
     10a:	38 ed       	ldi	r19, 0xD8	; 216
     10c:	a3 2e       	mov	r10, r19
     10e:	bb 24       	eor	r11, r11
     110:	ba 94       	dec	r11
	   myrobot.lspeed = MEDIUM_SPEED; /* corner right */
	  }else if (robo_lineSensor() == 0)
	  {
	  	count+=1;
		if(count>=30){
			myrobot.rspeed= 70;
     112:	46 e4       	ldi	r20, 0x46	; 70
     114:	e4 2e       	mov	r14, r20
     116:	f1 2c       	mov	r15, r1
   myrobot.lspeed = -LOW_SPEED;
  }else{
  	  if (robo_lineSensor() == 2) /* go straight */
	  {
	   count = 0;
	   myrobot.rspeed = 60;
     118:	5c e3       	ldi	r21, 0x3C	; 60
     11a:	85 2e       	mov	r8, r21
     11c:	91 2c       	mov	r9, r1
void Navig (void *data)
{

 for (;;)
 {
  if (myrobot.obstacle == 1) /* If blocked then reverse */
     11e:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <myrobot+0x4>
     122:	81 30       	cpi	r24, 0x01	; 1
     124:	81 f4       	brne	.+32     	; 0x146 <Navig+0x58>
  {
   myrobot.rspeed = -LOW_SPEED; /* REVERSE */
     126:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     12a:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
   myrobot.lspeed = -LOW_SPEED;
     12e:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <myrobot+0x3>
     132:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <myrobot+0x2>
	  	
	  }
  }
  

	OSTimeDlyHMSM(0, 0, 0, 10);
     136:	2a e0       	ldi	r18, 0x0A	; 10
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	40 e0       	ldi	r20, 0x00	; 0
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	0e 94 45 08 	call	0x108a	; 0x108a <OSTimeDlyHMSM>
void Navig (void *data)
{

 for (;;)
 {
  if (myrobot.obstacle == 1) /* If blocked then reverse */
     144:	ec cf       	rjmp	.-40     	; 0x11e <Navig+0x30>
  {
   myrobot.rspeed = -LOW_SPEED; /* REVERSE */
   myrobot.lspeed = -LOW_SPEED;
  }else{
  	  if (robo_lineSensor() == 2) /* go straight */
     146:	0e 94 9c 02 	call	0x538	; 0x538 <robo_lineSensor>
     14a:	02 97       	sbiw	r24, 0x02	; 2
     14c:	d1 f4       	brne	.+52     	; 0x182 <Navig+0x94>
	  {
	   count = 0;
     14e:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <count+0x1>
     152:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <count>
	   myrobot.rspeed = 60;
     156:	90 92 9b 02 	sts	0x029B, r9	; 0x80029b <myrobot+0x1>
     15a:	80 92 9a 02 	sts	0x029A, r8	; 0x80029a <myrobot>
	   myrobot.lspeed = 60;
     15e:	90 92 9d 02 	sts	0x029D, r9	; 0x80029d <myrobot+0x3>
     162:	80 92 9c 02 	sts	0x029C, r8	; 0x80029c <myrobot+0x2>
	  
	  }
  

	// for light sensor
	  if (robo_lightSensor() > 80) /* it is too bright, I'm photophobia */
     166:	0e 94 85 02 	call	0x50a	; 0x50a <robo_lightSensor>
     16a:	81 35       	cpi	r24, 0x51	; 81
     16c:	91 05       	cpc	r25, r1
     16e:	1c f3       	brlt	.-58     	; 0x136 <Navig+0x48>
	  {
	   myrobot.rspeed = -LOW_SPEED; /* turn right to avoid */
     170:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     174:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
	   myrobot.lspeed = LOW_SPEED;
     178:	50 92 9d 02 	sts	0x029D, r5	; 0x80029d <myrobot+0x3>
     17c:	40 92 9c 02 	sts	0x029C, r4	; 0x80029c <myrobot+0x2>
     180:	da cf       	rjmp	.-76     	; 0x136 <Navig+0x48>
  	  if (robo_lineSensor() == 2) /* go straight */
	  {
	   count = 0;
	   myrobot.rspeed = 60;
	   myrobot.lspeed = 60;
	  }else if (robo_lineSensor() == 4)
     182:	0e 94 9c 02 	call	0x538	; 0x538 <robo_lineSensor>
     186:	04 97       	sbiw	r24, 0x04	; 4
     188:	69 f4       	brne	.+26     	; 0x1a4 <Navig+0xb6>
	  {
	   count = 0;
     18a:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <count+0x1>
     18e:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <count>
	    myrobot.rspeed = 70 ;/* turn left */
     192:	f0 92 9b 02 	sts	0x029B, r15	; 0x80029b <myrobot+0x1>
     196:	e0 92 9a 02 	sts	0x029A, r14	; 0x80029a <myrobot>
			myrobot.rspeed= 70;
			myrobot.lspeed = MEDIUM_SPEED;
			// count = 0;
		} else {
			myrobot.rspeed = -50; 
	    	myrobot.lspeed = -40;
     19a:	b0 92 9d 02 	sts	0x029D, r11	; 0x80029d <myrobot+0x3>
     19e:	a0 92 9c 02 	sts	0x029C, r10	; 0x80029c <myrobot+0x2>
     1a2:	e1 cf       	rjmp	.-62     	; 0x166 <Navig+0x78>
	  }else if (robo_lineSensor() == 4)
	  {
	   count = 0;
	    myrobot.rspeed = 70 ;/* turn left */
	   myrobot.lspeed =  -40;
	  }else if (robo_lineSensor() == 1)
     1a4:	0e 94 9c 02 	call	0x538	; 0x538 <robo_lineSensor>
     1a8:	01 97       	sbiw	r24, 0x01	; 1
     1aa:	69 f4       	brne	.+26     	; 0x1c6 <Navig+0xd8>
	  {
	    count = 0;
     1ac:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <count+0x1>
     1b0:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <count>
	    myrobot.rspeed = -MEDIUM_SPEED; 
     1b4:	d0 92 9b 02 	sts	0x029B, r13	; 0x80029b <myrobot+0x1>
     1b8:	c0 92 9a 02 	sts	0x029A, r12	; 0x80029a <myrobot>
	   myrobot.lspeed = 70; /* turn right */
     1bc:	f0 92 9d 02 	sts	0x029D, r15	; 0x80029d <myrobot+0x3>
     1c0:	e0 92 9c 02 	sts	0x029C, r14	; 0x80029c <myrobot+0x2>
     1c4:	d0 cf       	rjmp	.-96     	; 0x166 <Navig+0x78>

	  }else if (robo_lineSensor() == 6)
     1c6:	0e 94 9c 02 	call	0x538	; 0x538 <robo_lineSensor>
     1ca:	06 97       	sbiw	r24, 0x06	; 6
     1cc:	69 f4       	brne	.+26     	; 0x1e8 <Navig+0xfa>
	  {
	    count = 0;
     1ce:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <count+0x1>
     1d2:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <count>
	    myrobot.rspeed = MEDIUM_SPEED; 
     1d6:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     1da:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
	   myrobot.lspeed = -LOW_SPEED; /* corner left */
     1de:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <myrobot+0x3>
     1e2:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <myrobot+0x2>
     1e6:	bf cf       	rjmp	.-130    	; 0x166 <Navig+0x78>

	  }else if (robo_lineSensor() == 3)
     1e8:	0e 94 9c 02 	call	0x538	; 0x538 <robo_lineSensor>
     1ec:	03 97       	sbiw	r24, 0x03	; 3
     1ee:	69 f4       	brne	.+26     	; 0x20a <Navig+0x11c>
	  {
	    count = 0;
     1f0:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <count+0x1>
     1f4:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <count>
	    myrobot.rspeed = -LOW_SPEED; 
     1f8:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     1fc:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
	  }else if (robo_lineSensor() == 0)
	  {
	  	count+=1;
		if(count>=30){
			myrobot.rspeed= 70;
			myrobot.lspeed = MEDIUM_SPEED;
     200:	10 93 9d 02 	sts	0x029D, r17	; 0x80029d <myrobot+0x3>
     204:	00 93 9c 02 	sts	0x029C, r16	; 0x80029c <myrobot+0x2>
     208:	ae cf       	rjmp	.-164    	; 0x166 <Navig+0x78>
	  }else if (robo_lineSensor() == 3)
	  {
	    count = 0;
	    myrobot.rspeed = -LOW_SPEED; 
	   myrobot.lspeed = MEDIUM_SPEED; /* corner right */
	  }else if (robo_lineSensor() == 0)
     20a:	0e 94 9c 02 	call	0x538	; 0x538 <robo_lineSensor>
     20e:	89 2b       	or	r24, r25
     210:	a9 f4       	brne	.+42     	; 0x23c <Navig+0x14e>
	  {
	  	count+=1;
     212:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <count>
     216:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <count+0x1>
     21a:	01 96       	adiw	r24, 0x01	; 1
     21c:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <count+0x1>
     220:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <count>
		if(count>=30){
     224:	4e 97       	sbiw	r24, 0x1e	; 30
     226:	2c f0       	brlt	.+10     	; 0x232 <Navig+0x144>
			myrobot.rspeed= 70;
     228:	f0 92 9b 02 	sts	0x029B, r15	; 0x80029b <myrobot+0x1>
     22c:	e0 92 9a 02 	sts	0x029A, r14	; 0x80029a <myrobot>
     230:	e7 cf       	rjmp	.-50     	; 0x200 <Navig+0x112>
			myrobot.lspeed = MEDIUM_SPEED;
			// count = 0;
		} else {
			myrobot.rspeed = -50; 
     232:	d0 92 9b 02 	sts	0x029B, r13	; 0x80029b <myrobot+0x1>
     236:	c0 92 9a 02 	sts	0x029A, r12	; 0x80029a <myrobot>
     23a:	af cf       	rjmp	.-162    	; 0x19a <Navig+0xac>


		//OSTimeDlyHMSM(0, 0, 0, 20);

	  }else{
	  	myrobot.rspeed = 50; 
     23c:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     240:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
	   	myrobot.lspeed = 75; /* bias left */
     244:	70 92 9d 02 	sts	0x029D, r7	; 0x80029d <myrobot+0x3>
     248:	60 92 9c 02 	sts	0x029C, r6	; 0x80029c <myrobot+0x2>
     24c:	8c cf       	rjmp	.-232    	; 0x166 <Navig+0x78>

0000024e <TaskStart>:


/*------Highest pririority task----------*/
/* Create all other tasks here */
void TaskStart( void *data )
{
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	00 d0       	rcall	.+0      	; 0x254 <TaskStart+0x6>
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
 OS_ticks_init(); /* enable RTOS timer tick */
     258:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <OS_ticks_init>
	int  counter;
 OSTaskCreate(CheckCollision , /* Task function */
     25c:	22 e0       	ldi	r18, 0x02	; 2
     25e:	49 e9       	ldi	r20, 0x99	; 153
     260:	52 e0       	ldi	r21, 0x02	; 2
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	83 e5       	ldi	r24, 0x53	; 83
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 f4 06 	call	0xde8	; 0xde8 <OSTaskCreate>
 (void *)0, /* nothing passed to task */
 (void *)&ChkCollideStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_CHKCOLLIDE_PRIO); /* priority of task */

 OSTaskCreate(CntrlMotors , /* Task function */
     26e:	23 e0       	ldi	r18, 0x03	; 3
     270:	4e e1       	ldi	r20, 0x1E	; 30
     272:	53 e0       	ldi	r21, 0x03	; 3
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	60 e0       	ldi	r22, 0x00	; 0
     278:	85 e6       	ldi	r24, 0x65	; 101
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 f4 06 	call	0xde8	; 0xde8 <OSTaskCreate>
 (void *)0, /* nothing passed to task */
 (void *)&CtrlmotorStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_CTRLMOTOR_PRIO); /* priority of task */

 OSTaskCreate(Navig, /* Task function */
     280:	24 e0       	ldi	r18, 0x04	; 4
     282:	40 e2       	ldi	r20, 0x20	; 32
     284:	54 e0       	ldi	r21, 0x04	; 4
     286:	be 01       	movw	r22, r28
     288:	6f 5f       	subi	r22, 0xFF	; 255
     28a:	7f 4f       	sbci	r23, 0xFF	; 255
     28c:	87 e7       	ldi	r24, 0x77	; 119
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 f4 06 	call	0xde8	; 0xde8 <OSTaskCreate>
 TASK_NAVIG_PRIO); /* priority of task */

 while(1)
 {
  OSTimeDlyHMSM(0, 0, 5, 0); /* Task period ~ 5 secs, argument position: HOURS, MINUTES, SECONDS, and MILLISECONDS S*/ 
  robo_LED_toggle(); /* Show that we are alive */
     294:	11 e0       	ldi	r17, 0x01	; 1
 (void *)&NavigStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_NAVIG_PRIO); /* priority of task */

 while(1)
 {
  OSTimeDlyHMSM(0, 0, 5, 0); /* Task period ~ 5 secs, argument position: HOURS, MINUTES, SECONDS, and MILLISECONDS S*/ 
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	45 e0       	ldi	r20, 0x05	; 5
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	0e 94 45 08 	call	0x108a	; 0x108a <OSTimeDlyHMSM>
  robo_LED_toggle(); /* Show that we are alive */
     2a4:	85 b1       	in	r24, 0x05	; 5
     2a6:	81 27       	eor	r24, r17
     2a8:	85 b9       	out	0x05, r24	; 5
     2aa:	f5 cf       	rjmp	.-22     	; 0x296 <TaskStart+0x48>

000002ac <ADC_init>:
     2ac:	80 e4       	ldi	r24, 0x40	; 64
     2ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     2b2:	86 e8       	ldi	r24, 0x86	; 134
     2b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     2b8:	08 95       	ret

000002ba <ADC_read>:
     2ba:	f8 94       	cli
     2bc:	80 64       	ori	r24, 0x40	; 64
     2be:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     2c2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     2c6:	80 64       	ori	r24, 0x40	; 64
     2c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     2cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     2d0:	84 ff       	sbrs	r24, 4
     2d2:	fc cf       	rjmp	.-8      	; 0x2cc <ADC_read+0x12>
     2d4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     2d8:	80 61       	ori	r24, 0x10	; 16
     2da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     2de:	78 94       	sei
     2e0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     2e4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     2e8:	93 70       	andi	r25, 0x03	; 3
     2ea:	08 95       	ret

000002ec <PWM8_write>:
     2ec:	81 11       	cpse	r24, r1
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <PWM8_write+0xe>
     2f0:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     2f4:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     2f8:	08 95       	ret
     2fa:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     2fe:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     302:	08 95       	ret

00000304 <motor_init>:
     304:	8a b1       	in	r24, 0x0a	; 10
     306:	80 6f       	ori	r24, 0xF0	; 240
     308:	8a b9       	out	0x0a, r24	; 10
     30a:	8b b1       	in	r24, 0x0b	; 11
     30c:	8f 70       	andi	r24, 0x0F	; 15
     30e:	8b b9       	out	0x0b, r24	; 11
     310:	81 ea       	ldi	r24, 0xA1	; 161
     312:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     316:	83 e0       	ldi	r24, 0x03	; 3
     318:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     31c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     320:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     324:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     328:	a8 e8       	ldi	r26, 0x88	; 136
     32a:	b0 e0       	ldi	r27, 0x00	; 0
     32c:	1c 92       	st	X, r1
     32e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     332:	ea e8       	ldi	r30, 0x8A	; 138
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	10 82       	st	Z, r1
     338:	84 b1       	in	r24, 0x04	; 4
     33a:	86 60       	ori	r24, 0x06	; 6
     33c:	84 b9       	out	0x04, r24	; 4
     33e:	11 96       	adiw	r26, 0x01	; 1
     340:	1c 92       	st	X, r1
     342:	1e 92       	st	-X, r1
     344:	11 82       	std	Z+1, r1	; 0x01
     346:	10 82       	st	Z, r1
     348:	08 95       	ret

0000034a <motor_set_speed>:
     34a:	77 ff       	sbrs	r23, 7
     34c:	02 c0       	rjmp	.+4      	; 0x352 <motor_set_speed+0x8>
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	65 36       	cpi	r22, 0x65	; 101
     354:	71 05       	cpc	r23, r1
     356:	14 f0       	brlt	.+4      	; 0x35c <motor_set_speed+0x12>
     358:	64 e6       	ldi	r22, 0x64	; 100
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	9b 01       	movw	r18, r22
     35e:	22 0f       	add	r18, r18
     360:	33 1f       	adc	r19, r19
     362:	75 95       	asr	r23
     364:	67 95       	ror	r22
     366:	62 0f       	add	r22, r18
     368:	73 1f       	adc	r23, r19
     36a:	81 11       	cpse	r24, r1
     36c:	09 c0       	rjmp	.+18     	; 0x380 <motor_set_speed+0x36>
     36e:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     372:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     376:	70 93 22 04 	sts	0x0422, r23	; 0x800422 <rightWst+0x1>
     37a:	60 93 21 04 	sts	0x0421, r22	; 0x800421 <rightWst>
     37e:	08 95       	ret
     380:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     384:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     388:	70 93 26 04 	sts	0x0426, r23	; 0x800426 <leftWst+0x1>
     38c:	60 93 25 04 	sts	0x0425, r22	; 0x800425 <leftWst>
     390:	08 95       	ret

00000392 <motor_set_dir>:
     392:	cf 93       	push	r28
     394:	c6 2f       	mov	r28, r22
     396:	26 2f       	mov	r18, r22
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	81 11       	cpse	r24, r1
     39c:	2b c0       	rjmp	.+86     	; 0x3f4 <motor_set_dir+0x62>
     39e:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <rightWst+0x2>
     3a2:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <rightWst+0x3>
     3a6:	82 17       	cp	r24, r18
     3a8:	93 07       	cpc	r25, r19
     3aa:	59 f0       	breq	.+22     	; 0x3c2 <motor_set_dir+0x30>
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	0e 94 a5 01 	call	0x34a	; 0x34a <motor_set_speed>
     3b6:	8f e9       	ldi	r24, 0x9F	; 159
     3b8:	9f e0       	ldi	r25, 0x0F	; 15
     3ba:	01 97       	sbiw	r24, 0x01	; 1
     3bc:	f1 f7       	brne	.-4      	; 0x3ba <motor_set_dir+0x28>
     3be:	00 c0       	rjmp	.+0      	; 0x3c0 <motor_set_dir+0x2e>
     3c0:	00 00       	nop
     3c2:	c1 11       	cpse	r28, r1
     3c4:	0e c0       	rjmp	.+28     	; 0x3e2 <motor_set_dir+0x50>
     3c6:	5e 98       	cbi	0x0b, 6	; 11
     3c8:	5f 9a       	sbi	0x0b, 7	; 11
     3ca:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <rightWst+0x3>
     3ce:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <rightWst+0x2>
     3d2:	8f e3       	ldi	r24, 0x3F	; 63
     3d4:	9c e9       	ldi	r25, 0x9C	; 156
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <motor_set_dir+0x44>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <motor_set_dir+0x4a>
     3dc:	00 00       	nop
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret
     3e2:	5e 9a       	sbi	0x0b, 6	; 11
     3e4:	5f 98       	cbi	0x0b, 7	; 11
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <rightWst+0x3>
     3ee:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <rightWst+0x2>
     3f2:	ef cf       	rjmp	.-34     	; 0x3d2 <motor_set_dir+0x40>
     3f4:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <leftWst+0x2>
     3f8:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <leftWst+0x3>
     3fc:	82 17       	cp	r24, r18
     3fe:	93 07       	cpc	r25, r19
     400:	59 f0       	breq	.+22     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	0e 94 a5 01 	call	0x34a	; 0x34a <motor_set_speed>
     40c:	8f e9       	ldi	r24, 0x9F	; 159
     40e:	9f e0       	ldi	r25, 0x0F	; 15
     410:	01 97       	sbiw	r24, 0x01	; 1
     412:	f1 f7       	brne	.-4      	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
     414:	00 c0       	rjmp	.+0      	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
     416:	00 00       	nop
     418:	c1 11       	cpse	r28, r1
     41a:	07 c0       	rjmp	.+14     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
     41c:	5c 9a       	sbi	0x0b, 4	; 11
     41e:	5d 98       	cbi	0x0b, 5	; 11
     420:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <leftWst+0x3>
     424:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <leftWst+0x2>
     428:	d4 cf       	rjmp	.-88     	; 0x3d2 <motor_set_dir+0x40>
     42a:	5c 98       	cbi	0x0b, 4	; 11
     42c:	5d 9a       	sbi	0x0b, 5	; 11
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <leftWst+0x3>
     436:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <leftWst+0x2>
     43a:	cb cf       	rjmp	.-106    	; 0x3d2 <motor_set_dir+0x40>

0000043c <robo_motorSpeed>:
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	ec 01       	movw	r28, r24
     446:	8b 01       	movw	r16, r22
     448:	97 ff       	sbrs	r25, 7
     44a:	1c c0       	rjmp	.+56     	; 0x484 <robo_motorSpeed+0x48>
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	0e 94 c9 01 	call	0x392	; 0x392 <motor_set_dir>
     454:	d1 95       	neg	r29
     456:	c1 95       	neg	r28
     458:	d1 09       	sbc	r29, r1
     45a:	17 ff       	sbrs	r17, 7
     45c:	18 c0       	rjmp	.+48     	; 0x48e <robo_motorSpeed+0x52>
     45e:	61 e0       	ldi	r22, 0x01	; 1
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0e 94 c9 01 	call	0x392	; 0x392 <motor_set_dir>
     466:	11 95       	neg	r17
     468:	01 95       	neg	r16
     46a:	11 09       	sbc	r17, r1
     46c:	b8 01       	movw	r22, r16
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	0e 94 a5 01 	call	0x34a	; 0x34a <motor_set_speed>
     474:	be 01       	movw	r22, r28
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	0c 94 a5 01 	jmp	0x34a	; 0x34a <motor_set_speed>
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	0e 94 c9 01 	call	0x392	; 0x392 <motor_set_dir>
     48c:	e6 cf       	rjmp	.-52     	; 0x45a <robo_motorSpeed+0x1e>
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	0e 94 c9 01 	call	0x392	; 0x392 <motor_set_dir>
     496:	ea cf       	rjmp	.-44     	; 0x46c <robo_motorSpeed+0x30>

00000498 <USART0_init>:
     498:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     49c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     4a0:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     4a4:	88 e1       	ldi	r24, 0x18	; 24
     4a6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     4aa:	86 e0       	ldi	r24, 0x06	; 6
     4ac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     4b0:	08 95       	ret

000004b2 <cputchar>:
     4b2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     4b6:	95 ff       	sbrs	r25, 5
     4b8:	fc cf       	rjmp	.-8      	; 0x4b2 <cputchar>
     4ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     4be:	08 95       	ret

000004c0 <cgetchar>:
     4c0:	cf 93       	push	r28
     4c2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     4c6:	87 ff       	sbrs	r24, 7
     4c8:	fc cf       	rjmp	.-8      	; 0x4c2 <cgetchar+0x2>
     4ca:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     4ce:	8c 2f       	mov	r24, r28
     4d0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <cputchar>
     4d4:	8c 2f       	mov	r24, r28
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <cputs>:
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	ec 01       	movw	r28, r24
     4e0:	89 91       	ld	r24, Y+
     4e2:	81 11       	cpse	r24, r1
     4e4:	03 c0       	rjmp	.+6      	; 0x4ec <cputs+0x12>
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret
     4ec:	0e 94 59 02 	call	0x4b2	; 0x4b2 <cputchar>
     4f0:	f7 cf       	rjmp	.-18     	; 0x4e0 <cputs+0x6>

000004f2 <robo_proxSensor>:
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <ADC_read>
     4f8:	21 e0       	ldi	r18, 0x01	; 1
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	84 36       	cpi	r24, 0x64	; 100
     4fe:	91 05       	cpc	r25, r1
     500:	10 f0       	brcs	.+4      	; 0x506 <robo_proxSensor+0x14>
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	c9 01       	movw	r24, r18
     508:	08 95       	ret

0000050a <robo_lightSensor>:
     50a:	84 e0       	ldi	r24, 0x04	; 4
     50c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <ADC_read>
     510:	2b ef       	ldi	r18, 0xFB	; 251
     512:	ac 01       	movw	r20, r24
     514:	24 03       	mulsu	r18, r20
     516:	c0 01       	movw	r24, r0
     518:	25 9f       	mul	r18, r21
     51a:	90 0d       	add	r25, r0
     51c:	11 24       	eor	r1, r1
     51e:	85 50       	subi	r24, 0x05	; 5
     520:	9c 4e       	sbci	r25, 0xEC	; 236
     522:	63 e3       	ldi	r22, 0x33	; 51
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__divmodhi4>
     52a:	cb 01       	movw	r24, r22
     52c:	65 36       	cpi	r22, 0x65	; 101
     52e:	71 05       	cpc	r23, r1
     530:	14 f0       	brlt	.+4      	; 0x536 <robo_lightSensor+0x2c>
     532:	84 e6       	ldi	r24, 0x64	; 100
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	08 95       	ret

00000538 <robo_lineSensor>:
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	c0 e0       	ldi	r28, 0x00	; 0
     53e:	d1 e0       	ldi	r29, 0x01	; 1
     540:	cc 0f       	add	r28, r28
     542:	8d 2f       	mov	r24, r29
     544:	0e 94 5d 01 	call	0x2ba	; 0x2ba <ADC_read>
     548:	8c 32       	cpi	r24, 0x2C	; 44
     54a:	91 40       	sbci	r25, 0x01	; 1
     54c:	0c f4       	brge	.+2      	; 0x550 <robo_lineSensor+0x18>
     54e:	c1 60       	ori	r28, 0x01	; 1
     550:	df 5f       	subi	r29, 0xFF	; 255
     552:	d4 30       	cpi	r29, 0x04	; 4
     554:	a9 f7       	brne	.-22     	; 0x540 <robo_lineSensor+0x8>
     556:	8c 2f       	mov	r24, r28
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <robo_bumpSensorR>:
     560:	83 b1       	in	r24, 0x03	; 3
     562:	82 95       	swap	r24
     564:	8f 70       	andi	r24, 0x0F	; 15
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	89 27       	eor	r24, r25
     56a:	81 70       	andi	r24, 0x01	; 1
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	08 95       	ret

00000570 <robo_bumpSensorL>:
     570:	83 b1       	in	r24, 0x03	; 3
     572:	86 95       	lsr	r24
     574:	86 95       	lsr	r24
     576:	86 95       	lsr	r24
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	89 27       	eor	r24, r25
     57c:	81 70       	andi	r24, 0x01	; 1
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	08 95       	ret

00000582 <robo_Honk>:
     582:	5b 9a       	sbi	0x0b, 3	; 11
     584:	2f ef       	ldi	r18, 0xFF	; 255
     586:	85 ea       	ldi	r24, 0xA5	; 165
     588:	9e e0       	ldi	r25, 0x0E	; 14
     58a:	21 50       	subi	r18, 0x01	; 1
     58c:	80 40       	sbci	r24, 0x00	; 0
     58e:	90 40       	sbci	r25, 0x00	; 0
     590:	e1 f7       	brne	.-8      	; 0x58a <robo_Honk+0x8>
     592:	00 c0       	rjmp	.+0      	; 0x594 <robo_Honk+0x12>
     594:	00 00       	nop
     596:	5b 98       	cbi	0x0b, 3	; 11
     598:	2f ef       	ldi	r18, 0xFF	; 255
     59a:	85 ea       	ldi	r24, 0xA5	; 165
     59c:	9e e0       	ldi	r25, 0x0E	; 14
     59e:	21 50       	subi	r18, 0x01	; 1
     5a0:	80 40       	sbci	r24, 0x00	; 0
     5a2:	90 40       	sbci	r25, 0x00	; 0
     5a4:	e1 f7       	brne	.-8      	; 0x59e <robo_Honk+0x1c>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <robo_Honk+0x26>
     5a8:	00 00       	nop
     5aa:	08 95       	ret

000005ac <robo_checkBattery>:
     5ac:	85 e0       	ldi	r24, 0x05	; 5
     5ae:	0e 94 5d 01 	call	0x2ba	; 0x2ba <ADC_read>
     5b2:	84 3f       	cpi	r24, 0xF4	; 244
     5b4:	91 40       	sbci	r25, 0x01	; 1
     5b6:	10 f4       	brcc	.+4      	; 0x5bc <robo_checkBattery+0x10>
     5b8:	28 9a       	sbi	0x05, 0	; 5
     5ba:	08 95       	ret
     5bc:	28 98       	cbi	0x05, 0	; 5
     5be:	08 95       	ret

000005c0 <robo_goPressed>:
     5c0:	89 b1       	in	r24, 0x09	; 9
     5c2:	82 fb       	bst	r24, 2
     5c4:	88 27       	eor	r24, r24
     5c6:	80 f9       	bld	r24, 0
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	89 27       	eor	r24, r25
     5cc:	08 95       	ret

000005ce <robo_wait4goPress>:
     5ce:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <robo_goPressed>
     5d2:	88 23       	and	r24, r24
     5d4:	e1 f3       	breq	.-8      	; 0x5ce <robo_wait4goPress>
     5d6:	08 95       	ret

000005d8 <OS_ticks_init>:
     5d8:	f8 94       	cli
     5da:	85 e0       	ldi	r24, 0x05	; 5
     5dc:	85 bd       	out	0x25, r24	; 37
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     5e4:	84 e6       	ldi	r24, 0x64	; 100
     5e6:	86 bd       	out	0x26, r24	; 38
     5e8:	78 94       	sei
     5ea:	08 95       	ret

000005ec <HAL_init>:
     5ec:	87 e6       	ldi	r24, 0x67	; 103
     5ee:	0e 94 4c 02 	call	0x498	; 0x498 <USART0_init>
     5f2:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <ADC_init>

000005f6 <robo_Setup>:
     5f6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <HAL_init>
     5fa:	0e 94 82 01 	call	0x304	; 0x304 <motor_init>
     5fe:	53 9a       	sbi	0x0a, 3	; 10
     600:	5b 98       	cbi	0x0b, 3	; 11
     602:	20 9a       	sbi	0x04, 0	; 4
     604:	52 98       	cbi	0x0a, 2	; 10
     606:	5a 9a       	sbi	0x0b, 2	; 11
     608:	24 98       	cbi	0x04, 4	; 4
     60a:	23 98       	cbi	0x04, 3	; 4
     60c:	85 b1       	in	r24, 0x05	; 5
     60e:	88 61       	ori	r24, 0x18	; 24
     610:	85 b9       	out	0x05, r24	; 5
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	0e 94 c9 01 	call	0x392	; 0x392 <motor_set_dir>
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	0e 94 c9 01 	call	0x392	; 0x392 <motor_set_dir>
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	0c 94 1e 02 	jmp	0x43c	; 0x43c <robo_motorSpeed>

0000062e <cprintf>:
     62e:	4f 92       	push	r4
     630:	5f 92       	push	r5
     632:	6f 92       	push	r6
     634:	7f 92       	push	r7
     636:	8f 92       	push	r8
     638:	9f 92       	push	r9
     63a:	af 92       	push	r10
     63c:	bf 92       	push	r11
     63e:	cf 92       	push	r12
     640:	df 92       	push	r13
     642:	ef 92       	push	r14
     644:	ff 92       	push	r15
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
     652:	de 01       	movw	r26, r28
     654:	53 96       	adiw	r26, 0x13	; 19
     656:	ed 91       	ld	r30, X+
     658:	fd 91       	ld	r31, X+
     65a:	8d 01       	movw	r16, r26
     65c:	5a e0       	ldi	r21, 0x0A	; 10
     65e:	65 2e       	mov	r6, r21
     660:	71 2c       	mov	r7, r1
     662:	80 81       	ld	r24, Z
     664:	85 32       	cpi	r24, 0x25	; 37
     666:	81 f4       	brne	.+32     	; 0x688 <cprintf+0x5a>
     668:	5f 01       	movw	r10, r30
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	a8 0e       	add	r10, r24
     66e:	b1 1c       	adc	r11, r1
     670:	81 81       	ldd	r24, Z+1	; 0x01
     672:	84 36       	cpi	r24, 0x64	; 100
     674:	09 f4       	brne	.+2      	; 0x678 <cprintf+0x4a>
     676:	50 c0       	rjmp	.+160    	; 0x718 <cprintf+0xea>
     678:	90 f4       	brcc	.+36     	; 0x69e <cprintf+0x70>
     67a:	83 36       	cpi	r24, 0x63	; 99
     67c:	61 f4       	brne	.+24     	; 0x696 <cprintf+0x68>
     67e:	f8 01       	movw	r30, r16
     680:	80 81       	ld	r24, Z
     682:	0e 5f       	subi	r16, 0xFE	; 254
     684:	1f 4f       	sbci	r17, 0xFF	; 255
     686:	07 c0       	rjmp	.+14     	; 0x696 <cprintf+0x68>
     688:	88 23       	and	r24, r24
     68a:	09 f4       	brne	.+2      	; 0x68e <cprintf+0x60>
     68c:	5d c0       	rjmp	.+186    	; 0x748 <cprintf+0x11a>
     68e:	5f 01       	movw	r10, r30
     690:	9f ef       	ldi	r25, 0xFF	; 255
     692:	a9 1a       	sub	r10, r25
     694:	b9 0a       	sbc	r11, r25
     696:	0e 94 59 02 	call	0x4b2	; 0x4b2 <cputchar>
     69a:	f5 01       	movw	r30, r10
     69c:	e2 cf       	rjmp	.-60     	; 0x662 <cprintf+0x34>
     69e:	83 37       	cpi	r24, 0x73	; 115
     6a0:	71 f1       	breq	.+92     	; 0x6fe <cprintf+0xd0>
     6a2:	30 e1       	ldi	r19, 0x10	; 16
     6a4:	83 2e       	mov	r8, r19
     6a6:	91 2c       	mov	r9, r1
     6a8:	e1 2c       	mov	r14, r1
     6aa:	40 e1       	ldi	r20, 0x10	; 16
     6ac:	f4 2e       	mov	r15, r20
     6ae:	88 37       	cpi	r24, 0x78	; 120
     6b0:	91 f7       	brne	.-28     	; 0x696 <cprintf+0x68>
     6b2:	f8 01       	movw	r30, r16
     6b4:	c0 80       	ld	r12, Z
     6b6:	d1 80       	ldd	r13, Z+1	; 0x01
     6b8:	0e 5f       	subi	r16, 0xFE	; 254
     6ba:	1f 4f       	sbci	r17, 0xFF	; 255
     6bc:	84 36       	cpi	r24, 0x64	; 100
     6be:	59 f4       	brne	.+22     	; 0x6d6 <cprintf+0xa8>
     6c0:	d7 fe       	sbrs	r13, 7
     6c2:	06 c0       	rjmp	.+12     	; 0x6d0 <cprintf+0xa2>
     6c4:	d1 94       	neg	r13
     6c6:	c1 94       	neg	r12
     6c8:	d1 08       	sbc	r13, r1
     6ca:	8d e2       	ldi	r24, 0x2D	; 45
     6cc:	0e 94 59 02 	call	0x4b2	; 0x4b2 <cputchar>
     6d0:	ce 14       	cp	r12, r14
     6d2:	df 04       	cpc	r13, r15
     6d4:	48 f1       	brcs	.+82     	; 0x728 <cprintf+0xfa>
     6d6:	c6 01       	movw	r24, r12
     6d8:	b7 01       	movw	r22, r14
     6da:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__udivmodhi4>
     6de:	2c 01       	movw	r4, r24
     6e0:	68 5f       	subi	r22, 0xF8	; 248
     6e2:	7d 4f       	sbci	r23, 0xFD	; 253
     6e4:	fb 01       	movw	r30, r22
     6e6:	80 81       	ld	r24, Z
     6e8:	0e 94 59 02 	call	0x4b2	; 0x4b2 <cputchar>
     6ec:	62 01       	movw	r12, r4
     6ee:	c7 01       	movw	r24, r14
     6f0:	b4 01       	movw	r22, r8
     6f2:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__udivmodhi4>
     6f6:	7b 01       	movw	r14, r22
     6f8:	67 2b       	or	r22, r23
     6fa:	69 f7       	brne	.-38     	; 0x6d6 <cprintf+0xa8>
     6fc:	ce cf       	rjmp	.-100    	; 0x69a <cprintf+0x6c>
     6fe:	f8 01       	movw	r30, r16
     700:	e0 80       	ld	r14, Z
     702:	f1 80       	ldd	r15, Z+1	; 0x01
     704:	0e 5f       	subi	r16, 0xFE	; 254
     706:	1f 4f       	sbci	r17, 0xFF	; 255
     708:	f7 01       	movw	r30, r14
     70a:	81 91       	ld	r24, Z+
     70c:	7f 01       	movw	r14, r30
     70e:	88 23       	and	r24, r24
     710:	21 f2       	breq	.-120    	; 0x69a <cprintf+0x6c>
     712:	0e 94 59 02 	call	0x4b2	; 0x4b2 <cputchar>
     716:	f8 cf       	rjmp	.-16     	; 0x708 <cprintf+0xda>
     718:	9a e0       	ldi	r25, 0x0A	; 10
     71a:	89 2e       	mov	r8, r25
     71c:	91 2c       	mov	r9, r1
     71e:	20 e1       	ldi	r18, 0x10	; 16
     720:	e2 2e       	mov	r14, r18
     722:	27 e2       	ldi	r18, 0x27	; 39
     724:	f2 2e       	mov	r15, r18
     726:	c5 cf       	rjmp	.-118    	; 0x6b2 <cprintf+0x84>
     728:	c7 01       	movw	r24, r14
     72a:	b3 01       	movw	r22, r6
     72c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__udivmodhi4>
     730:	7b 01       	movw	r14, r22
     732:	62 30       	cpi	r22, 0x02	; 2
     734:	71 05       	cpc	r23, r1
     736:	60 f6       	brcc	.-104    	; 0x6d0 <cprintf+0xa2>
     738:	c6 01       	movw	r24, r12
     73a:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__udivmodhi4>
     73e:	fb 01       	movw	r30, r22
     740:	e8 5f       	subi	r30, 0xF8	; 248
     742:	fd 4f       	sbci	r31, 0xFD	; 253
     744:	80 81       	ld	r24, Z
     746:	a7 cf       	rjmp	.-178    	; 0x696 <cprintf+0x68>
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	ff 90       	pop	r15
     756:	ef 90       	pop	r14
     758:	df 90       	pop	r13
     75a:	cf 90       	pop	r12
     75c:	bf 90       	pop	r11
     75e:	af 90       	pop	r10
     760:	9f 90       	pop	r9
     762:	8f 90       	pop	r8
     764:	7f 90       	pop	r7
     766:	6f 90       	pop	r6
     768:	5f 90       	pop	r5
     76a:	4f 90       	pop	r4
     76c:	08 95       	ret

0000076e <OSStartHighRdy>:
     76e:	00 91 2a 04 	lds	r16, 0x042A	; 0x80042a <OSRunning>
     772:	03 95       	inc	r16
     774:	00 93 2a 04 	sts	0x042A, r16	; 0x80042a <OSRunning>
     778:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <OSTCBHighRdy>
     77c:	f0 91 3b 04 	lds	r31, 0x043B	; 0x80043b <OSTCBHighRdy+0x1>
     780:	c1 91       	ld	r28, Z+
     782:	cd bf       	out	0x3d, r28	; 61
     784:	d1 91       	ld	r29, Z+
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f 91       	pop	r16
     78a:	0f bf       	out	0x3f, r16	; 63
     78c:	ff 91       	pop	r31
     78e:	ef 91       	pop	r30
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	bf 91       	pop	r27
     796:	af 91       	pop	r26
     798:	9f 91       	pop	r25
     79a:	8f 91       	pop	r24
     79c:	7f 91       	pop	r23
     79e:	6f 91       	pop	r22
     7a0:	5f 91       	pop	r21
     7a2:	4f 91       	pop	r20
     7a4:	3f 91       	pop	r19
     7a6:	2f 91       	pop	r18
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	df 90       	pop	r13
     7b2:	cf 90       	pop	r12
     7b4:	bf 90       	pop	r11
     7b6:	af 90       	pop	r10
     7b8:	9f 90       	pop	r9
     7ba:	8f 90       	pop	r8
     7bc:	7f 90       	pop	r7
     7be:	6f 90       	pop	r6
     7c0:	5f 90       	pop	r5
     7c2:	4f 90       	pop	r4
     7c4:	3f 90       	pop	r3
     7c6:	2f 90       	pop	r2
     7c8:	1f 90       	pop	r1
     7ca:	0f 90       	pop	r0
     7cc:	08 95       	ret

000007ce <OSCtxSw>:
     7ce:	0f 92       	push	r0
     7d0:	1f 92       	push	r1
     7d2:	2f 92       	push	r2
     7d4:	3f 92       	push	r3
     7d6:	4f 92       	push	r4
     7d8:	5f 92       	push	r5
     7da:	6f 92       	push	r6
     7dc:	7f 92       	push	r7
     7de:	8f 92       	push	r8
     7e0:	9f 92       	push	r9
     7e2:	af 92       	push	r10
     7e4:	bf 92       	push	r11
     7e6:	cf 92       	push	r12
     7e8:	df 92       	push	r13
     7ea:	ef 92       	push	r14
     7ec:	ff 92       	push	r15
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	2f 93       	push	r18
     7f4:	3f 93       	push	r19
     7f6:	4f 93       	push	r20
     7f8:	5f 93       	push	r21
     7fa:	6f 93       	push	r22
     7fc:	7f 93       	push	r23
     7fe:	8f 93       	push	r24
     800:	9f 93       	push	r25
     802:	af 93       	push	r26
     804:	bf 93       	push	r27
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	ef 93       	push	r30
     80c:	ff 93       	push	r31
     80e:	0f b7       	in	r16, 0x3f	; 63
     810:	0f 93       	push	r16
     812:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <OSTCBCur>
     816:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <OSTCBCur+0x1>
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	c1 93       	st	Z+, r28
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	d1 93       	st	Z+, r29
     822:	00 91 2f 04 	lds	r16, 0x042F	; 0x80042f <OSPrioHighRdy>
     826:	00 93 30 04 	sts	0x0430, r16	; 0x800430 <OSPrioCur>
     82a:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <OSTCBHighRdy>
     82e:	f0 91 3b 04 	lds	r31, 0x043B	; 0x80043b <OSTCBHighRdy+0x1>
     832:	e0 93 42 04 	sts	0x0442, r30	; 0x800442 <OSTCBCur>
     836:	f0 93 43 04 	sts	0x0443, r31	; 0x800443 <OSTCBCur+0x1>
     83a:	c1 91       	ld	r28, Z+
     83c:	cd bf       	out	0x3d, r28	; 61
     83e:	d1 91       	ld	r29, Z+
     840:	de bf       	out	0x3e, r29	; 62
     842:	0f 91       	pop	r16
     844:	0f bf       	out	0x3f, r16	; 63
     846:	ff 91       	pop	r31
     848:	ef 91       	pop	r30
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	bf 91       	pop	r27
     850:	af 91       	pop	r26
     852:	9f 91       	pop	r25
     854:	8f 91       	pop	r24
     856:	7f 91       	pop	r23
     858:	6f 91       	pop	r22
     85a:	5f 91       	pop	r21
     85c:	4f 91       	pop	r20
     85e:	3f 91       	pop	r19
     860:	2f 91       	pop	r18
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	ff 90       	pop	r15
     868:	ef 90       	pop	r14
     86a:	df 90       	pop	r13
     86c:	cf 90       	pop	r12
     86e:	bf 90       	pop	r11
     870:	af 90       	pop	r10
     872:	9f 90       	pop	r9
     874:	8f 90       	pop	r8
     876:	7f 90       	pop	r7
     878:	6f 90       	pop	r6
     87a:	5f 90       	pop	r5
     87c:	4f 90       	pop	r4
     87e:	3f 90       	pop	r3
     880:	2f 90       	pop	r2
     882:	1f 90       	pop	r1
     884:	0f 90       	pop	r0
     886:	08 95       	ret

00000888 <OSIntCtxSw>:
     888:	00 91 2f 04 	lds	r16, 0x042F	; 0x80042f <OSPrioHighRdy>
     88c:	00 93 30 04 	sts	0x0430, r16	; 0x800430 <OSPrioCur>
     890:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <OSTCBHighRdy>
     894:	f0 91 3b 04 	lds	r31, 0x043B	; 0x80043b <OSTCBHighRdy+0x1>
     898:	e0 93 42 04 	sts	0x0442, r30	; 0x800442 <OSTCBCur>
     89c:	f0 93 43 04 	sts	0x0443, r31	; 0x800443 <OSTCBCur+0x1>
     8a0:	c1 91       	ld	r28, Z+
     8a2:	cd bf       	out	0x3d, r28	; 61
     8a4:	d1 91       	ld	r29, Z+
     8a6:	de bf       	out	0x3e, r29	; 62
     8a8:	0f 91       	pop	r16
     8aa:	0f bf       	out	0x3f, r16	; 63
     8ac:	ff 91       	pop	r31
     8ae:	ef 91       	pop	r30
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	bf 91       	pop	r27
     8b6:	af 91       	pop	r26
     8b8:	9f 91       	pop	r25
     8ba:	8f 91       	pop	r24
     8bc:	7f 91       	pop	r23
     8be:	6f 91       	pop	r22
     8c0:	5f 91       	pop	r21
     8c2:	4f 91       	pop	r20
     8c4:	3f 91       	pop	r19
     8c6:	2f 91       	pop	r18
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	ff 90       	pop	r15
     8ce:	ef 90       	pop	r14
     8d0:	df 90       	pop	r13
     8d2:	cf 90       	pop	r12
     8d4:	bf 90       	pop	r11
     8d6:	af 90       	pop	r10
     8d8:	9f 90       	pop	r9
     8da:	8f 90       	pop	r8
     8dc:	7f 90       	pop	r7
     8de:	6f 90       	pop	r6
     8e0:	5f 90       	pop	r5
     8e2:	4f 90       	pop	r4
     8e4:	3f 90       	pop	r3
     8e6:	2f 90       	pop	r2
     8e8:	1f 90       	pop	r1
     8ea:	0f 90       	pop	r0
     8ec:	08 95       	ret

000008ee <OSTickISR>:
     8ee:	0f 92       	push	r0
     8f0:	1f 92       	push	r1
     8f2:	2f 92       	push	r2
     8f4:	3f 92       	push	r3
     8f6:	4f 92       	push	r4
     8f8:	5f 92       	push	r5
     8fa:	6f 92       	push	r6
     8fc:	7f 92       	push	r7
     8fe:	8f 92       	push	r8
     900:	9f 92       	push	r9
     902:	af 92       	push	r10
     904:	bf 92       	push	r11
     906:	cf 92       	push	r12
     908:	df 92       	push	r13
     90a:	ef 92       	push	r14
     90c:	ff 92       	push	r15
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	2f 93       	push	r18
     914:	3f 93       	push	r19
     916:	4f 93       	push	r20
     918:	5f 93       	push	r21
     91a:	6f 93       	push	r22
     91c:	7f 93       	push	r23
     91e:	8f 93       	push	r24
     920:	9f 93       	push	r25
     922:	af 93       	push	r26
     924:	bf 93       	push	r27
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	ef 93       	push	r30
     92c:	ff 93       	push	r31
     92e:	0f b7       	in	r16, 0x3f	; 63
     930:	00 68       	ori	r16, 0x80	; 128
     932:	0f 93       	push	r16
     934:	00 91 41 04 	lds	r16, 0x0441	; 0x800441 <OSIntNesting>
     938:	03 95       	inc	r16
     93a:	00 93 41 04 	sts	0x0441, r16	; 0x800441 <OSIntNesting>
     93e:	01 30       	cpi	r16, 0x01	; 1
     940:	41 f4       	brne	.+16     	; 0x952 <_not_first_int>
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
     946:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <OSTCBCur>
     94a:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <OSTCBCur+0x1>
     94e:	c1 93       	st	Z+, r28
     950:	d1 93       	st	Z+, r29

00000952 <_not_first_int>:
     952:	04 e6       	ldi	r16, 0x64	; 100
     954:	06 bd       	out	0x26, r16	; 38
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	1f 2e       	mov	r1, r31
     95a:	78 94       	sei
     95c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <OSTimeTick>
     960:	00 00       	nop
     962:	0e 94 4d 05 	call	0xa9a	; 0xa9a <OSIntExit>
     966:	0f 91       	pop	r16
     968:	0f bf       	out	0x3f, r16	; 63
     96a:	ff 91       	pop	r31
     96c:	ef 91       	pop	r30
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	bf 91       	pop	r27
     974:	af 91       	pop	r26
     976:	9f 91       	pop	r25
     978:	8f 91       	pop	r24
     97a:	7f 91       	pop	r23
     97c:	6f 91       	pop	r22
     97e:	5f 91       	pop	r21
     980:	4f 91       	pop	r20
     982:	3f 91       	pop	r19
     984:	2f 91       	pop	r18
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	ff 90       	pop	r15
     98c:	ef 90       	pop	r14
     98e:	df 90       	pop	r13
     990:	cf 90       	pop	r12
     992:	bf 90       	pop	r11
     994:	af 90       	pop	r10
     996:	9f 90       	pop	r9
     998:	8f 90       	pop	r8
     99a:	7f 90       	pop	r7
     99c:	6f 90       	pop	r6
     99e:	5f 90       	pop	r5
     9a0:	4f 90       	pop	r4
     9a2:	3f 90       	pop	r3
     9a4:	2f 90       	pop	r2
     9a6:	1f 90       	pop	r1
     9a8:	0f 90       	pop	r0
     9aa:	08 95       	ret

000009ac <OSTaskStkInit>:
     9ac:	fa 01       	movw	r30, r20
     9ae:	80 83       	st	Z, r24
     9b0:	31 97       	sbiw	r30, 0x01	; 1
     9b2:	90 83       	st	Z, r25
     9b4:	31 97       	sbiw	r30, 0x01	; 1
     9b6:	10 82       	st	Z, r1
     9b8:	31 97       	sbiw	r30, 0x01	; 1
     9ba:	10 82       	st	Z, r1
     9bc:	31 97       	sbiw	r30, 0x01	; 1
     9be:	10 82       	st	Z, r1
     9c0:	31 97       	sbiw	r30, 0x01	; 1
     9c2:	10 82       	st	Z, r1
     9c4:	31 97       	sbiw	r30, 0x01	; 1
     9c6:	10 82       	st	Z, r1
     9c8:	31 97       	sbiw	r30, 0x01	; 1
     9ca:	10 82       	st	Z, r1
     9cc:	31 97       	sbiw	r30, 0x01	; 1
     9ce:	10 82       	st	Z, r1
     9d0:	31 97       	sbiw	r30, 0x01	; 1
     9d2:	10 82       	st	Z, r1
     9d4:	31 97       	sbiw	r30, 0x01	; 1
     9d6:	10 82       	st	Z, r1
     9d8:	31 97       	sbiw	r30, 0x01	; 1
     9da:	10 82       	st	Z, r1
     9dc:	31 97       	sbiw	r30, 0x01	; 1
     9de:	10 82       	st	Z, r1
     9e0:	31 97       	sbiw	r30, 0x01	; 1
     9e2:	10 82       	st	Z, r1
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	10 82       	st	Z, r1
     9e8:	31 97       	sbiw	r30, 0x01	; 1
     9ea:	10 82       	st	Z, r1
     9ec:	31 97       	sbiw	r30, 0x01	; 1
     9ee:	10 82       	st	Z, r1
     9f0:	31 97       	sbiw	r30, 0x01	; 1
     9f2:	10 82       	st	Z, r1
     9f4:	31 97       	sbiw	r30, 0x01	; 1
     9f6:	10 82       	st	Z, r1
     9f8:	31 97       	sbiw	r30, 0x01	; 1
     9fa:	10 82       	st	Z, r1
     9fc:	31 97       	sbiw	r30, 0x01	; 1
     9fe:	10 82       	st	Z, r1
     a00:	31 97       	sbiw	r30, 0x01	; 1
     a02:	10 82       	st	Z, r1
     a04:	31 97       	sbiw	r30, 0x01	; 1
     a06:	10 82       	st	Z, r1
     a08:	31 97       	sbiw	r30, 0x01	; 1
     a0a:	10 82       	st	Z, r1
     a0c:	31 97       	sbiw	r30, 0x01	; 1
     a0e:	10 82       	st	Z, r1
     a10:	31 97       	sbiw	r30, 0x01	; 1
     a12:	10 82       	st	Z, r1
     a14:	31 97       	sbiw	r30, 0x01	; 1
     a16:	60 83       	st	Z, r22
     a18:	31 97       	sbiw	r30, 0x01	; 1
     a1a:	70 83       	st	Z, r23
     a1c:	31 97       	sbiw	r30, 0x01	; 1
     a1e:	10 82       	st	Z, r1
     a20:	31 97       	sbiw	r30, 0x01	; 1
     a22:	10 82       	st	Z, r1
     a24:	31 97       	sbiw	r30, 0x01	; 1
     a26:	10 82       	st	Z, r1
     a28:	31 97       	sbiw	r30, 0x01	; 1
     a2a:	10 82       	st	Z, r1
     a2c:	31 97       	sbiw	r30, 0x01	; 1
     a2e:	10 82       	st	Z, r1
     a30:	31 97       	sbiw	r30, 0x01	; 1
     a32:	10 82       	st	Z, r1
     a34:	31 97       	sbiw	r30, 0x01	; 1
     a36:	80 e8       	ldi	r24, 0x80	; 128
     a38:	80 83       	st	Z, r24
     a3a:	ca 01       	movw	r24, r20
     a3c:	83 97       	sbiw	r24, 0x23	; 35
     a3e:	08 95       	ret

00000a40 <OSTaskCreateHook>:
     a40:	08 95       	ret

00000a42 <OSTaskDelHook>:
     a42:	08 95       	ret

00000a44 <OSTaskSwHook>:
     a44:	08 95       	ret

00000a46 <OSTaskStatHook>:
     a46:	08 95       	ret

00000a48 <OSTimeTickHook>:
     a48:	08 95       	ret

00000a4a <OSInitHookBegin>:
     a4a:	08 95       	ret

00000a4c <OSInitHookEnd>:
     a4c:	08 95       	ret

00000a4e <OSTaskIdleHook>:
     a4e:	08 95       	ret

00000a50 <OSTCBInitHook>:
     a50:	08 95       	ret

00000a52 <OS_TaskIdle>:
     a52:	f8 94       	cli
     a54:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <OSIdleCtr>
     a58:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <OSIdleCtr+0x1>
     a5c:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <OSIdleCtr+0x2>
     a60:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <OSIdleCtr+0x3>
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	a1 1d       	adc	r26, r1
     a68:	b1 1d       	adc	r27, r1
     a6a:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <OSIdleCtr>
     a6e:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <OSIdleCtr+0x1>
     a72:	a0 93 2d 04 	sts	0x042D, r26	; 0x80042d <OSIdleCtr+0x2>
     a76:	b0 93 2e 04 	sts	0x042E, r27	; 0x80042e <OSIdleCtr+0x3>
     a7a:	78 94       	sei
     a7c:	0e 94 27 05 	call	0xa4e	; 0xa4e <OSTaskIdleHook>
     a80:	e8 cf       	rjmp	.-48     	; 0xa52 <OS_TaskIdle>

00000a82 <OSIntEnter>:
     a82:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     a86:	81 30       	cpi	r24, 0x01	; 1
     a88:	39 f4       	brne	.+14     	; 0xa98 <OSIntEnter+0x16>
     a8a:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSIntNesting>
     a8e:	8f 3f       	cpi	r24, 0xFF	; 255
     a90:	19 f0       	breq	.+6      	; 0xa98 <OSIntEnter+0x16>
     a92:	8f 5f       	subi	r24, 0xFF	; 255
     a94:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <OSIntNesting>
     a98:	08 95       	ret

00000a9a <OSIntExit>:
     a9a:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     a9e:	81 30       	cpi	r24, 0x01	; 1
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <OSIntExit+0xa>
     aa2:	4c c0       	rjmp	.+152    	; 0xb3c <OSIntExit+0xa2>
     aa4:	f8 94       	cli
     aa6:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSIntNesting>
     aaa:	88 23       	and	r24, r24
     aac:	19 f0       	breq	.+6      	; 0xab4 <OSIntExit+0x1a>
     aae:	81 50       	subi	r24, 0x01	; 1
     ab0:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <OSIntNesting>
     ab4:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSIntNesting>
     ab8:	81 11       	cpse	r24, r1
     aba:	3f c0       	rjmp	.+126    	; 0xb3a <OSIntExit+0xa0>
     abc:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSLockNesting>
     ac0:	81 11       	cpse	r24, r1
     ac2:	3b c0       	rjmp	.+118    	; 0xb3a <OSIntExit+0xa0>
     ac4:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <OSRdyGrp>
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	e0 50       	subi	r30, 0x00	; 0
     acc:	ff 4f       	sbci	r31, 0xFF	; 255
     ace:	e0 81       	ld	r30, Z
     ad0:	e0 93 40 04 	sts	0x0440, r30	; 0x800440 <OSIntExitY>
     ad4:	ae 2f       	mov	r26, r30
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	a3 5c       	subi	r26, 0xC3	; 195
     ada:	bb 4f       	sbci	r27, 0xFB	; 251
     adc:	ac 91       	ld	r26, X
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	a0 50       	subi	r26, 0x00	; 0
     ae2:	bf 4f       	sbci	r27, 0xFF	; 255
     ae4:	ee 0f       	add	r30, r30
     ae6:	ee 0f       	add	r30, r30
     ae8:	ee 0f       	add	r30, r30
     aea:	8c 91       	ld	r24, X
     aec:	e8 0f       	add	r30, r24
     aee:	e0 93 2f 04 	sts	0x042F, r30	; 0x80042f <OSPrioHighRdy>
     af2:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <OSPrioCur>
     af6:	e8 17       	cp	r30, r24
     af8:	01 f1       	breq	.+64     	; 0xb3a <OSIntExit+0xa0>
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	ee 0f       	add	r30, r30
     afe:	ff 1f       	adc	r31, r31
     b00:	ed 57       	subi	r30, 0x7D	; 125
     b02:	fa 4f       	sbci	r31, 0xFA	; 250
     b04:	80 81       	ld	r24, Z
     b06:	91 81       	ldd	r25, Z+1	; 0x01
     b08:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <OSTCBHighRdy+0x1>
     b0c:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <OSTCBHighRdy>
     b10:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <OSCtxSwCtr>
     b14:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <OSCtxSwCtr+0x1>
     b18:	a0 91 35 04 	lds	r26, 0x0435	; 0x800435 <OSCtxSwCtr+0x2>
     b1c:	b0 91 36 04 	lds	r27, 0x0436	; 0x800436 <OSCtxSwCtr+0x3>
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	a1 1d       	adc	r26, r1
     b24:	b1 1d       	adc	r27, r1
     b26:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <OSCtxSwCtr>
     b2a:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <OSCtxSwCtr+0x1>
     b2e:	a0 93 35 04 	sts	0x0435, r26	; 0x800435 <OSCtxSwCtr+0x2>
     b32:	b0 93 36 04 	sts	0x0436, r27	; 0x800436 <OSCtxSwCtr+0x3>
     b36:	0e 94 44 04 	call	0x888	; 0x888 <OSIntCtxSw>
     b3a:	78 94       	sei
     b3c:	08 95       	ret

00000b3e <OSSchedLock>:
     b3e:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     b42:	81 30       	cpi	r24, 0x01	; 1
     b44:	49 f4       	brne	.+18     	; 0xb58 <OSSchedLock+0x1a>
     b46:	f8 94       	cli
     b48:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSLockNesting>
     b4c:	8f 3f       	cpi	r24, 0xFF	; 255
     b4e:	19 f0       	breq	.+6      	; 0xb56 <OSSchedLock+0x18>
     b50:	8f 5f       	subi	r24, 0xFF	; 255
     b52:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <OSLockNesting>
     b56:	78 94       	sei
     b58:	08 95       	ret

00000b5a <OSStart>:
     b5a:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     b5e:	81 11       	cpse	r24, r1
     b60:	28 c0       	rjmp	.+80     	; 0xbb2 <OSStart+0x58>
     b62:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <OSRdyGrp>
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	e0 50       	subi	r30, 0x00	; 0
     b6a:	ff 4f       	sbci	r31, 0xFF	; 255
     b6c:	e0 81       	ld	r30, Z
     b6e:	ae 2f       	mov	r26, r30
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	a3 5c       	subi	r26, 0xC3	; 195
     b74:	bb 4f       	sbci	r27, 0xFB	; 251
     b76:	ac 91       	ld	r26, X
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	a0 50       	subi	r26, 0x00	; 0
     b7c:	bf 4f       	sbci	r27, 0xFF	; 255
     b7e:	ee 0f       	add	r30, r30
     b80:	ee 0f       	add	r30, r30
     b82:	ee 0f       	add	r30, r30
     b84:	8c 91       	ld	r24, X
     b86:	e8 0f       	add	r30, r24
     b88:	e0 93 2f 04 	sts	0x042F, r30	; 0x80042f <OSPrioHighRdy>
     b8c:	e0 93 30 04 	sts	0x0430, r30	; 0x800430 <OSPrioCur>
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	ee 0f       	add	r30, r30
     b94:	ff 1f       	adc	r31, r31
     b96:	ed 57       	subi	r30, 0x7D	; 125
     b98:	fa 4f       	sbci	r31, 0xFA	; 250
     b9a:	80 81       	ld	r24, Z
     b9c:	91 81       	ldd	r25, Z+1	; 0x01
     b9e:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <OSTCBHighRdy+0x1>
     ba2:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <OSTCBHighRdy>
     ba6:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <OSTCBCur+0x1>
     baa:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <OSTCBCur>
     bae:	0c 94 b7 03 	jmp	0x76e	; 0x76e <OSStartHighRdy>
     bb2:	08 95       	ret

00000bb4 <OSTimeTick>:
     bb4:	0e 94 24 05 	call	0xa48	; 0xa48 <OSTimeTickHook>
     bb8:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     bbc:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <OSTCBList>
     bc0:	f0 91 32 04 	lds	r31, 0x0432	; 0x800432 <OSTCBList+0x1>
     bc4:	21 e0       	ldi	r18, 0x01	; 1
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	81 30       	cpi	r24, 0x01	; 1
     bca:	01 f1       	breq	.+64     	; 0xc0c <OSTimeTick+0x58>
     bcc:	08 95       	ret
     bce:	f8 94       	cli
     bd0:	86 81       	ldd	r24, Z+6	; 0x06
     bd2:	97 81       	ldd	r25, Z+7	; 0x07
     bd4:	00 97       	sbiw	r24, 0x00	; 0
     bd6:	b1 f0       	breq	.+44     	; 0xc04 <OSTimeTick+0x50>
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	97 83       	std	Z+7, r25	; 0x07
     bdc:	86 83       	std	Z+6, r24	; 0x06
     bde:	89 2b       	or	r24, r25
     be0:	89 f4       	brne	.+34     	; 0xc04 <OSTimeTick+0x50>
     be2:	80 85       	ldd	r24, Z+8	; 0x08
     be4:	83 fd       	sbrc	r24, 3
     be6:	16 c0       	rjmp	.+44     	; 0xc14 <OSTimeTick+0x60>
     be8:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <OSRdyGrp>
     bec:	95 85       	ldd	r25, Z+13	; 0x0d
     bee:	89 2b       	or	r24, r25
     bf0:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <OSRdyGrp>
     bf4:	a3 85       	ldd	r26, Z+11	; 0x0b
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	a3 5c       	subi	r26, 0xC3	; 195
     bfa:	bb 4f       	sbci	r27, 0xFB	; 251
     bfc:	8c 91       	ld	r24, X
     bfe:	94 85       	ldd	r25, Z+12	; 0x0c
     c00:	89 2b       	or	r24, r25
     c02:	8c 93       	st	X, r24
     c04:	02 80       	ldd	r0, Z+2	; 0x02
     c06:	f3 81       	ldd	r31, Z+3	; 0x03
     c08:	e0 2d       	mov	r30, r0
     c0a:	78 94       	sei
     c0c:	81 85       	ldd	r24, Z+9	; 0x09
     c0e:	80 31       	cpi	r24, 0x10	; 16
     c10:	f1 f6       	brne	.-68     	; 0xbce <OSTimeTick+0x1a>
     c12:	dc cf       	rjmp	.-72     	; 0xbcc <OSTimeTick+0x18>
     c14:	37 83       	std	Z+7, r19	; 0x07
     c16:	26 83       	std	Z+6, r18	; 0x06
     c18:	f5 cf       	rjmp	.-22     	; 0xc04 <OSTimeTick+0x50>

00000c1a <OSVersion>:
     c1a:	8c ef       	ldi	r24, 0xFC	; 252
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	08 95       	ret

00000c20 <OS_Dummy>:
     c20:	08 95       	ret

00000c22 <OS_Sched>:
     c22:	f8 94       	cli
     c24:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSIntNesting>
     c28:	81 11       	cpse	r24, r1
     c2a:	3d c0       	rjmp	.+122    	; 0xca6 <OS_Sched+0x84>
     c2c:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSLockNesting>
     c30:	81 11       	cpse	r24, r1
     c32:	39 c0       	rjmp	.+114    	; 0xca6 <OS_Sched+0x84>
     c34:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <OSRdyGrp>
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	e0 50       	subi	r30, 0x00	; 0
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	e0 81       	ld	r30, Z
     c40:	ae 2f       	mov	r26, r30
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	a3 5c       	subi	r26, 0xC3	; 195
     c46:	bb 4f       	sbci	r27, 0xFB	; 251
     c48:	ac 91       	ld	r26, X
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	a0 50       	subi	r26, 0x00	; 0
     c4e:	bf 4f       	sbci	r27, 0xFF	; 255
     c50:	ee 0f       	add	r30, r30
     c52:	ee 0f       	add	r30, r30
     c54:	ee 0f       	add	r30, r30
     c56:	8c 91       	ld	r24, X
     c58:	e8 0f       	add	r30, r24
     c5a:	e0 93 2f 04 	sts	0x042F, r30	; 0x80042f <OSPrioHighRdy>
     c5e:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <OSPrioCur>
     c62:	e8 17       	cp	r30, r24
     c64:	01 f1       	breq	.+64     	; 0xca6 <OS_Sched+0x84>
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	ee 0f       	add	r30, r30
     c6a:	ff 1f       	adc	r31, r31
     c6c:	ed 57       	subi	r30, 0x7D	; 125
     c6e:	fa 4f       	sbci	r31, 0xFA	; 250
     c70:	80 81       	ld	r24, Z
     c72:	91 81       	ldd	r25, Z+1	; 0x01
     c74:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <OSTCBHighRdy+0x1>
     c78:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <OSTCBHighRdy>
     c7c:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <OSCtxSwCtr>
     c80:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <OSCtxSwCtr+0x1>
     c84:	a0 91 35 04 	lds	r26, 0x0435	; 0x800435 <OSCtxSwCtr+0x2>
     c88:	b0 91 36 04 	lds	r27, 0x0436	; 0x800436 <OSCtxSwCtr+0x3>
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	a1 1d       	adc	r26, r1
     c90:	b1 1d       	adc	r27, r1
     c92:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <OSCtxSwCtr>
     c96:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <OSCtxSwCtr+0x1>
     c9a:	a0 93 35 04 	sts	0x0435, r26	; 0x800435 <OSCtxSwCtr+0x2>
     c9e:	b0 93 36 04 	sts	0x0436, r27	; 0x800436 <OSCtxSwCtr+0x3>
     ca2:	0e 94 e7 03 	call	0x7ce	; 0x7ce <OSCtxSw>
     ca6:	78 94       	sei
     ca8:	08 95       	ret

00000caa <OSSchedUnlock>:
     caa:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	91 f4       	brne	.+36     	; 0xcd6 <OSSchedUnlock+0x2c>
     cb2:	f8 94       	cli
     cb4:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSLockNesting>
     cb8:	88 23       	and	r24, r24
     cba:	61 f0       	breq	.+24     	; 0xcd4 <OSSchedUnlock+0x2a>
     cbc:	81 50       	subi	r24, 0x01	; 1
     cbe:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <OSLockNesting>
     cc2:	81 11       	cpse	r24, r1
     cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <OSSchedUnlock+0x2a>
     cc6:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <OSIntNesting>
     cca:	81 11       	cpse	r24, r1
     ccc:	03 c0       	rjmp	.+6      	; 0xcd4 <OSSchedUnlock+0x2a>
     cce:	78 94       	sei
     cd0:	0c 94 11 06 	jmp	0xc22	; 0xc22 <OS_Sched>
     cd4:	78 94       	sei
     cd6:	08 95       	ret

00000cd8 <OSTimeDly.part.0>:
     cd8:	ac 01       	movw	r20, r24
     cda:	f8 94       	cli
     cdc:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <OSTCBCur>
     ce0:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <OSTCBCur+0x1>
     ce4:	1b 96       	adiw	r26, 0x0b	; 11
     ce6:	ec 91       	ld	r30, X
     ce8:	1b 97       	sbiw	r26, 0x0b	; 11
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	1c 96       	adiw	r26, 0x0c	; 12
     cee:	9c 91       	ld	r25, X
     cf0:	1c 97       	sbiw	r26, 0x0c	; 12
     cf2:	90 95       	com	r25
     cf4:	e3 5c       	subi	r30, 0xC3	; 195
     cf6:	fb 4f       	sbci	r31, 0xFB	; 251
     cf8:	80 81       	ld	r24, Z
     cfa:	98 23       	and	r25, r24
     cfc:	90 83       	st	Z, r25
     cfe:	91 11       	cpse	r25, r1
     d00:	0a c0       	rjmp	.+20     	; 0xd16 <OSTimeDly.part.0+0x3e>
     d02:	1d 96       	adiw	r26, 0x0d	; 13
     d04:	9c 91       	ld	r25, X
     d06:	1d 97       	sbiw	r26, 0x0d	; 13
     d08:	29 2f       	mov	r18, r25
     d0a:	20 95       	com	r18
     d0c:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <OSRdyGrp>
     d10:	92 23       	and	r25, r18
     d12:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <OSRdyGrp>
     d16:	17 96       	adiw	r26, 0x07	; 7
     d18:	5c 93       	st	X, r21
     d1a:	4e 93       	st	-X, r20
     d1c:	16 97       	sbiw	r26, 0x06	; 6
     d1e:	78 94       	sei
     d20:	0c 94 11 06 	jmp	0xc22	; 0xc22 <OS_Sched>

00000d24 <OS_TCBInit>:
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	f8 94       	cli
     d2c:	c0 91 37 04 	lds	r28, 0x0437	; 0x800437 <OSTCBFreeList>
     d30:	d0 91 38 04 	lds	r29, 0x0438	; 0x800438 <OSTCBFreeList+0x1>
     d34:	20 97       	sbiw	r28, 0x00	; 0
     d36:	09 f4       	brne	.+2      	; 0xd3a <OS_TCBInit+0x16>
     d38:	54 c0       	rjmp	.+168    	; 0xde2 <OS_TCBInit+0xbe>
     d3a:	18 2f       	mov	r17, r24
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	9b 81       	ldd	r25, Y+3	; 0x03
     d40:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <OSTCBFreeList+0x1>
     d44:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <OSTCBFreeList>
     d48:	78 94       	sei
     d4a:	79 83       	std	Y+1, r23	; 0x01
     d4c:	68 83       	st	Y, r22
     d4e:	19 87       	std	Y+9, r17	; 0x09
     d50:	18 86       	std	Y+8, r1	; 0x08
     d52:	1f 82       	std	Y+7, r1	; 0x07
     d54:	1e 82       	std	Y+6, r1	; 0x06
     d56:	1e 86       	std	Y+14, r1	; 0x0e
     d58:	e1 2f       	mov	r30, r17
     d5a:	e6 95       	lsr	r30
     d5c:	e6 95       	lsr	r30
     d5e:	e6 95       	lsr	r30
     d60:	eb 87       	std	Y+11, r30	; 0x0b
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	e0 50       	subi	r30, 0x00	; 0
     d66:	fe 4f       	sbci	r31, 0xFE	; 254
     d68:	80 81       	ld	r24, Z
     d6a:	8d 87       	std	Y+13, r24	; 0x0d
     d6c:	e1 2f       	mov	r30, r17
     d6e:	e7 70       	andi	r30, 0x07	; 7
     d70:	ea 87       	std	Y+10, r30	; 0x0a
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	e0 50       	subi	r30, 0x00	; 0
     d76:	fe 4f       	sbci	r31, 0xFE	; 254
     d78:	80 81       	ld	r24, Z
     d7a:	8c 87       	std	Y+12, r24	; 0x0c
     d7c:	ce 01       	movw	r24, r28
     d7e:	0e 94 28 05 	call	0xa50	; 0xa50 <OSTCBInitHook>
     d82:	ce 01       	movw	r24, r28
     d84:	0e 94 20 05 	call	0xa40	; 0xa40 <OSTaskCreateHook>
     d88:	f8 94       	cli
     d8a:	e1 2f       	mov	r30, r17
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	ee 0f       	add	r30, r30
     d90:	ff 1f       	adc	r31, r31
     d92:	ed 57       	subi	r30, 0x7D	; 125
     d94:	fa 4f       	sbci	r31, 0xFA	; 250
     d96:	d1 83       	std	Z+1, r29	; 0x01
     d98:	c0 83       	st	Z, r28
     d9a:	e0 91 31 04 	lds	r30, 0x0431	; 0x800431 <OSTCBList>
     d9e:	f0 91 32 04 	lds	r31, 0x0432	; 0x800432 <OSTCBList+0x1>
     da2:	fb 83       	std	Y+3, r31	; 0x03
     da4:	ea 83       	std	Y+2, r30	; 0x02
     da6:	1d 82       	std	Y+5, r1	; 0x05
     da8:	1c 82       	std	Y+4, r1	; 0x04
     daa:	30 97       	sbiw	r30, 0x00	; 0
     dac:	11 f0       	breq	.+4      	; 0xdb2 <OS_TCBInit+0x8e>
     dae:	d5 83       	std	Z+5, r29	; 0x05
     db0:	c4 83       	std	Z+4, r28	; 0x04
     db2:	d0 93 32 04 	sts	0x0432, r29	; 0x800432 <OSTCBList+0x1>
     db6:	c0 93 31 04 	sts	0x0431, r28	; 0x800431 <OSTCBList>
     dba:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <OSRdyGrp>
     dbe:	9d 85       	ldd	r25, Y+13	; 0x0d
     dc0:	89 2b       	or	r24, r25
     dc2:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <OSRdyGrp>
     dc6:	eb 85       	ldd	r30, Y+11	; 0x0b
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	e3 5c       	subi	r30, 0xC3	; 195
     dcc:	fb 4f       	sbci	r31, 0xFB	; 251
     dce:	80 81       	ld	r24, Z
     dd0:	9c 85       	ldd	r25, Y+12	; 0x0c
     dd2:	89 2b       	or	r24, r25
     dd4:	80 83       	st	Z, r24
     dd6:	78 94       	sei
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	08 95       	ret
     de2:	78 94       	sei
     de4:	86 e4       	ldi	r24, 0x46	; 70
     de6:	f9 cf       	rjmp	.-14     	; 0xdda <OS_TCBInit+0xb6>

00000de8 <OSTaskCreate>:
     de8:	9f 92       	push	r9
     dea:	af 92       	push	r10
     dec:	bf 92       	push	r11
     dee:	cf 92       	push	r12
     df0:	df 92       	push	r13
     df2:	ef 92       	push	r14
     df4:	ff 92       	push	r15
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	f8 94       	cli
     e00:	c2 2f       	mov	r28, r18
     e02:	d0 e0       	ldi	r29, 0x00	; 0
     e04:	cc 0f       	add	r28, r28
     e06:	dd 1f       	adc	r29, r29
     e08:	cd 57       	subi	r28, 0x7D	; 125
     e0a:	da 4f       	sbci	r29, 0xFA	; 250
     e0c:	e8 81       	ld	r30, Y
     e0e:	f9 81       	ldd	r31, Y+1	; 0x01
     e10:	ef 2b       	or	r30, r31
     e12:	09 f0       	breq	.+2      	; 0xe16 <OSTaskCreate+0x2e>
     e14:	3b c0       	rjmp	.+118    	; 0xe8c <OSTaskCreate+0xa4>
     e16:	92 2e       	mov	r9, r18
     e18:	21 e0       	ldi	r18, 0x01	; 1
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	39 83       	std	Y+1, r19	; 0x01
     e1e:	28 83       	st	Y, r18
     e20:	78 94       	sei
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	0e 94 d6 04 	call	0x9ac	; 0x9ac <OSTaskStkInit>
     e2a:	b1 2c       	mov	r11, r1
     e2c:	a1 2c       	mov	r10, r1
     e2e:	d1 2c       	mov	r13, r1
     e30:	c1 2c       	mov	r12, r1
     e32:	e1 2c       	mov	r14, r1
     e34:	f1 2c       	mov	r15, r1
     e36:	87 01       	movw	r16, r14
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	50 e0       	ldi	r21, 0x00	; 0
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	bc 01       	movw	r22, r24
     e42:	89 2d       	mov	r24, r9
     e44:	0e 94 92 06 	call	0xd24	; 0xd24 <OS_TCBInit>
     e48:	18 2f       	mov	r17, r24
     e4a:	81 11       	cpse	r24, r1
     e4c:	1a c0       	rjmp	.+52     	; 0xe82 <OSTaskCreate+0x9a>
     e4e:	f8 94       	cli
     e50:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <OSTaskCtr>
     e54:	8f 5f       	subi	r24, 0xFF	; 255
     e56:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <OSTaskCtr>
     e5a:	78 94       	sei
     e5c:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <OSRunning>
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	11 f4       	brne	.+4      	; 0xe68 <OSTaskCreate+0x80>
     e64:	0e 94 11 06 	call	0xc22	; 0xc22 <OS_Sched>
     e68:	81 2f       	mov	r24, r17
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	bf 90       	pop	r11
     e7c:	af 90       	pop	r10
     e7e:	9f 90       	pop	r9
     e80:	08 95       	ret
     e82:	f8 94       	cli
     e84:	19 82       	std	Y+1, r1	; 0x01
     e86:	18 82       	st	Y, r1
     e88:	78 94       	sei
     e8a:	ee cf       	rjmp	.-36     	; 0xe68 <OSTaskCreate+0x80>
     e8c:	78 94       	sei
     e8e:	18 e2       	ldi	r17, 0x28	; 40
     e90:	eb cf       	rjmp	.-42     	; 0xe68 <OSTaskCreate+0x80>

00000e92 <OSInit>:
     e92:	0e 94 25 05 	call	0xa4a	; 0xa4a <OSInitHookBegin>
     e96:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <OSIntNesting>
     e9a:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <OSLockNesting>
     e9e:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <OSTaskCtr>
     ea2:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <OSRunning>
     ea6:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <OSCtxSwCtr>
     eaa:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <OSCtxSwCtr+0x1>
     eae:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <OSCtxSwCtr+0x2>
     eb2:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <OSCtxSwCtr+0x3>
     eb6:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <OSIdleCtr>
     eba:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <OSIdleCtr+0x1>
     ebe:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <OSIdleCtr+0x2>
     ec2:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <OSIdleCtr+0x3>
     ec6:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <OSRdyGrp>
     eca:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <OSRdyTbl>
     ece:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <OSRdyTbl+0x1>
     ed2:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <OSRdyTbl+0x2>
     ed6:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <OSPrioCur>
     eda:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <OSPrioHighRdy>
     ede:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <OSTCBHighRdy+0x1>
     ee2:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <OSTCBHighRdy>
     ee6:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <OSTCBCur+0x1>
     eea:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <OSTCBCur>
     eee:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <OSTCBList+0x1>
     ef2:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <OSTCBList>
     ef6:	e3 e8       	ldi	r30, 0x83	; 131
     ef8:	f5 e0       	ldi	r31, 0x05	; 5
     efa:	11 92       	st	Z+, r1
     efc:	11 92       	st	Z+, r1
     efe:	85 e0       	ldi	r24, 0x05	; 5
     f00:	e5 3a       	cpi	r30, 0xA5	; 165
     f02:	f8 07       	cpc	r31, r24
     f04:	d1 f7       	brne	.-12     	; 0xefa <OSInit+0x68>
     f06:	e4 e8       	ldi	r30, 0x84	; 132
     f08:	f4 e0       	ldi	r31, 0x04	; 4
     f0a:	cf 01       	movw	r24, r30
     f0c:	0f 96       	adiw	r24, 0x0f	; 15
     f0e:	93 83       	std	Z+3, r25	; 0x03
     f10:	82 83       	std	Z+2, r24	; 0x02
     f12:	fc 01       	movw	r30, r24
     f14:	85 e0       	ldi	r24, 0x05	; 5
     f16:	e4 37       	cpi	r30, 0x74	; 116
     f18:	f8 07       	cpc	r31, r24
     f1a:	b9 f7       	brne	.-18     	; 0xf0a <OSInit+0x78>
     f1c:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <OSTCBTbl+0xf3>
     f20:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <OSTCBTbl+0xf2>
     f24:	84 e8       	ldi	r24, 0x84	; 132
     f26:	94 e0       	ldi	r25, 0x04	; 4
     f28:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <OSTCBFreeList+0x1>
     f2c:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <OSTCBFreeList>
     f30:	20 e1       	ldi	r18, 0x10	; 16
     f32:	43 e8       	ldi	r20, 0x83	; 131
     f34:	54 e0       	ldi	r21, 0x04	; 4
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	89 e2       	ldi	r24, 0x29	; 41
     f3c:	95 e0       	ldi	r25, 0x05	; 5
     f3e:	0e 94 f4 06 	call	0xde8	; 0xde8 <OSTaskCreate>
     f42:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <OSInitHookEnd>

00000f46 <OSTaskDel>:
     f46:	ff 92       	push	r15
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	f0 90 41 04 	lds	r15, 0x0441	; 0x800441 <OSIntNesting>
     f54:	f1 10       	cpse	r15, r1
     f56:	76 c0       	rjmp	.+236    	; 0x1044 <OSTaskDel+0xfe>
     f58:	f8 94       	cli
     f5a:	8f 3f       	cpi	r24, 0xFF	; 255
     f5c:	29 f4       	brne	.+10     	; 0xf68 <OSTaskDel+0x22>
     f5e:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <OSTCBCur>
     f62:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <OSTCBCur+0x1>
     f66:	81 85       	ldd	r24, Z+9	; 0x09
     f68:	08 2f       	mov	r16, r24
     f6a:	10 e0       	ldi	r17, 0x00	; 0
     f6c:	00 0f       	add	r16, r16
     f6e:	11 1f       	adc	r17, r17
     f70:	f8 01       	movw	r30, r16
     f72:	ed 57       	subi	r30, 0x7D	; 125
     f74:	fa 4f       	sbci	r31, 0xFA	; 250
     f76:	c0 81       	ld	r28, Z
     f78:	d1 81       	ldd	r29, Z+1	; 0x01
     f7a:	20 97       	sbiw	r28, 0x00	; 0
     f7c:	09 f4       	brne	.+2      	; 0xf80 <OSTaskDel+0x3a>
     f7e:	5e c0       	rjmp	.+188    	; 0x103c <OSTaskDel+0xf6>
     f80:	eb 85       	ldd	r30, Y+11	; 0x0b
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	8c 85       	ldd	r24, Y+12	; 0x0c
     f86:	80 95       	com	r24
     f88:	e3 5c       	subi	r30, 0xC3	; 195
     f8a:	fb 4f       	sbci	r31, 0xFB	; 251
     f8c:	90 81       	ld	r25, Z
     f8e:	89 23       	and	r24, r25
     f90:	80 83       	st	Z, r24
     f92:	81 11       	cpse	r24, r1
     f94:	08 c0       	rjmp	.+16     	; 0xfa6 <OSTaskDel+0x60>
     f96:	8d 85       	ldd	r24, Y+13	; 0x0d
     f98:	98 2f       	mov	r25, r24
     f9a:	90 95       	com	r25
     f9c:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <OSRdyGrp>
     fa0:	89 23       	and	r24, r25
     fa2:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <OSRdyGrp>
     fa6:	1f 82       	std	Y+7, r1	; 0x07
     fa8:	1e 82       	std	Y+6, r1	; 0x06
     faa:	18 86       	std	Y+8, r1	; 0x08
     fac:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSLockNesting>
     fb0:	8f 3f       	cpi	r24, 0xFF	; 255
     fb2:	19 f0       	breq	.+6      	; 0xfba <OSTaskDel+0x74>
     fb4:	8f 5f       	subi	r24, 0xFF	; 255
     fb6:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <OSLockNesting>
     fba:	78 94       	sei
     fbc:	f8 94       	cli
     fbe:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSLockNesting>
     fc2:	88 23       	and	r24, r24
     fc4:	19 f0       	breq	.+6      	; 0xfcc <OSTaskDel+0x86>
     fc6:	81 50       	subi	r24, 0x01	; 1
     fc8:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <OSLockNesting>
     fcc:	ce 01       	movw	r24, r28
     fce:	0e 94 21 05 	call	0xa42	; 0xa42 <OSTaskDelHook>
     fd2:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <OSTaskCtr>
     fd6:	81 50       	subi	r24, 0x01	; 1
     fd8:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <OSTaskCtr>
     fdc:	f8 01       	movw	r30, r16
     fde:	ed 57       	subi	r30, 0x7D	; 125
     fe0:	fa 4f       	sbci	r31, 0xFA	; 250
     fe2:	11 82       	std	Z+1, r1	; 0x01
     fe4:	10 82       	st	Z, r1
     fe6:	ec 81       	ldd	r30, Y+4	; 0x04
     fe8:	fd 81       	ldd	r31, Y+5	; 0x05
     fea:	aa 81       	ldd	r26, Y+2	; 0x02
     fec:	bb 81       	ldd	r27, Y+3	; 0x03
     fee:	30 97       	sbiw	r30, 0x00	; 0
     ff0:	e1 f4       	brne	.+56     	; 0x102a <OSTaskDel+0xe4>
     ff2:	15 96       	adiw	r26, 0x05	; 5
     ff4:	1c 92       	st	X, r1
     ff6:	1e 92       	st	-X, r1
     ff8:	14 97       	sbiw	r26, 0x04	; 4
     ffa:	b0 93 32 04 	sts	0x0432, r27	; 0x800432 <OSTCBList+0x1>
     ffe:	a0 93 31 04 	sts	0x0431, r26	; 0x800431 <OSTCBList>
    1002:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <OSTCBFreeList>
    1006:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <OSTCBFreeList+0x1>
    100a:	9b 83       	std	Y+3, r25	; 0x03
    100c:	8a 83       	std	Y+2, r24	; 0x02
    100e:	d0 93 38 04 	sts	0x0438, r29	; 0x800438 <OSTCBFreeList+0x1>
    1012:	c0 93 37 04 	sts	0x0437, r28	; 0x800437 <OSTCBFreeList>
    1016:	78 94       	sei
    1018:	0e 94 11 06 	call	0xc22	; 0xc22 <OS_Sched>
    101c:	8f 2d       	mov	r24, r15
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	08 95       	ret
    102a:	b3 83       	std	Z+3, r27	; 0x03
    102c:	a2 83       	std	Z+2, r26	; 0x02
    102e:	aa 81       	ldd	r26, Y+2	; 0x02
    1030:	bb 81       	ldd	r27, Y+3	; 0x03
    1032:	15 96       	adiw	r26, 0x05	; 5
    1034:	fc 93       	st	X, r31
    1036:	ee 93       	st	-X, r30
    1038:	14 97       	sbiw	r26, 0x04	; 4
    103a:	e3 cf       	rjmp	.-58     	; 0x1002 <OSTaskDel+0xbc>
    103c:	78 94       	sei
    103e:	9c e3       	ldi	r25, 0x3C	; 60
    1040:	f9 2e       	mov	r15, r25
    1042:	ec cf       	rjmp	.-40     	; 0x101c <OSTaskDel+0xd6>
    1044:	8f e3       	ldi	r24, 0x3F	; 63
    1046:	f8 2e       	mov	r15, r24
    1048:	e9 cf       	rjmp	.-46     	; 0x101c <OSTaskDel+0xd6>

0000104a <OSTaskDelReq>:
    104a:	8f 3f       	cpi	r24, 0xFF	; 255
    104c:	41 f4       	brne	.+16     	; 0x105e <OSTaskDelReq+0x14>
    104e:	f8 94       	cli
    1050:	e0 91 42 04 	lds	r30, 0x0442	; 0x800442 <OSTCBCur>
    1054:	f0 91 43 04 	lds	r31, 0x0443	; 0x800443 <OSTCBCur+0x1>
    1058:	86 85       	ldd	r24, Z+14	; 0x0e
    105a:	78 94       	sei
    105c:	08 95       	ret
    105e:	f8 94       	cli
    1060:	e8 2f       	mov	r30, r24
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	ee 0f       	add	r30, r30
    1066:	ff 1f       	adc	r31, r31
    1068:	ed 57       	subi	r30, 0x7D	; 125
    106a:	fa 4f       	sbci	r31, 0xFA	; 250
    106c:	01 90       	ld	r0, Z+
    106e:	f0 81       	ld	r31, Z
    1070:	e0 2d       	mov	r30, r0
    1072:	8b e0       	ldi	r24, 0x0B	; 11
    1074:	30 97       	sbiw	r30, 0x00	; 0
    1076:	89 f3       	breq	.-30     	; 0x105a <OSTaskDelReq+0x10>
    1078:	8e e3       	ldi	r24, 0x3E	; 62
    107a:	86 87       	std	Z+14, r24	; 0x0e
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	ed cf       	rjmp	.-38     	; 0x105a <OSTaskDelReq+0x10>

00001080 <OSTimeDly>:
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	11 f0       	breq	.+4      	; 0x1088 <OSTimeDly+0x8>
    1084:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <OSTimeDly.part.0>
    1088:	08 95       	ret

0000108a <OSTimeDlyHMSM>:
    108a:	cf 92       	push	r12
    108c:	df 92       	push	r13
    108e:	ef 92       	push	r14
    1090:	ff 92       	push	r15
    1092:	81 11       	cpse	r24, r1
    1094:	0d c0       	rjmp	.+26     	; 0x10b0 <OSTimeDlyHMSM+0x26>
    1096:	61 11       	cpse	r22, r1
    1098:	0b c0       	rjmp	.+22     	; 0x10b0 <OSTimeDlyHMSM+0x26>
    109a:	41 11       	cpse	r20, r1
    109c:	0c c0       	rjmp	.+24     	; 0x10b6 <OSTimeDlyHMSM+0x2c>
    109e:	21 15       	cp	r18, r1
    10a0:	31 05       	cpc	r19, r1
    10a2:	61 f4       	brne	.+24     	; 0x10bc <OSTimeDlyHMSM+0x32>
    10a4:	84 e5       	ldi	r24, 0x54	; 84
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	df 90       	pop	r13
    10ac:	cf 90       	pop	r12
    10ae:	08 95       	ret
    10b0:	6c 33       	cpi	r22, 0x3C	; 60
    10b2:	08 f0       	brcs	.+2      	; 0x10b6 <OSTimeDlyHMSM+0x2c>
    10b4:	4f c0       	rjmp	.+158    	; 0x1154 <OSTimeDlyHMSM+0xca>
    10b6:	4c 33       	cpi	r20, 0x3C	; 60
    10b8:	08 f0       	brcs	.+2      	; 0x10bc <OSTimeDlyHMSM+0x32>
    10ba:	4e c0       	rjmp	.+156    	; 0x1158 <OSTimeDlyHMSM+0xce>
    10bc:	28 3e       	cpi	r18, 0xE8	; 232
    10be:	93 e0       	ldi	r25, 0x03	; 3
    10c0:	39 07       	cpc	r19, r25
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <OSTimeDlyHMSM+0x3c>
    10c4:	4b c0       	rjmp	.+150    	; 0x115c <OSTimeDlyHMSM+0xd2>
    10c6:	f9 01       	movw	r30, r18
    10c8:	58 2f       	mov	r21, r24
    10ca:	26 2f       	mov	r18, r22
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	ac e3       	ldi	r26, 0x3C	; 60
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	0e 94 22 09 	call	0x1244	; 0x1244 <__umulhisi3>
    10d6:	6b 01       	movw	r12, r22
    10d8:	7c 01       	movw	r14, r24
    10da:	c4 0e       	add	r12, r20
    10dc:	d1 1c       	adc	r13, r1
    10de:	e1 1c       	adc	r14, r1
    10e0:	f1 1c       	adc	r15, r1
    10e2:	25 2f       	mov	r18, r21
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	a0 e1       	ldi	r26, 0x10	; 16
    10e8:	be e0       	ldi	r27, 0x0E	; 14
    10ea:	0e 94 22 09 	call	0x1244	; 0x1244 <__umulhisi3>
    10ee:	a7 01       	movw	r20, r14
    10f0:	96 01       	movw	r18, r12
    10f2:	26 0f       	add	r18, r22
    10f4:	37 1f       	adc	r19, r23
    10f6:	48 1f       	adc	r20, r24
    10f8:	59 1f       	adc	r21, r25
    10fa:	a4 e6       	ldi	r26, 0x64	; 100
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	0e 94 31 09 	call	0x1262	; 0x1262 <__muluhisi3>
    1102:	6b 01       	movw	r12, r22
    1104:	7c 01       	movw	r14, r24
    1106:	9f 01       	movw	r18, r30
    1108:	0e 94 22 09 	call	0x1244	; 0x1244 <__umulhisi3>
    110c:	6c 50       	subi	r22, 0x0C	; 12
    110e:	7e 4f       	sbci	r23, 0xFE	; 254
    1110:	8f 4f       	sbci	r24, 0xFF	; 255
    1112:	9f 4f       	sbci	r25, 0xFF	; 255
    1114:	28 ee       	ldi	r18, 0xE8	; 232
    1116:	33 e0       	ldi	r19, 0x03	; 3
    1118:	40 e0       	ldi	r20, 0x00	; 0
    111a:	50 e0       	ldi	r21, 0x00	; 0
    111c:	0e 94 00 09 	call	0x1200	; 0x1200 <__udivmodsi4>
    1120:	d7 01       	movw	r26, r14
    1122:	c6 01       	movw	r24, r12
    1124:	82 0f       	add	r24, r18
    1126:	93 1f       	adc	r25, r19
    1128:	a4 1f       	adc	r26, r20
    112a:	b5 1f       	adc	r27, r21
    112c:	7d 01       	movw	r14, r26
    112e:	0e 94 40 08 	call	0x1080	; 0x1080 <OSTimeDly>
    1132:	e1 14       	cp	r14, r1
    1134:	f1 04       	cpc	r15, r1
    1136:	11 f4       	brne	.+4      	; 0x113c <OSTimeDlyHMSM+0xb2>
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	b5 cf       	rjmp	.-150    	; 0x10a6 <OSTimeDlyHMSM+0x1c>
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e8       	ldi	r25, 0x80	; 128
    1140:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <OSTimeDly.part.0>
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e8       	ldi	r25, 0x80	; 128
    1148:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <OSTimeDly.part.0>
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	e8 1a       	sub	r14, r24
    1150:	f1 08       	sbc	r15, r1
    1152:	ef cf       	rjmp	.-34     	; 0x1132 <OSTimeDlyHMSM+0xa8>
    1154:	81 e5       	ldi	r24, 0x51	; 81
    1156:	a7 cf       	rjmp	.-178    	; 0x10a6 <OSTimeDlyHMSM+0x1c>
    1158:	82 e5       	ldi	r24, 0x52	; 82
    115a:	a5 cf       	rjmp	.-182    	; 0x10a6 <OSTimeDlyHMSM+0x1c>
    115c:	83 e5       	ldi	r24, 0x53	; 83
    115e:	a3 cf       	rjmp	.-186    	; 0x10a6 <OSTimeDlyHMSM+0x1c>

00001160 <main>:

}

int main( void )
{
 robo_Setup(); /* initialize HAL for RoboKar */
    1160:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <robo_Setup>
 OSInit(); /* initialize UCOS-II kernel */
    1164:	0e 94 49 07 	call	0xe92	; 0xe92 <OSInit>

 robo_motorSpeed(STOP_SPEED, STOP_SPEED); /* Stop the robot, value STOP_SPEED == 0 */
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	0e 94 1e 02 	call	0x43c	; 0x43c <robo_motorSpeed>
 myrobot.rspeed = STOP_SPEED; /* Initialize myrobot states */
    1174:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <myrobot+0x1>
    1178:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <myrobot>
 myrobot.lspeed = STOP_SPEED;
    117c:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <myrobot+0x3>
    1180:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <myrobot+0x2>
 myrobot.obstacle = 0; /* No collisioin */
    1184:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <myrobot+0x4>
 count =0;
    1188:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <count+0x1>
    118c:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <count>
 OSTaskCreate(TaskStart, /* create TaskStart Task */
    1190:	21 e0       	ldi	r18, 0x01	; 1
    1192:	40 ea       	ldi	r20, 0xA0	; 160
    1194:	53 e0       	ldi	r21, 0x03	; 3
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	87 e2       	ldi	r24, 0x27	; 39
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	0e 94 f4 06 	call	0xde8	; 0xde8 <OSTaskCreate>
 (void *)0,
 (void *)&TaskStartStk[TASK_STK_SZ - 1],
 TASK_START_PRIO);
 robo_Honk(); robo_wait4goPress(); /* Wait for to GO */
    11a2:	0e 94 c1 02 	call	0x582	; 0x582 <robo_Honk>
    11a6:	0e 94 e7 02 	call	0x5ce	; 0x5ce <robo_wait4goPress>
 OSStart(); /* Start multitasking */
    11aa:	0e 94 ad 05 	call	0xb5a	; 0xb5a <OSStart>
    11ae:	ff cf       	rjmp	.-2      	; 0x11ae <main+0x4e>

000011b0 <__udivmodhi4>:
    11b0:	aa 1b       	sub	r26, r26
    11b2:	bb 1b       	sub	r27, r27
    11b4:	51 e1       	ldi	r21, 0x11	; 17
    11b6:	07 c0       	rjmp	.+14     	; 0x11c6 <__udivmodhi4_ep>

000011b8 <__udivmodhi4_loop>:
    11b8:	aa 1f       	adc	r26, r26
    11ba:	bb 1f       	adc	r27, r27
    11bc:	a6 17       	cp	r26, r22
    11be:	b7 07       	cpc	r27, r23
    11c0:	10 f0       	brcs	.+4      	; 0x11c6 <__udivmodhi4_ep>
    11c2:	a6 1b       	sub	r26, r22
    11c4:	b7 0b       	sbc	r27, r23

000011c6 <__udivmodhi4_ep>:
    11c6:	88 1f       	adc	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	5a 95       	dec	r21
    11cc:	a9 f7       	brne	.-22     	; 0x11b8 <__udivmodhi4_loop>
    11ce:	80 95       	com	r24
    11d0:	90 95       	com	r25
    11d2:	bc 01       	movw	r22, r24
    11d4:	cd 01       	movw	r24, r26
    11d6:	08 95       	ret

000011d8 <__divmodhi4>:
    11d8:	97 fb       	bst	r25, 7
    11da:	07 2e       	mov	r0, r23
    11dc:	16 f4       	brtc	.+4      	; 0x11e2 <__divmodhi4+0xa>
    11de:	00 94       	com	r0
    11e0:	07 d0       	rcall	.+14     	; 0x11f0 <__divmodhi4_neg1>
    11e2:	77 fd       	sbrc	r23, 7
    11e4:	09 d0       	rcall	.+18     	; 0x11f8 <__divmodhi4_neg2>
    11e6:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__udivmodhi4>
    11ea:	07 fc       	sbrc	r0, 7
    11ec:	05 d0       	rcall	.+10     	; 0x11f8 <__divmodhi4_neg2>
    11ee:	3e f4       	brtc	.+14     	; 0x11fe <__divmodhi4_exit>

000011f0 <__divmodhi4_neg1>:
    11f0:	90 95       	com	r25
    11f2:	81 95       	neg	r24
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	08 95       	ret

000011f8 <__divmodhi4_neg2>:
    11f8:	70 95       	com	r23
    11fa:	61 95       	neg	r22
    11fc:	7f 4f       	sbci	r23, 0xFF	; 255

000011fe <__divmodhi4_exit>:
    11fe:	08 95       	ret

00001200 <__udivmodsi4>:
    1200:	a1 e2       	ldi	r26, 0x21	; 33
    1202:	1a 2e       	mov	r1, r26
    1204:	aa 1b       	sub	r26, r26
    1206:	bb 1b       	sub	r27, r27
    1208:	fd 01       	movw	r30, r26
    120a:	0d c0       	rjmp	.+26     	; 0x1226 <__udivmodsi4_ep>

0000120c <__udivmodsi4_loop>:
    120c:	aa 1f       	adc	r26, r26
    120e:	bb 1f       	adc	r27, r27
    1210:	ee 1f       	adc	r30, r30
    1212:	ff 1f       	adc	r31, r31
    1214:	a2 17       	cp	r26, r18
    1216:	b3 07       	cpc	r27, r19
    1218:	e4 07       	cpc	r30, r20
    121a:	f5 07       	cpc	r31, r21
    121c:	20 f0       	brcs	.+8      	; 0x1226 <__udivmodsi4_ep>
    121e:	a2 1b       	sub	r26, r18
    1220:	b3 0b       	sbc	r27, r19
    1222:	e4 0b       	sbc	r30, r20
    1224:	f5 0b       	sbc	r31, r21

00001226 <__udivmodsi4_ep>:
    1226:	66 1f       	adc	r22, r22
    1228:	77 1f       	adc	r23, r23
    122a:	88 1f       	adc	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	1a 94       	dec	r1
    1230:	69 f7       	brne	.-38     	; 0x120c <__udivmodsi4_loop>
    1232:	60 95       	com	r22
    1234:	70 95       	com	r23
    1236:	80 95       	com	r24
    1238:	90 95       	com	r25
    123a:	9b 01       	movw	r18, r22
    123c:	ac 01       	movw	r20, r24
    123e:	bd 01       	movw	r22, r26
    1240:	cf 01       	movw	r24, r30
    1242:	08 95       	ret

00001244 <__umulhisi3>:
    1244:	a2 9f       	mul	r26, r18
    1246:	b0 01       	movw	r22, r0
    1248:	b3 9f       	mul	r27, r19
    124a:	c0 01       	movw	r24, r0
    124c:	a3 9f       	mul	r26, r19
    124e:	70 0d       	add	r23, r0
    1250:	81 1d       	adc	r24, r1
    1252:	11 24       	eor	r1, r1
    1254:	91 1d       	adc	r25, r1
    1256:	b2 9f       	mul	r27, r18
    1258:	70 0d       	add	r23, r0
    125a:	81 1d       	adc	r24, r1
    125c:	11 24       	eor	r1, r1
    125e:	91 1d       	adc	r25, r1
    1260:	08 95       	ret

00001262 <__muluhisi3>:
    1262:	0e 94 22 09 	call	0x1244	; 0x1244 <__umulhisi3>
    1266:	a5 9f       	mul	r26, r21
    1268:	90 0d       	add	r25, r0
    126a:	b4 9f       	mul	r27, r20
    126c:	90 0d       	add	r25, r0
    126e:	a4 9f       	mul	r26, r20
    1270:	80 0d       	add	r24, r0
    1272:	91 1d       	adc	r25, r1
    1274:	11 24       	eor	r1, r1
    1276:	08 95       	ret

00001278 <_exit>:
    1278:	f8 94       	cli

0000127a <__stop_program>:
    127a:	ff cf       	rjmp	.-2      	; 0x127a <__stop_program>
