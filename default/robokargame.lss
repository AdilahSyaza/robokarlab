
robokargame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  000011fa  0000128e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000389  0080021a  0080021a  000013a8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001400  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000146c  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083e  00000000  00000000  000029b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009fa  00000000  00000000  000031f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00003bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000629  00000000  00000000  00003c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e8  00000000  00000000  00004289  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00004371  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 3a 04 	jmp	0x874	; 0x874 <OSTickISR>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ef       	ldi	r30, 0xFA	; 250
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 3a       	cpi	r26, 0xA3	; 163
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <main>
      9e:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CheckCollision>:
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ) /* obstacle? */
     myrobot.obstacle = 1; /* signal obstacle present */
      a6:	c1 e0       	ldi	r28, 0x01	; 1
/*------High pririority task----------*/
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ) /* obstacle? */
      a8:	0e 94 3c 02 	call	0x478	; 0x478 <robo_proxSensor>
      ac:	01 97       	sbiw	r24, 0x01	; 1
      ae:	51 f4       	brne	.+20     	; 0xc4 <CheckCollision+0x1e>
     myrobot.obstacle = 1; /* signal obstacle present */
      b0:	c0 93 9e 02 	sts	0x029E, r28	; 0x80029e <myrobot+0x4>
 else
     myrobot.obstacle = 0; /* signal no obstacle */

 OSTimeDlyHMSM(0, 0, 0, 100); /* Task period ~ 100 ms */
      b4:	24 e6       	ldi	r18, 0x64	; 100
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	40 e0       	ldi	r20, 0x00	; 0
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 08 08 	call	0x1010	; 0x1010 <OSTimeDlyHMSM>
/*------High pririority task----------*/
void CheckCollision (void *data)
{
 for(;;)
 {
  if ( (robo_proxSensor() == 1) ) /* obstacle? */
      c2:	f2 cf       	rjmp	.-28     	; 0xa8 <CheckCollision+0x2>
     myrobot.obstacle = 1; /* signal obstacle present */
 else
     myrobot.obstacle = 0; /* signal no obstacle */
      c4:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <myrobot+0x4>
      c8:	f5 cf       	rjmp	.-22     	; 0xb4 <CheckCollision+0xe>

000000ca <CntrlMotors>:

 for(;;)
 {
  speed_r = myrobot.rspeed;
  speed_l = myrobot.lspeed;
  robo_motorSpeed(speed_l, speed_r);
      ca:	60 91 9a 02 	lds	r22, 0x029A	; 0x80029a <myrobot>
      ce:	70 91 9b 02 	lds	r23, 0x029B	; 0x80029b <myrobot+0x1>
      d2:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <myrobot+0x2>
      d6:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <myrobot+0x3>
      da:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <robo_motorSpeed>
  OSTimeDlyHMSM(0, 0, 0, 10); /* Task period ~ 250 ms */
      de:	2a e0       	ldi	r18, 0x0A	; 10
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 08 08 	call	0x1010	; 0x1010 <OSTimeDlyHMSM>
      ec:	ee cf       	rjmp	.-36     	; 0xca <CntrlMotors>

000000ee <Navig>:
  

	// for light sensor
	  if (robo_lightSensor() > 80) /* it is too bright, I'm photophobia */
	  {
	   myrobot.rspeed = -LOW_SPEED; /* turn right to avoid */
      ee:	0d ed       	ldi	r16, 0xDD	; 221
      f0:	1f ef       	ldi	r17, 0xFF	; 255
	   myrobot.lspeed = LOW_SPEED;
      f2:	83 e2       	ldi	r24, 0x23	; 35
      f4:	e8 2e       	mov	r14, r24
      f6:	f1 2c       	mov	r15, r1
	   myrobot.lspeed = LOW_SPEED; /* corner left */

	  }else if (robo_lineSensor() == 3)
	  {
	    myrobot.rspeed = LOW_SPEED; 
	   myrobot.lspeed = MEDIUM_SPEED; /* corner right */
      f8:	c7 e3       	ldi	r28, 0x37	; 55
      fa:	d0 e0       	ldi	r29, 0x00	; 0
	  {
	    myrobot.rspeed = MEDIUM_SPEED ;/* turn left */
	   myrobot.lspeed =  -MEDIUM_SPEED;
	  }else if (robo_lineSensor() == 1)
	  {
	    myrobot.rspeed = -MEDIUM_SPEED; 
      fc:	99 ec       	ldi	r25, 0xC9	; 201
      fe:	c9 2e       	mov	r12, r25
     100:	dd 24       	eor	r13, r13
     102:	da 94       	dec	r13
void Navig (void *data)
{

 for (;;)
 {
  if (myrobot.obstacle == 1) /* If blocked then reverse */
     104:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <myrobot+0x4>
     108:	81 30       	cpi	r24, 0x01	; 1
     10a:	81 f4       	brne	.+32     	; 0x12c <Navig+0x3e>
  {
   myrobot.rspeed = -LOW_SPEED; /* REVERSE */
     10c:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     110:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
   myrobot.lspeed = -LOW_SPEED;
     114:	10 93 9d 02 	sts	0x029D, r17	; 0x80029d <myrobot+0x3>
     118:	00 93 9c 02 	sts	0x029C, r16	; 0x80029c <myrobot+0x2>
	  	
	  }
  }
  

	OSTimeDlyHMSM(0, 0, 0, 10);
     11c:	2a e0       	ldi	r18, 0x0A	; 10
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	40 e0       	ldi	r20, 0x00	; 0
     122:	60 e0       	ldi	r22, 0x00	; 0
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	0e 94 08 08 	call	0x1010	; 0x1010 <OSTimeDlyHMSM>
void Navig (void *data)
{

 for (;;)
 {
  if (myrobot.obstacle == 1) /* If blocked then reverse */
     12a:	ec cf       	rjmp	.-40     	; 0x104 <Navig+0x16>
  {
   myrobot.rspeed = -LOW_SPEED; /* REVERSE */
   myrobot.lspeed = -LOW_SPEED;
  }else{
  	  if (robo_lineSensor() == 2) /* go straight */
     12c:	0e 94 5f 02 	call	0x4be	; 0x4be <robo_lineSensor>
     130:	02 97       	sbiw	r24, 0x02	; 2
     132:	49 f4       	brne	.+18     	; 0x146 <Navig+0x58>
	  {
	   myrobot.rspeed = MEDIUM_SPEED;
     134:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     138:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
	    myrobot.rspeed = MEDIUM_SPEED ;/* turn left */
	   myrobot.lspeed =  -MEDIUM_SPEED;
	  }else if (robo_lineSensor() == 1)
	  {
	    myrobot.rspeed = -MEDIUM_SPEED; 
	   myrobot.lspeed = MEDIUM_SPEED; /* turn right */
     13c:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <myrobot+0x3>
     140:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <myrobot+0x2>
     144:	0c c0       	rjmp	.+24     	; 0x15e <Navig+0x70>
  }else{
  	  if (robo_lineSensor() == 2) /* go straight */
	  {
	   myrobot.rspeed = MEDIUM_SPEED;
	   myrobot.lspeed = MEDIUM_SPEED;
	  }else if (robo_lineSensor() == 4)
     146:	0e 94 5f 02 	call	0x4be	; 0x4be <robo_lineSensor>
     14a:	04 97       	sbiw	r24, 0x04	; 4
     14c:	b1 f4       	brne	.+44     	; 0x17a <Navig+0x8c>
	  {
	    myrobot.rspeed = MEDIUM_SPEED ;/* turn left */
     14e:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     152:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
	   myrobot.lspeed =  -MEDIUM_SPEED;
     156:	d0 92 9d 02 	sts	0x029D, r13	; 0x80029d <myrobot+0x3>
     15a:	c0 92 9c 02 	sts	0x029C, r12	; 0x80029c <myrobot+0x2>
	  
	  }
  

	// for light sensor
	  if (robo_lightSensor() > 80) /* it is too bright, I'm photophobia */
     15e:	0e 94 48 02 	call	0x490	; 0x490 <robo_lightSensor>
     162:	81 35       	cpi	r24, 0x51	; 81
     164:	91 05       	cpc	r25, r1
     166:	d4 f2       	brlt	.-76     	; 0x11c <Navig+0x2e>
	  {
	   myrobot.rspeed = -LOW_SPEED; /* turn right to avoid */
     168:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     16c:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
	   myrobot.lspeed = LOW_SPEED;
     170:	f0 92 9d 02 	sts	0x029D, r15	; 0x80029d <myrobot+0x3>
     174:	e0 92 9c 02 	sts	0x029C, r14	; 0x80029c <myrobot+0x2>
     178:	d1 cf       	rjmp	.-94     	; 0x11c <Navig+0x2e>
	   myrobot.lspeed = MEDIUM_SPEED;
	  }else if (robo_lineSensor() == 4)
	  {
	    myrobot.rspeed = MEDIUM_SPEED ;/* turn left */
	   myrobot.lspeed =  -MEDIUM_SPEED;
	  }else if (robo_lineSensor() == 1)
     17a:	0e 94 5f 02 	call	0x4be	; 0x4be <robo_lineSensor>
     17e:	01 97       	sbiw	r24, 0x01	; 1
     180:	29 f4       	brne	.+10     	; 0x18c <Navig+0x9e>
	  {
	    myrobot.rspeed = -MEDIUM_SPEED; 
     182:	d0 92 9b 02 	sts	0x029B, r13	; 0x80029b <myrobot+0x1>
     186:	c0 92 9a 02 	sts	0x029A, r12	; 0x80029a <myrobot>
     18a:	d8 cf       	rjmp	.-80     	; 0x13c <Navig+0x4e>
	   myrobot.lspeed = MEDIUM_SPEED; /* turn right */

	  }else if (robo_lineSensor() == 6)
     18c:	0e 94 5f 02 	call	0x4be	; 0x4be <robo_lineSensor>
     190:	06 97       	sbiw	r24, 0x06	; 6
     192:	49 f4       	brne	.+18     	; 0x1a6 <Navig+0xb8>
	  {
	    myrobot.rspeed = MEDIUM_SPEED; 
     194:	d0 93 9b 02 	sts	0x029B, r29	; 0x80029b <myrobot+0x1>
     198:	c0 93 9a 02 	sts	0x029A, r28	; 0x80029a <myrobot>
	   myrobot.lspeed = LOW_SPEED; /* corner left */
     19c:	f0 92 9d 02 	sts	0x029D, r15	; 0x80029d <myrobot+0x3>
     1a0:	e0 92 9c 02 	sts	0x029C, r14	; 0x80029c <myrobot+0x2>
     1a4:	dc cf       	rjmp	.-72     	; 0x15e <Navig+0x70>

	  }else if (robo_lineSensor() == 3)
     1a6:	0e 94 5f 02 	call	0x4be	; 0x4be <robo_lineSensor>
     1aa:	03 97       	sbiw	r24, 0x03	; 3
     1ac:	29 f4       	brne	.+10     	; 0x1b8 <Navig+0xca>
	  {
	    myrobot.rspeed = LOW_SPEED; 
     1ae:	f0 92 9b 02 	sts	0x029B, r15	; 0x80029b <myrobot+0x1>
     1b2:	e0 92 9a 02 	sts	0x029A, r14	; 0x80029a <myrobot>
     1b6:	c2 cf       	rjmp	.-124    	; 0x13c <Navig+0x4e>
	   myrobot.lspeed = MEDIUM_SPEED; /* corner right */
	  }else if (robo_lineSensor() == 0)
     1b8:	0e 94 5f 02 	call	0x4be	; 0x4be <robo_lineSensor>
     1bc:	89 2b       	or	r24, r25
     1be:	09 f0       	breq	.+2      	; 0x1c2 <Navig+0xd4>
     1c0:	b9 cf       	rjmp	.-142    	; 0x134 <Navig+0x46>
	  {
	  	 
	    myrobot.rspeed = -LOW_SPEED; 
     1c2:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <myrobot+0x1>
     1c6:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <myrobot>
	    myrobot.lspeed = STOP_SPEED; /* stranded straight */
     1ca:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <myrobot+0x3>
     1ce:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <myrobot+0x2>
     1d2:	c5 cf       	rjmp	.-118    	; 0x15e <Navig+0x70>

000001d4 <TaskStart>:


/*------Highest pririority task----------*/
/* Create all other tasks here */
void TaskStart( void *data )
{
     1d4:	cf 93       	push	r28
     1d6:	df 93       	push	r29
     1d8:	00 d0       	rcall	.+0      	; 0x1da <TaskStart+0x6>
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
 OS_ticks_init(); /* enable RTOS timer tick */
     1de:	0e 94 af 02 	call	0x55e	; 0x55e <OS_ticks_init>
	int  counter;
 OSTaskCreate(CheckCollision , /* Task function */
     1e2:	22 e0       	ldi	r18, 0x02	; 2
     1e4:	49 e9       	ldi	r20, 0x99	; 153
     1e6:	52 e0       	ldi	r21, 0x02	; 2
     1e8:	70 e0       	ldi	r23, 0x00	; 0
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	83 e5       	ldi	r24, 0x53	; 83
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	0e 94 b7 06 	call	0xd6e	; 0xd6e <OSTaskCreate>
 (void *)0, /* nothing passed to task */
 (void *)&ChkCollideStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_CHKCOLLIDE_PRIO); /* priority of task */

 OSTaskCreate(CntrlMotors , /* Task function */
     1f4:	23 e0       	ldi	r18, 0x03	; 3
     1f6:	4e e1       	ldi	r20, 0x1E	; 30
     1f8:	53 e0       	ldi	r21, 0x03	; 3
     1fa:	70 e0       	ldi	r23, 0x00	; 0
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	85 e6       	ldi	r24, 0x65	; 101
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 b7 06 	call	0xd6e	; 0xd6e <OSTaskCreate>
 (void *)0, /* nothing passed to task */
 (void *)&CtrlmotorStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_CTRLMOTOR_PRIO); /* priority of task */

 OSTaskCreate(Navig, /* Task function */
     206:	24 e0       	ldi	r18, 0x04	; 4
     208:	4e e1       	ldi	r20, 0x1E	; 30
     20a:	54 e0       	ldi	r21, 0x04	; 4
     20c:	be 01       	movw	r22, r28
     20e:	6f 5f       	subi	r22, 0xFF	; 255
     210:	7f 4f       	sbci	r23, 0xFF	; 255
     212:	87 e7       	ldi	r24, 0x77	; 119
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 b7 06 	call	0xd6e	; 0xd6e <OSTaskCreate>
 TASK_NAVIG_PRIO); /* priority of task */

 while(1)
 {
  OSTimeDlyHMSM(0, 0, 5, 0); /* Task period ~ 5 secs, argument position: HOURS, MINUTES, SECONDS, and MILLISECONDS S*/ 
  robo_LED_toggle(); /* Show that we are alive */
     21a:	11 e0       	ldi	r17, 0x01	; 1
 (void *)&NavigStk[TASK_STK_SZ - 1], /* stack allocated to task */
 TASK_NAVIG_PRIO); /* priority of task */

 while(1)
 {
  OSTimeDlyHMSM(0, 0, 5, 0); /* Task period ~ 5 secs, argument position: HOURS, MINUTES, SECONDS, and MILLISECONDS S*/ 
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	45 e0       	ldi	r20, 0x05	; 5
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	0e 94 08 08 	call	0x1010	; 0x1010 <OSTimeDlyHMSM>
  robo_LED_toggle(); /* Show that we are alive */
     22a:	85 b1       	in	r24, 0x05	; 5
     22c:	81 27       	eor	r24, r17
     22e:	85 b9       	out	0x05, r24	; 5
     230:	f5 cf       	rjmp	.-22     	; 0x21c <TaskStart+0x48>

00000232 <ADC_init>:
     232:	80 e4       	ldi	r24, 0x40	; 64
     234:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     238:	86 e8       	ldi	r24, 0x86	; 134
     23a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     23e:	08 95       	ret

00000240 <ADC_read>:
     240:	f8 94       	cli
     242:	80 64       	ori	r24, 0x40	; 64
     244:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     248:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     24c:	80 64       	ori	r24, 0x40	; 64
     24e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     252:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     256:	84 ff       	sbrs	r24, 4
     258:	fc cf       	rjmp	.-8      	; 0x252 <ADC_read+0x12>
     25a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     25e:	80 61       	ori	r24, 0x10	; 16
     260:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     264:	78 94       	sei
     266:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     26a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     26e:	93 70       	andi	r25, 0x03	; 3
     270:	08 95       	ret

00000272 <PWM8_write>:
     272:	81 11       	cpse	r24, r1
     274:	05 c0       	rjmp	.+10     	; 0x280 <PWM8_write+0xe>
     276:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     27a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     27e:	08 95       	ret
     280:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     284:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     288:	08 95       	ret

0000028a <motor_init>:
     28a:	8a b1       	in	r24, 0x0a	; 10
     28c:	80 6f       	ori	r24, 0xF0	; 240
     28e:	8a b9       	out	0x0a, r24	; 10
     290:	8b b1       	in	r24, 0x0b	; 11
     292:	8f 70       	andi	r24, 0x0F	; 15
     294:	8b b9       	out	0x0b, r24	; 11
     296:	81 ea       	ldi	r24, 0xA1	; 161
     298:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     29c:	83 e0       	ldi	r24, 0x03	; 3
     29e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     2a2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     2a6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     2aa:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     2ae:	a8 e8       	ldi	r26, 0x88	; 136
     2b0:	b0 e0       	ldi	r27, 0x00	; 0
     2b2:	1c 92       	st	X, r1
     2b4:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     2b8:	ea e8       	ldi	r30, 0x8A	; 138
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	10 82       	st	Z, r1
     2be:	84 b1       	in	r24, 0x04	; 4
     2c0:	86 60       	ori	r24, 0x06	; 6
     2c2:	84 b9       	out	0x04, r24	; 4
     2c4:	11 96       	adiw	r26, 0x01	; 1
     2c6:	1c 92       	st	X, r1
     2c8:	1e 92       	st	-X, r1
     2ca:	11 82       	std	Z+1, r1	; 0x01
     2cc:	10 82       	st	Z, r1
     2ce:	08 95       	ret

000002d0 <motor_set_speed>:
     2d0:	77 ff       	sbrs	r23, 7
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <motor_set_speed+0x8>
     2d4:	70 e0       	ldi	r23, 0x00	; 0
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	65 36       	cpi	r22, 0x65	; 101
     2da:	71 05       	cpc	r23, r1
     2dc:	14 f0       	brlt	.+4      	; 0x2e2 <motor_set_speed+0x12>
     2de:	64 e6       	ldi	r22, 0x64	; 100
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	9b 01       	movw	r18, r22
     2e4:	22 0f       	add	r18, r18
     2e6:	33 1f       	adc	r19, r19
     2e8:	75 95       	asr	r23
     2ea:	67 95       	ror	r22
     2ec:	62 0f       	add	r22, r18
     2ee:	73 1f       	adc	r23, r19
     2f0:	81 11       	cpse	r24, r1
     2f2:	09 c0       	rjmp	.+18     	; 0x306 <motor_set_speed+0x36>
     2f4:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     2f8:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     2fc:	70 93 20 04 	sts	0x0420, r23	; 0x800420 <rightWst+0x1>
     300:	60 93 1f 04 	sts	0x041F, r22	; 0x80041f <rightWst>
     304:	08 95       	ret
     306:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     30a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     30e:	70 93 24 04 	sts	0x0424, r23	; 0x800424 <leftWst+0x1>
     312:	60 93 23 04 	sts	0x0423, r22	; 0x800423 <leftWst>
     316:	08 95       	ret

00000318 <motor_set_dir>:
     318:	cf 93       	push	r28
     31a:	c6 2f       	mov	r28, r22
     31c:	26 2f       	mov	r18, r22
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	81 11       	cpse	r24, r1
     322:	2b c0       	rjmp	.+86     	; 0x37a <motor_set_dir+0x62>
     324:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <rightWst+0x2>
     328:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <rightWst+0x3>
     32c:	82 17       	cp	r24, r18
     32e:	93 07       	cpc	r25, r19
     330:	59 f0       	breq	.+22     	; 0x348 <motor_set_dir+0x30>
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0e 94 68 01 	call	0x2d0	; 0x2d0 <motor_set_speed>
     33c:	8f e9       	ldi	r24, 0x9F	; 159
     33e:	9f e0       	ldi	r25, 0x0F	; 15
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	f1 f7       	brne	.-4      	; 0x340 <motor_set_dir+0x28>
     344:	00 c0       	rjmp	.+0      	; 0x346 <motor_set_dir+0x2e>
     346:	00 00       	nop
     348:	c1 11       	cpse	r28, r1
     34a:	0e c0       	rjmp	.+28     	; 0x368 <motor_set_dir+0x50>
     34c:	5e 98       	cbi	0x0b, 6	; 11
     34e:	5f 9a       	sbi	0x0b, 7	; 11
     350:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <rightWst+0x3>
     354:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <rightWst+0x2>
     358:	8f e3       	ldi	r24, 0x3F	; 63
     35a:	9c e9       	ldi	r25, 0x9C	; 156
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <motor_set_dir+0x44>
     360:	00 c0       	rjmp	.+0      	; 0x362 <motor_set_dir+0x4a>
     362:	00 00       	nop
     364:	cf 91       	pop	r28
     366:	08 95       	ret
     368:	5e 9a       	sbi	0x0b, 6	; 11
     36a:	5f 98       	cbi	0x0b, 7	; 11
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <rightWst+0x3>
     374:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <rightWst+0x2>
     378:	ef cf       	rjmp	.-34     	; 0x358 <motor_set_dir+0x40>
     37a:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <leftWst+0x2>
     37e:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <leftWst+0x3>
     382:	82 17       	cp	r24, r18
     384:	93 07       	cpc	r25, r19
     386:	59 f0       	breq	.+22     	; 0x39e <motor_set_dir+0x86>
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <motor_set_speed>
     392:	8f e9       	ldi	r24, 0x9F	; 159
     394:	9f e0       	ldi	r25, 0x0F	; 15
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <motor_set_dir+0x7e>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <motor_set_dir+0x84>
     39c:	00 00       	nop
     39e:	c1 11       	cpse	r28, r1
     3a0:	07 c0       	rjmp	.+14     	; 0x3b0 <motor_set_dir+0x98>
     3a2:	5c 9a       	sbi	0x0b, 4	; 11
     3a4:	5d 98       	cbi	0x0b, 5	; 11
     3a6:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <leftWst+0x3>
     3aa:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <leftWst+0x2>
     3ae:	d4 cf       	rjmp	.-88     	; 0x358 <motor_set_dir+0x40>
     3b0:	5c 98       	cbi	0x0b, 4	; 11
     3b2:	5d 9a       	sbi	0x0b, 5	; 11
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <leftWst+0x3>
     3bc:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <leftWst+0x2>
     3c0:	cb cf       	rjmp	.-106    	; 0x358 <motor_set_dir+0x40>

000003c2 <robo_motorSpeed>:
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	ec 01       	movw	r28, r24
     3cc:	8b 01       	movw	r16, r22
     3ce:	97 ff       	sbrs	r25, 7
     3d0:	1c c0       	rjmp	.+56     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	0e 94 8c 01 	call	0x318	; 0x318 <motor_set_dir>
     3da:	d1 95       	neg	r29
     3dc:	c1 95       	neg	r28
     3de:	d1 09       	sbc	r29, r1
     3e0:	17 ff       	sbrs	r17, 7
     3e2:	18 c0       	rjmp	.+48     	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
     3e4:	61 e0       	ldi	r22, 0x01	; 1
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	0e 94 8c 01 	call	0x318	; 0x318 <motor_set_dir>
     3ec:	11 95       	neg	r17
     3ee:	01 95       	neg	r16
     3f0:	11 09       	sbc	r17, r1
     3f2:	b8 01       	movw	r22, r16
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <motor_set_speed>
     3fa:	be 01       	movw	r22, r28
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <motor_set_speed>
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	0e 94 8c 01 	call	0x318	; 0x318 <motor_set_dir>
     412:	e6 cf       	rjmp	.-52     	; 0x3e0 <robo_motorSpeed+0x1e>
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	0e 94 8c 01 	call	0x318	; 0x318 <motor_set_dir>
     41c:	ea cf       	rjmp	.-44     	; 0x3f2 <robo_motorSpeed+0x30>

0000041e <USART0_init>:
     41e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     422:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     426:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     42a:	88 e1       	ldi	r24, 0x18	; 24
     42c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     430:	86 e0       	ldi	r24, 0x06	; 6
     432:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     436:	08 95       	ret

00000438 <cputchar>:
     438:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     43c:	95 ff       	sbrs	r25, 5
     43e:	fc cf       	rjmp	.-8      	; 0x438 <cputchar>
     440:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     444:	08 95       	ret

00000446 <cgetchar>:
     446:	cf 93       	push	r28
     448:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     44c:	87 ff       	sbrs	r24, 7
     44e:	fc cf       	rjmp	.-8      	; 0x448 <cgetchar+0x2>
     450:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     454:	8c 2f       	mov	r24, r28
     456:	0e 94 1c 02 	call	0x438	; 0x438 <cputchar>
     45a:	8c 2f       	mov	r24, r28
     45c:	cf 91       	pop	r28
     45e:	08 95       	ret

00000460 <cputs>:
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	ec 01       	movw	r28, r24
     466:	89 91       	ld	r24, Y+
     468:	81 11       	cpse	r24, r1
     46a:	03 c0       	rjmp	.+6      	; 0x472 <cputs+0x12>
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	08 95       	ret
     472:	0e 94 1c 02 	call	0x438	; 0x438 <cputchar>
     476:	f7 cf       	rjmp	.-18     	; 0x466 <cputs+0x6>

00000478 <robo_proxSensor>:
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	0e 94 20 01 	call	0x240	; 0x240 <ADC_read>
     47e:	21 e0       	ldi	r18, 0x01	; 1
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	84 36       	cpi	r24, 0x64	; 100
     484:	91 05       	cpc	r25, r1
     486:	10 f0       	brcs	.+4      	; 0x48c <robo_proxSensor+0x14>
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	c9 01       	movw	r24, r18
     48e:	08 95       	ret

00000490 <robo_lightSensor>:
     490:	84 e0       	ldi	r24, 0x04	; 4
     492:	0e 94 20 01 	call	0x240	; 0x240 <ADC_read>
     496:	2b ef       	ldi	r18, 0xFB	; 251
     498:	ac 01       	movw	r20, r24
     49a:	24 03       	mulsu	r18, r20
     49c:	c0 01       	movw	r24, r0
     49e:	25 9f       	mul	r18, r21
     4a0:	90 0d       	add	r25, r0
     4a2:	11 24       	eor	r1, r1
     4a4:	85 50       	subi	r24, 0x05	; 5
     4a6:	9c 4e       	sbci	r25, 0xEC	; 236
     4a8:	63 e3       	ldi	r22, 0x33	; 51
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	0e 94 ab 08 	call	0x1156	; 0x1156 <__divmodhi4>
     4b0:	cb 01       	movw	r24, r22
     4b2:	65 36       	cpi	r22, 0x65	; 101
     4b4:	71 05       	cpc	r23, r1
     4b6:	14 f0       	brlt	.+4      	; 0x4bc <robo_lightSensor+0x2c>
     4b8:	84 e6       	ldi	r24, 0x64	; 100
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	08 95       	ret

000004be <robo_lineSensor>:
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	c0 e0       	ldi	r28, 0x00	; 0
     4c4:	d1 e0       	ldi	r29, 0x01	; 1
     4c6:	cc 0f       	add	r28, r28
     4c8:	8d 2f       	mov	r24, r29
     4ca:	0e 94 20 01 	call	0x240	; 0x240 <ADC_read>
     4ce:	8c 32       	cpi	r24, 0x2C	; 44
     4d0:	91 40       	sbci	r25, 0x01	; 1
     4d2:	0c f4       	brge	.+2      	; 0x4d6 <robo_lineSensor+0x18>
     4d4:	c1 60       	ori	r28, 0x01	; 1
     4d6:	df 5f       	subi	r29, 0xFF	; 255
     4d8:	d4 30       	cpi	r29, 0x04	; 4
     4da:	a9 f7       	brne	.-22     	; 0x4c6 <robo_lineSensor+0x8>
     4dc:	8c 2f       	mov	r24, r28
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <robo_bumpSensorR>:
     4e6:	83 b1       	in	r24, 0x03	; 3
     4e8:	82 95       	swap	r24
     4ea:	8f 70       	andi	r24, 0x0F	; 15
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	89 27       	eor	r24, r25
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	08 95       	ret

000004f6 <robo_bumpSensorL>:
     4f6:	83 b1       	in	r24, 0x03	; 3
     4f8:	86 95       	lsr	r24
     4fa:	86 95       	lsr	r24
     4fc:	86 95       	lsr	r24
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	89 27       	eor	r24, r25
     502:	81 70       	andi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	08 95       	ret

00000508 <robo_Honk>:
     508:	5b 9a       	sbi	0x0b, 3	; 11
     50a:	2f ef       	ldi	r18, 0xFF	; 255
     50c:	85 ea       	ldi	r24, 0xA5	; 165
     50e:	9e e0       	ldi	r25, 0x0E	; 14
     510:	21 50       	subi	r18, 0x01	; 1
     512:	80 40       	sbci	r24, 0x00	; 0
     514:	90 40       	sbci	r25, 0x00	; 0
     516:	e1 f7       	brne	.-8      	; 0x510 <robo_Honk+0x8>
     518:	00 c0       	rjmp	.+0      	; 0x51a <robo_Honk+0x12>
     51a:	00 00       	nop
     51c:	5b 98       	cbi	0x0b, 3	; 11
     51e:	2f ef       	ldi	r18, 0xFF	; 255
     520:	85 ea       	ldi	r24, 0xA5	; 165
     522:	9e e0       	ldi	r25, 0x0E	; 14
     524:	21 50       	subi	r18, 0x01	; 1
     526:	80 40       	sbci	r24, 0x00	; 0
     528:	90 40       	sbci	r25, 0x00	; 0
     52a:	e1 f7       	brne	.-8      	; 0x524 <robo_Honk+0x1c>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <robo_Honk+0x26>
     52e:	00 00       	nop
     530:	08 95       	ret

00000532 <robo_checkBattery>:
     532:	85 e0       	ldi	r24, 0x05	; 5
     534:	0e 94 20 01 	call	0x240	; 0x240 <ADC_read>
     538:	84 3f       	cpi	r24, 0xF4	; 244
     53a:	91 40       	sbci	r25, 0x01	; 1
     53c:	10 f4       	brcc	.+4      	; 0x542 <robo_checkBattery+0x10>
     53e:	28 9a       	sbi	0x05, 0	; 5
     540:	08 95       	ret
     542:	28 98       	cbi	0x05, 0	; 5
     544:	08 95       	ret

00000546 <robo_goPressed>:
     546:	89 b1       	in	r24, 0x09	; 9
     548:	82 fb       	bst	r24, 2
     54a:	88 27       	eor	r24, r24
     54c:	80 f9       	bld	r24, 0
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	89 27       	eor	r24, r25
     552:	08 95       	ret

00000554 <robo_wait4goPress>:
     554:	0e 94 a3 02 	call	0x546	; 0x546 <robo_goPressed>
     558:	88 23       	and	r24, r24
     55a:	e1 f3       	breq	.-8      	; 0x554 <robo_wait4goPress>
     55c:	08 95       	ret

0000055e <OS_ticks_init>:
     55e:	f8 94       	cli
     560:	85 e0       	ldi	r24, 0x05	; 5
     562:	85 bd       	out	0x25, r24	; 37
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     56a:	84 e6       	ldi	r24, 0x64	; 100
     56c:	86 bd       	out	0x26, r24	; 38
     56e:	78 94       	sei
     570:	08 95       	ret

00000572 <HAL_init>:
     572:	87 e6       	ldi	r24, 0x67	; 103
     574:	0e 94 0f 02 	call	0x41e	; 0x41e <USART0_init>
     578:	0c 94 19 01 	jmp	0x232	; 0x232 <ADC_init>

0000057c <robo_Setup>:
     57c:	0e 94 b9 02 	call	0x572	; 0x572 <HAL_init>
     580:	0e 94 45 01 	call	0x28a	; 0x28a <motor_init>
     584:	53 9a       	sbi	0x0a, 3	; 10
     586:	5b 98       	cbi	0x0b, 3	; 11
     588:	20 9a       	sbi	0x04, 0	; 4
     58a:	52 98       	cbi	0x0a, 2	; 10
     58c:	5a 9a       	sbi	0x0b, 2	; 11
     58e:	24 98       	cbi	0x04, 4	; 4
     590:	23 98       	cbi	0x04, 3	; 4
     592:	85 b1       	in	r24, 0x05	; 5
     594:	88 61       	ori	r24, 0x18	; 24
     596:	85 b9       	out	0x05, r24	; 5
     598:	60 e0       	ldi	r22, 0x00	; 0
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	0e 94 8c 01 	call	0x318	; 0x318 <motor_set_dir>
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	0e 94 8c 01 	call	0x318	; 0x318 <motor_set_dir>
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	60 e0       	ldi	r22, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <robo_motorSpeed>

000005b4 <cprintf>:
     5b4:	4f 92       	push	r4
     5b6:	5f 92       	push	r5
     5b8:	6f 92       	push	r6
     5ba:	7f 92       	push	r7
     5bc:	8f 92       	push	r8
     5be:	9f 92       	push	r9
     5c0:	af 92       	push	r10
     5c2:	bf 92       	push	r11
     5c4:	cf 92       	push	r12
     5c6:	df 92       	push	r13
     5c8:	ef 92       	push	r14
     5ca:	ff 92       	push	r15
     5cc:	0f 93       	push	r16
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	de 01       	movw	r26, r28
     5da:	53 96       	adiw	r26, 0x13	; 19
     5dc:	ed 91       	ld	r30, X+
     5de:	fd 91       	ld	r31, X+
     5e0:	8d 01       	movw	r16, r26
     5e2:	5a e0       	ldi	r21, 0x0A	; 10
     5e4:	65 2e       	mov	r6, r21
     5e6:	71 2c       	mov	r7, r1
     5e8:	80 81       	ld	r24, Z
     5ea:	85 32       	cpi	r24, 0x25	; 37
     5ec:	81 f4       	brne	.+32     	; 0x60e <cprintf+0x5a>
     5ee:	5f 01       	movw	r10, r30
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	a8 0e       	add	r10, r24
     5f4:	b1 1c       	adc	r11, r1
     5f6:	81 81       	ldd	r24, Z+1	; 0x01
     5f8:	84 36       	cpi	r24, 0x64	; 100
     5fa:	09 f4       	brne	.+2      	; 0x5fe <cprintf+0x4a>
     5fc:	50 c0       	rjmp	.+160    	; 0x69e <cprintf+0xea>
     5fe:	90 f4       	brcc	.+36     	; 0x624 <cprintf+0x70>
     600:	83 36       	cpi	r24, 0x63	; 99
     602:	61 f4       	brne	.+24     	; 0x61c <cprintf+0x68>
     604:	f8 01       	movw	r30, r16
     606:	80 81       	ld	r24, Z
     608:	0e 5f       	subi	r16, 0xFE	; 254
     60a:	1f 4f       	sbci	r17, 0xFF	; 255
     60c:	07 c0       	rjmp	.+14     	; 0x61c <cprintf+0x68>
     60e:	88 23       	and	r24, r24
     610:	09 f4       	brne	.+2      	; 0x614 <cprintf+0x60>
     612:	5d c0       	rjmp	.+186    	; 0x6ce <cprintf+0x11a>
     614:	5f 01       	movw	r10, r30
     616:	9f ef       	ldi	r25, 0xFF	; 255
     618:	a9 1a       	sub	r10, r25
     61a:	b9 0a       	sbc	r11, r25
     61c:	0e 94 1c 02 	call	0x438	; 0x438 <cputchar>
     620:	f5 01       	movw	r30, r10
     622:	e2 cf       	rjmp	.-60     	; 0x5e8 <cprintf+0x34>
     624:	83 37       	cpi	r24, 0x73	; 115
     626:	71 f1       	breq	.+92     	; 0x684 <cprintf+0xd0>
     628:	30 e1       	ldi	r19, 0x10	; 16
     62a:	83 2e       	mov	r8, r19
     62c:	91 2c       	mov	r9, r1
     62e:	e1 2c       	mov	r14, r1
     630:	40 e1       	ldi	r20, 0x10	; 16
     632:	f4 2e       	mov	r15, r20
     634:	88 37       	cpi	r24, 0x78	; 120
     636:	91 f7       	brne	.-28     	; 0x61c <cprintf+0x68>
     638:	f8 01       	movw	r30, r16
     63a:	c0 80       	ld	r12, Z
     63c:	d1 80       	ldd	r13, Z+1	; 0x01
     63e:	0e 5f       	subi	r16, 0xFE	; 254
     640:	1f 4f       	sbci	r17, 0xFF	; 255
     642:	84 36       	cpi	r24, 0x64	; 100
     644:	59 f4       	brne	.+22     	; 0x65c <cprintf+0xa8>
     646:	d7 fe       	sbrs	r13, 7
     648:	06 c0       	rjmp	.+12     	; 0x656 <cprintf+0xa2>
     64a:	d1 94       	neg	r13
     64c:	c1 94       	neg	r12
     64e:	d1 08       	sbc	r13, r1
     650:	8d e2       	ldi	r24, 0x2D	; 45
     652:	0e 94 1c 02 	call	0x438	; 0x438 <cputchar>
     656:	ce 14       	cp	r12, r14
     658:	df 04       	cpc	r13, r15
     65a:	48 f1       	brcs	.+82     	; 0x6ae <cprintf+0xfa>
     65c:	c6 01       	movw	r24, r12
     65e:	b7 01       	movw	r22, r14
     660:	0e 94 97 08 	call	0x112e	; 0x112e <__udivmodhi4>
     664:	2c 01       	movw	r4, r24
     666:	68 5f       	subi	r22, 0xF8	; 248
     668:	7d 4f       	sbci	r23, 0xFD	; 253
     66a:	fb 01       	movw	r30, r22
     66c:	80 81       	ld	r24, Z
     66e:	0e 94 1c 02 	call	0x438	; 0x438 <cputchar>
     672:	62 01       	movw	r12, r4
     674:	c7 01       	movw	r24, r14
     676:	b4 01       	movw	r22, r8
     678:	0e 94 97 08 	call	0x112e	; 0x112e <__udivmodhi4>
     67c:	7b 01       	movw	r14, r22
     67e:	67 2b       	or	r22, r23
     680:	69 f7       	brne	.-38     	; 0x65c <cprintf+0xa8>
     682:	ce cf       	rjmp	.-100    	; 0x620 <cprintf+0x6c>
     684:	f8 01       	movw	r30, r16
     686:	e0 80       	ld	r14, Z
     688:	f1 80       	ldd	r15, Z+1	; 0x01
     68a:	0e 5f       	subi	r16, 0xFE	; 254
     68c:	1f 4f       	sbci	r17, 0xFF	; 255
     68e:	f7 01       	movw	r30, r14
     690:	81 91       	ld	r24, Z+
     692:	7f 01       	movw	r14, r30
     694:	88 23       	and	r24, r24
     696:	21 f2       	breq	.-120    	; 0x620 <cprintf+0x6c>
     698:	0e 94 1c 02 	call	0x438	; 0x438 <cputchar>
     69c:	f8 cf       	rjmp	.-16     	; 0x68e <cprintf+0xda>
     69e:	9a e0       	ldi	r25, 0x0A	; 10
     6a0:	89 2e       	mov	r8, r25
     6a2:	91 2c       	mov	r9, r1
     6a4:	20 e1       	ldi	r18, 0x10	; 16
     6a6:	e2 2e       	mov	r14, r18
     6a8:	27 e2       	ldi	r18, 0x27	; 39
     6aa:	f2 2e       	mov	r15, r18
     6ac:	c5 cf       	rjmp	.-118    	; 0x638 <cprintf+0x84>
     6ae:	c7 01       	movw	r24, r14
     6b0:	b3 01       	movw	r22, r6
     6b2:	0e 94 97 08 	call	0x112e	; 0x112e <__udivmodhi4>
     6b6:	7b 01       	movw	r14, r22
     6b8:	62 30       	cpi	r22, 0x02	; 2
     6ba:	71 05       	cpc	r23, r1
     6bc:	60 f6       	brcc	.-104    	; 0x656 <cprintf+0xa2>
     6be:	c6 01       	movw	r24, r12
     6c0:	0e 94 97 08 	call	0x112e	; 0x112e <__udivmodhi4>
     6c4:	fb 01       	movw	r30, r22
     6c6:	e8 5f       	subi	r30, 0xF8	; 248
     6c8:	fd 4f       	sbci	r31, 0xFD	; 253
     6ca:	80 81       	ld	r24, Z
     6cc:	a7 cf       	rjmp	.-178    	; 0x61c <cprintf+0x68>
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	ff 90       	pop	r15
     6dc:	ef 90       	pop	r14
     6de:	df 90       	pop	r13
     6e0:	cf 90       	pop	r12
     6e2:	bf 90       	pop	r11
     6e4:	af 90       	pop	r10
     6e6:	9f 90       	pop	r9
     6e8:	8f 90       	pop	r8
     6ea:	7f 90       	pop	r7
     6ec:	6f 90       	pop	r6
     6ee:	5f 90       	pop	r5
     6f0:	4f 90       	pop	r4
     6f2:	08 95       	ret

000006f4 <OSStartHighRdy>:
     6f4:	00 91 28 04 	lds	r16, 0x0428	; 0x800428 <OSRunning>
     6f8:	03 95       	inc	r16
     6fa:	00 93 28 04 	sts	0x0428, r16	; 0x800428 <OSRunning>
     6fe:	e0 91 38 04 	lds	r30, 0x0438	; 0x800438 <OSTCBHighRdy>
     702:	f0 91 39 04 	lds	r31, 0x0439	; 0x800439 <OSTCBHighRdy+0x1>
     706:	c1 91       	ld	r28, Z+
     708:	cd bf       	out	0x3d, r28	; 61
     70a:	d1 91       	ld	r29, Z+
     70c:	de bf       	out	0x3e, r29	; 62
     70e:	0f 91       	pop	r16
     710:	0f bf       	out	0x3f, r16	; 63
     712:	ff 91       	pop	r31
     714:	ef 91       	pop	r30
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	bf 91       	pop	r27
     71c:	af 91       	pop	r26
     71e:	9f 91       	pop	r25
     720:	8f 91       	pop	r24
     722:	7f 91       	pop	r23
     724:	6f 91       	pop	r22
     726:	5f 91       	pop	r21
     728:	4f 91       	pop	r20
     72a:	3f 91       	pop	r19
     72c:	2f 91       	pop	r18
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	df 90       	pop	r13
     738:	cf 90       	pop	r12
     73a:	bf 90       	pop	r11
     73c:	af 90       	pop	r10
     73e:	9f 90       	pop	r9
     740:	8f 90       	pop	r8
     742:	7f 90       	pop	r7
     744:	6f 90       	pop	r6
     746:	5f 90       	pop	r5
     748:	4f 90       	pop	r4
     74a:	3f 90       	pop	r3
     74c:	2f 90       	pop	r2
     74e:	1f 90       	pop	r1
     750:	0f 90       	pop	r0
     752:	08 95       	ret

00000754 <OSCtxSw>:
     754:	0f 92       	push	r0
     756:	1f 92       	push	r1
     758:	2f 92       	push	r2
     75a:	3f 92       	push	r3
     75c:	4f 92       	push	r4
     75e:	5f 92       	push	r5
     760:	6f 92       	push	r6
     762:	7f 92       	push	r7
     764:	8f 92       	push	r8
     766:	9f 92       	push	r9
     768:	af 92       	push	r10
     76a:	bf 92       	push	r11
     76c:	cf 92       	push	r12
     76e:	df 92       	push	r13
     770:	ef 92       	push	r14
     772:	ff 92       	push	r15
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	2f 93       	push	r18
     77a:	3f 93       	push	r19
     77c:	4f 93       	push	r20
     77e:	5f 93       	push	r21
     780:	6f 93       	push	r22
     782:	7f 93       	push	r23
     784:	8f 93       	push	r24
     786:	9f 93       	push	r25
     788:	af 93       	push	r26
     78a:	bf 93       	push	r27
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	ef 93       	push	r30
     792:	ff 93       	push	r31
     794:	0f b7       	in	r16, 0x3f	; 63
     796:	0f 93       	push	r16
     798:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <OSTCBCur>
     79c:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <OSTCBCur+0x1>
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	c1 93       	st	Z+, r28
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	d1 93       	st	Z+, r29
     7a8:	00 91 2d 04 	lds	r16, 0x042D	; 0x80042d <OSPrioHighRdy>
     7ac:	00 93 2e 04 	sts	0x042E, r16	; 0x80042e <OSPrioCur>
     7b0:	e0 91 38 04 	lds	r30, 0x0438	; 0x800438 <OSTCBHighRdy>
     7b4:	f0 91 39 04 	lds	r31, 0x0439	; 0x800439 <OSTCBHighRdy+0x1>
     7b8:	e0 93 40 04 	sts	0x0440, r30	; 0x800440 <OSTCBCur>
     7bc:	f0 93 41 04 	sts	0x0441, r31	; 0x800441 <OSTCBCur+0x1>
     7c0:	c1 91       	ld	r28, Z+
     7c2:	cd bf       	out	0x3d, r28	; 61
     7c4:	d1 91       	ld	r29, Z+
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	0f 91       	pop	r16
     7ca:	0f bf       	out	0x3f, r16	; 63
     7cc:	ff 91       	pop	r31
     7ce:	ef 91       	pop	r30
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	bf 91       	pop	r27
     7d6:	af 91       	pop	r26
     7d8:	9f 91       	pop	r25
     7da:	8f 91       	pop	r24
     7dc:	7f 91       	pop	r23
     7de:	6f 91       	pop	r22
     7e0:	5f 91       	pop	r21
     7e2:	4f 91       	pop	r20
     7e4:	3f 91       	pop	r19
     7e6:	2f 91       	pop	r18
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	ff 90       	pop	r15
     7ee:	ef 90       	pop	r14
     7f0:	df 90       	pop	r13
     7f2:	cf 90       	pop	r12
     7f4:	bf 90       	pop	r11
     7f6:	af 90       	pop	r10
     7f8:	9f 90       	pop	r9
     7fa:	8f 90       	pop	r8
     7fc:	7f 90       	pop	r7
     7fe:	6f 90       	pop	r6
     800:	5f 90       	pop	r5
     802:	4f 90       	pop	r4
     804:	3f 90       	pop	r3
     806:	2f 90       	pop	r2
     808:	1f 90       	pop	r1
     80a:	0f 90       	pop	r0
     80c:	08 95       	ret

0000080e <OSIntCtxSw>:
     80e:	00 91 2d 04 	lds	r16, 0x042D	; 0x80042d <OSPrioHighRdy>
     812:	00 93 2e 04 	sts	0x042E, r16	; 0x80042e <OSPrioCur>
     816:	e0 91 38 04 	lds	r30, 0x0438	; 0x800438 <OSTCBHighRdy>
     81a:	f0 91 39 04 	lds	r31, 0x0439	; 0x800439 <OSTCBHighRdy+0x1>
     81e:	e0 93 40 04 	sts	0x0440, r30	; 0x800440 <OSTCBCur>
     822:	f0 93 41 04 	sts	0x0441, r31	; 0x800441 <OSTCBCur+0x1>
     826:	c1 91       	ld	r28, Z+
     828:	cd bf       	out	0x3d, r28	; 61
     82a:	d1 91       	ld	r29, Z+
     82c:	de bf       	out	0x3e, r29	; 62
     82e:	0f 91       	pop	r16
     830:	0f bf       	out	0x3f, r16	; 63
     832:	ff 91       	pop	r31
     834:	ef 91       	pop	r30
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	bf 91       	pop	r27
     83c:	af 91       	pop	r26
     83e:	9f 91       	pop	r25
     840:	8f 91       	pop	r24
     842:	7f 91       	pop	r23
     844:	6f 91       	pop	r22
     846:	5f 91       	pop	r21
     848:	4f 91       	pop	r20
     84a:	3f 91       	pop	r19
     84c:	2f 91       	pop	r18
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	ff 90       	pop	r15
     854:	ef 90       	pop	r14
     856:	df 90       	pop	r13
     858:	cf 90       	pop	r12
     85a:	bf 90       	pop	r11
     85c:	af 90       	pop	r10
     85e:	9f 90       	pop	r9
     860:	8f 90       	pop	r8
     862:	7f 90       	pop	r7
     864:	6f 90       	pop	r6
     866:	5f 90       	pop	r5
     868:	4f 90       	pop	r4
     86a:	3f 90       	pop	r3
     86c:	2f 90       	pop	r2
     86e:	1f 90       	pop	r1
     870:	0f 90       	pop	r0
     872:	08 95       	ret

00000874 <OSTickISR>:
     874:	0f 92       	push	r0
     876:	1f 92       	push	r1
     878:	2f 92       	push	r2
     87a:	3f 92       	push	r3
     87c:	4f 92       	push	r4
     87e:	5f 92       	push	r5
     880:	6f 92       	push	r6
     882:	7f 92       	push	r7
     884:	8f 92       	push	r8
     886:	9f 92       	push	r9
     888:	af 92       	push	r10
     88a:	bf 92       	push	r11
     88c:	cf 92       	push	r12
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	2f 93       	push	r18
     89a:	3f 93       	push	r19
     89c:	4f 93       	push	r20
     89e:	5f 93       	push	r21
     8a0:	6f 93       	push	r22
     8a2:	7f 93       	push	r23
     8a4:	8f 93       	push	r24
     8a6:	9f 93       	push	r25
     8a8:	af 93       	push	r26
     8aa:	bf 93       	push	r27
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	ef 93       	push	r30
     8b2:	ff 93       	push	r31
     8b4:	0f b7       	in	r16, 0x3f	; 63
     8b6:	00 68       	ori	r16, 0x80	; 128
     8b8:	0f 93       	push	r16
     8ba:	00 91 3f 04 	lds	r16, 0x043F	; 0x80043f <OSIntNesting>
     8be:	03 95       	inc	r16
     8c0:	00 93 3f 04 	sts	0x043F, r16	; 0x80043f <OSIntNesting>
     8c4:	01 30       	cpi	r16, 0x01	; 1
     8c6:	41 f4       	brne	.+16     	; 0x8d8 <_not_first_int>
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
     8cc:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <OSTCBCur>
     8d0:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <OSTCBCur+0x1>
     8d4:	c1 93       	st	Z+, r28
     8d6:	d1 93       	st	Z+, r29

000008d8 <_not_first_int>:
     8d8:	04 e6       	ldi	r16, 0x64	; 100
     8da:	06 bd       	out	0x26, r16	; 38
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	1f 2e       	mov	r1, r31
     8e0:	78 94       	sei
     8e2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <OSTimeTick>
     8e6:	00 00       	nop
     8e8:	0e 94 10 05 	call	0xa20	; 0xa20 <OSIntExit>
     8ec:	0f 91       	pop	r16
     8ee:	0f bf       	out	0x3f, r16	; 63
     8f0:	ff 91       	pop	r31
     8f2:	ef 91       	pop	r30
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	bf 91       	pop	r27
     8fa:	af 91       	pop	r26
     8fc:	9f 91       	pop	r25
     8fe:	8f 91       	pop	r24
     900:	7f 91       	pop	r23
     902:	6f 91       	pop	r22
     904:	5f 91       	pop	r21
     906:	4f 91       	pop	r20
     908:	3f 91       	pop	r19
     90a:	2f 91       	pop	r18
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	df 90       	pop	r13
     916:	cf 90       	pop	r12
     918:	bf 90       	pop	r11
     91a:	af 90       	pop	r10
     91c:	9f 90       	pop	r9
     91e:	8f 90       	pop	r8
     920:	7f 90       	pop	r7
     922:	6f 90       	pop	r6
     924:	5f 90       	pop	r5
     926:	4f 90       	pop	r4
     928:	3f 90       	pop	r3
     92a:	2f 90       	pop	r2
     92c:	1f 90       	pop	r1
     92e:	0f 90       	pop	r0
     930:	08 95       	ret

00000932 <OSTaskStkInit>:
     932:	fa 01       	movw	r30, r20
     934:	80 83       	st	Z, r24
     936:	31 97       	sbiw	r30, 0x01	; 1
     938:	90 83       	st	Z, r25
     93a:	31 97       	sbiw	r30, 0x01	; 1
     93c:	10 82       	st	Z, r1
     93e:	31 97       	sbiw	r30, 0x01	; 1
     940:	10 82       	st	Z, r1
     942:	31 97       	sbiw	r30, 0x01	; 1
     944:	10 82       	st	Z, r1
     946:	31 97       	sbiw	r30, 0x01	; 1
     948:	10 82       	st	Z, r1
     94a:	31 97       	sbiw	r30, 0x01	; 1
     94c:	10 82       	st	Z, r1
     94e:	31 97       	sbiw	r30, 0x01	; 1
     950:	10 82       	st	Z, r1
     952:	31 97       	sbiw	r30, 0x01	; 1
     954:	10 82       	st	Z, r1
     956:	31 97       	sbiw	r30, 0x01	; 1
     958:	10 82       	st	Z, r1
     95a:	31 97       	sbiw	r30, 0x01	; 1
     95c:	10 82       	st	Z, r1
     95e:	31 97       	sbiw	r30, 0x01	; 1
     960:	10 82       	st	Z, r1
     962:	31 97       	sbiw	r30, 0x01	; 1
     964:	10 82       	st	Z, r1
     966:	31 97       	sbiw	r30, 0x01	; 1
     968:	10 82       	st	Z, r1
     96a:	31 97       	sbiw	r30, 0x01	; 1
     96c:	10 82       	st	Z, r1
     96e:	31 97       	sbiw	r30, 0x01	; 1
     970:	10 82       	st	Z, r1
     972:	31 97       	sbiw	r30, 0x01	; 1
     974:	10 82       	st	Z, r1
     976:	31 97       	sbiw	r30, 0x01	; 1
     978:	10 82       	st	Z, r1
     97a:	31 97       	sbiw	r30, 0x01	; 1
     97c:	10 82       	st	Z, r1
     97e:	31 97       	sbiw	r30, 0x01	; 1
     980:	10 82       	st	Z, r1
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	10 82       	st	Z, r1
     986:	31 97       	sbiw	r30, 0x01	; 1
     988:	10 82       	st	Z, r1
     98a:	31 97       	sbiw	r30, 0x01	; 1
     98c:	10 82       	st	Z, r1
     98e:	31 97       	sbiw	r30, 0x01	; 1
     990:	10 82       	st	Z, r1
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	10 82       	st	Z, r1
     996:	31 97       	sbiw	r30, 0x01	; 1
     998:	10 82       	st	Z, r1
     99a:	31 97       	sbiw	r30, 0x01	; 1
     99c:	60 83       	st	Z, r22
     99e:	31 97       	sbiw	r30, 0x01	; 1
     9a0:	70 83       	st	Z, r23
     9a2:	31 97       	sbiw	r30, 0x01	; 1
     9a4:	10 82       	st	Z, r1
     9a6:	31 97       	sbiw	r30, 0x01	; 1
     9a8:	10 82       	st	Z, r1
     9aa:	31 97       	sbiw	r30, 0x01	; 1
     9ac:	10 82       	st	Z, r1
     9ae:	31 97       	sbiw	r30, 0x01	; 1
     9b0:	10 82       	st	Z, r1
     9b2:	31 97       	sbiw	r30, 0x01	; 1
     9b4:	10 82       	st	Z, r1
     9b6:	31 97       	sbiw	r30, 0x01	; 1
     9b8:	10 82       	st	Z, r1
     9ba:	31 97       	sbiw	r30, 0x01	; 1
     9bc:	80 e8       	ldi	r24, 0x80	; 128
     9be:	80 83       	st	Z, r24
     9c0:	ca 01       	movw	r24, r20
     9c2:	83 97       	sbiw	r24, 0x23	; 35
     9c4:	08 95       	ret

000009c6 <OSTaskCreateHook>:
     9c6:	08 95       	ret

000009c8 <OSTaskDelHook>:
     9c8:	08 95       	ret

000009ca <OSTaskSwHook>:
     9ca:	08 95       	ret

000009cc <OSTaskStatHook>:
     9cc:	08 95       	ret

000009ce <OSTimeTickHook>:
     9ce:	08 95       	ret

000009d0 <OSInitHookBegin>:
     9d0:	08 95       	ret

000009d2 <OSInitHookEnd>:
     9d2:	08 95       	ret

000009d4 <OSTaskIdleHook>:
     9d4:	08 95       	ret

000009d6 <OSTCBInitHook>:
     9d6:	08 95       	ret

000009d8 <OS_TaskIdle>:
     9d8:	f8 94       	cli
     9da:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <OSIdleCtr>
     9de:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <OSIdleCtr+0x1>
     9e2:	a0 91 2b 04 	lds	r26, 0x042B	; 0x80042b <OSIdleCtr+0x2>
     9e6:	b0 91 2c 04 	lds	r27, 0x042C	; 0x80042c <OSIdleCtr+0x3>
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	a1 1d       	adc	r26, r1
     9ee:	b1 1d       	adc	r27, r1
     9f0:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <OSIdleCtr>
     9f4:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <OSIdleCtr+0x1>
     9f8:	a0 93 2b 04 	sts	0x042B, r26	; 0x80042b <OSIdleCtr+0x2>
     9fc:	b0 93 2c 04 	sts	0x042C, r27	; 0x80042c <OSIdleCtr+0x3>
     a00:	78 94       	sei
     a02:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <OSTaskIdleHook>
     a06:	e8 cf       	rjmp	.-48     	; 0x9d8 <OS_TaskIdle>

00000a08 <OSIntEnter>:
     a08:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	39 f4       	brne	.+14     	; 0xa1e <OSIntEnter+0x16>
     a10:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <OSIntNesting>
     a14:	8f 3f       	cpi	r24, 0xFF	; 255
     a16:	19 f0       	breq	.+6      	; 0xa1e <OSIntEnter+0x16>
     a18:	8f 5f       	subi	r24, 0xFF	; 255
     a1a:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <OSIntNesting>
     a1e:	08 95       	ret

00000a20 <OSIntExit>:
     a20:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     a24:	81 30       	cpi	r24, 0x01	; 1
     a26:	09 f0       	breq	.+2      	; 0xa2a <OSIntExit+0xa>
     a28:	4c c0       	rjmp	.+152    	; 0xac2 <OSIntExit+0xa2>
     a2a:	f8 94       	cli
     a2c:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <OSIntNesting>
     a30:	88 23       	and	r24, r24
     a32:	19 f0       	breq	.+6      	; 0xa3a <OSIntExit+0x1a>
     a34:	81 50       	subi	r24, 0x01	; 1
     a36:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <OSIntNesting>
     a3a:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <OSIntNesting>
     a3e:	81 11       	cpse	r24, r1
     a40:	3f c0       	rjmp	.+126    	; 0xac0 <OSIntExit+0xa0>
     a42:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <OSLockNesting>
     a46:	81 11       	cpse	r24, r1
     a48:	3b c0       	rjmp	.+118    	; 0xac0 <OSIntExit+0xa0>
     a4a:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <OSRdyGrp>
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	e0 50       	subi	r30, 0x00	; 0
     a52:	ff 4f       	sbci	r31, 0xFF	; 255
     a54:	e0 81       	ld	r30, Z
     a56:	e0 93 3e 04 	sts	0x043E, r30	; 0x80043e <OSIntExitY>
     a5a:	ae 2f       	mov	r26, r30
     a5c:	b0 e0       	ldi	r27, 0x00	; 0
     a5e:	a5 5c       	subi	r26, 0xC5	; 197
     a60:	bb 4f       	sbci	r27, 0xFB	; 251
     a62:	ac 91       	ld	r26, X
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	a0 50       	subi	r26, 0x00	; 0
     a68:	bf 4f       	sbci	r27, 0xFF	; 255
     a6a:	ee 0f       	add	r30, r30
     a6c:	ee 0f       	add	r30, r30
     a6e:	ee 0f       	add	r30, r30
     a70:	8c 91       	ld	r24, X
     a72:	e8 0f       	add	r30, r24
     a74:	e0 93 2d 04 	sts	0x042D, r30	; 0x80042d <OSPrioHighRdy>
     a78:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <OSPrioCur>
     a7c:	e8 17       	cp	r30, r24
     a7e:	01 f1       	breq	.+64     	; 0xac0 <OSIntExit+0xa0>
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	ee 0f       	add	r30, r30
     a84:	ff 1f       	adc	r31, r31
     a86:	ef 57       	subi	r30, 0x7F	; 127
     a88:	fa 4f       	sbci	r31, 0xFA	; 250
     a8a:	80 81       	ld	r24, Z
     a8c:	91 81       	ldd	r25, Z+1	; 0x01
     a8e:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <OSTCBHighRdy+0x1>
     a92:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <OSTCBHighRdy>
     a96:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <OSCtxSwCtr>
     a9a:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <OSCtxSwCtr+0x1>
     a9e:	a0 91 33 04 	lds	r26, 0x0433	; 0x800433 <OSCtxSwCtr+0x2>
     aa2:	b0 91 34 04 	lds	r27, 0x0434	; 0x800434 <OSCtxSwCtr+0x3>
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	a1 1d       	adc	r26, r1
     aaa:	b1 1d       	adc	r27, r1
     aac:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <OSCtxSwCtr>
     ab0:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <OSCtxSwCtr+0x1>
     ab4:	a0 93 33 04 	sts	0x0433, r26	; 0x800433 <OSCtxSwCtr+0x2>
     ab8:	b0 93 34 04 	sts	0x0434, r27	; 0x800434 <OSCtxSwCtr+0x3>
     abc:	0e 94 07 04 	call	0x80e	; 0x80e <OSIntCtxSw>
     ac0:	78 94       	sei
     ac2:	08 95       	ret

00000ac4 <OSSchedLock>:
     ac4:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     ac8:	81 30       	cpi	r24, 0x01	; 1
     aca:	49 f4       	brne	.+18     	; 0xade <OSSchedLock+0x1a>
     acc:	f8 94       	cli
     ace:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <OSLockNesting>
     ad2:	8f 3f       	cpi	r24, 0xFF	; 255
     ad4:	19 f0       	breq	.+6      	; 0xadc <OSSchedLock+0x18>
     ad6:	8f 5f       	subi	r24, 0xFF	; 255
     ad8:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <OSLockNesting>
     adc:	78 94       	sei
     ade:	08 95       	ret

00000ae0 <OSStart>:
     ae0:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     ae4:	81 11       	cpse	r24, r1
     ae6:	28 c0       	rjmp	.+80     	; 0xb38 <OSStart+0x58>
     ae8:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <OSRdyGrp>
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	e0 50       	subi	r30, 0x00	; 0
     af0:	ff 4f       	sbci	r31, 0xFF	; 255
     af2:	e0 81       	ld	r30, Z
     af4:	ae 2f       	mov	r26, r30
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	a5 5c       	subi	r26, 0xC5	; 197
     afa:	bb 4f       	sbci	r27, 0xFB	; 251
     afc:	ac 91       	ld	r26, X
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	a0 50       	subi	r26, 0x00	; 0
     b02:	bf 4f       	sbci	r27, 0xFF	; 255
     b04:	ee 0f       	add	r30, r30
     b06:	ee 0f       	add	r30, r30
     b08:	ee 0f       	add	r30, r30
     b0a:	8c 91       	ld	r24, X
     b0c:	e8 0f       	add	r30, r24
     b0e:	e0 93 2d 04 	sts	0x042D, r30	; 0x80042d <OSPrioHighRdy>
     b12:	e0 93 2e 04 	sts	0x042E, r30	; 0x80042e <OSPrioCur>
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	ee 0f       	add	r30, r30
     b1a:	ff 1f       	adc	r31, r31
     b1c:	ef 57       	subi	r30, 0x7F	; 127
     b1e:	fa 4f       	sbci	r31, 0xFA	; 250
     b20:	80 81       	ld	r24, Z
     b22:	91 81       	ldd	r25, Z+1	; 0x01
     b24:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <OSTCBHighRdy+0x1>
     b28:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <OSTCBHighRdy>
     b2c:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <OSTCBCur+0x1>
     b30:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <OSTCBCur>
     b34:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <OSStartHighRdy>
     b38:	08 95       	ret

00000b3a <OSTimeTick>:
     b3a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <OSTimeTickHook>
     b3e:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     b42:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <OSTCBList>
     b46:	f0 91 30 04 	lds	r31, 0x0430	; 0x800430 <OSTCBList+0x1>
     b4a:	21 e0       	ldi	r18, 0x01	; 1
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	81 30       	cpi	r24, 0x01	; 1
     b50:	01 f1       	breq	.+64     	; 0xb92 <OSTimeTick+0x58>
     b52:	08 95       	ret
     b54:	f8 94       	cli
     b56:	86 81       	ldd	r24, Z+6	; 0x06
     b58:	97 81       	ldd	r25, Z+7	; 0x07
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	b1 f0       	breq	.+44     	; 0xb8a <OSTimeTick+0x50>
     b5e:	01 97       	sbiw	r24, 0x01	; 1
     b60:	97 83       	std	Z+7, r25	; 0x07
     b62:	86 83       	std	Z+6, r24	; 0x06
     b64:	89 2b       	or	r24, r25
     b66:	89 f4       	brne	.+34     	; 0xb8a <OSTimeTick+0x50>
     b68:	80 85       	ldd	r24, Z+8	; 0x08
     b6a:	83 fd       	sbrc	r24, 3
     b6c:	16 c0       	rjmp	.+44     	; 0xb9a <OSTimeTick+0x60>
     b6e:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <OSRdyGrp>
     b72:	95 85       	ldd	r25, Z+13	; 0x0d
     b74:	89 2b       	or	r24, r25
     b76:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <OSRdyGrp>
     b7a:	a3 85       	ldd	r26, Z+11	; 0x0b
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	a5 5c       	subi	r26, 0xC5	; 197
     b80:	bb 4f       	sbci	r27, 0xFB	; 251
     b82:	8c 91       	ld	r24, X
     b84:	94 85       	ldd	r25, Z+12	; 0x0c
     b86:	89 2b       	or	r24, r25
     b88:	8c 93       	st	X, r24
     b8a:	02 80       	ldd	r0, Z+2	; 0x02
     b8c:	f3 81       	ldd	r31, Z+3	; 0x03
     b8e:	e0 2d       	mov	r30, r0
     b90:	78 94       	sei
     b92:	81 85       	ldd	r24, Z+9	; 0x09
     b94:	80 31       	cpi	r24, 0x10	; 16
     b96:	f1 f6       	brne	.-68     	; 0xb54 <OSTimeTick+0x1a>
     b98:	dc cf       	rjmp	.-72     	; 0xb52 <OSTimeTick+0x18>
     b9a:	37 83       	std	Z+7, r19	; 0x07
     b9c:	26 83       	std	Z+6, r18	; 0x06
     b9e:	f5 cf       	rjmp	.-22     	; 0xb8a <OSTimeTick+0x50>

00000ba0 <OSVersion>:
     ba0:	8c ef       	ldi	r24, 0xFC	; 252
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	08 95       	ret

00000ba6 <OS_Dummy>:
     ba6:	08 95       	ret

00000ba8 <OS_Sched>:
     ba8:	f8 94       	cli
     baa:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <OSIntNesting>
     bae:	81 11       	cpse	r24, r1
     bb0:	3d c0       	rjmp	.+122    	; 0xc2c <OS_Sched+0x84>
     bb2:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <OSLockNesting>
     bb6:	81 11       	cpse	r24, r1
     bb8:	39 c0       	rjmp	.+114    	; 0xc2c <OS_Sched+0x84>
     bba:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <OSRdyGrp>
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	e0 50       	subi	r30, 0x00	; 0
     bc2:	ff 4f       	sbci	r31, 0xFF	; 255
     bc4:	e0 81       	ld	r30, Z
     bc6:	ae 2f       	mov	r26, r30
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	a5 5c       	subi	r26, 0xC5	; 197
     bcc:	bb 4f       	sbci	r27, 0xFB	; 251
     bce:	ac 91       	ld	r26, X
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	a0 50       	subi	r26, 0x00	; 0
     bd4:	bf 4f       	sbci	r27, 0xFF	; 255
     bd6:	ee 0f       	add	r30, r30
     bd8:	ee 0f       	add	r30, r30
     bda:	ee 0f       	add	r30, r30
     bdc:	8c 91       	ld	r24, X
     bde:	e8 0f       	add	r30, r24
     be0:	e0 93 2d 04 	sts	0x042D, r30	; 0x80042d <OSPrioHighRdy>
     be4:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <OSPrioCur>
     be8:	e8 17       	cp	r30, r24
     bea:	01 f1       	breq	.+64     	; 0xc2c <OS_Sched+0x84>
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	ee 0f       	add	r30, r30
     bf0:	ff 1f       	adc	r31, r31
     bf2:	ef 57       	subi	r30, 0x7F	; 127
     bf4:	fa 4f       	sbci	r31, 0xFA	; 250
     bf6:	80 81       	ld	r24, Z
     bf8:	91 81       	ldd	r25, Z+1	; 0x01
     bfa:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <OSTCBHighRdy+0x1>
     bfe:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <OSTCBHighRdy>
     c02:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <OSCtxSwCtr>
     c06:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <OSCtxSwCtr+0x1>
     c0a:	a0 91 33 04 	lds	r26, 0x0433	; 0x800433 <OSCtxSwCtr+0x2>
     c0e:	b0 91 34 04 	lds	r27, 0x0434	; 0x800434 <OSCtxSwCtr+0x3>
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	a1 1d       	adc	r26, r1
     c16:	b1 1d       	adc	r27, r1
     c18:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <OSCtxSwCtr>
     c1c:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <OSCtxSwCtr+0x1>
     c20:	a0 93 33 04 	sts	0x0433, r26	; 0x800433 <OSCtxSwCtr+0x2>
     c24:	b0 93 34 04 	sts	0x0434, r27	; 0x800434 <OSCtxSwCtr+0x3>
     c28:	0e 94 aa 03 	call	0x754	; 0x754 <OSCtxSw>
     c2c:	78 94       	sei
     c2e:	08 95       	ret

00000c30 <OSSchedUnlock>:
     c30:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     c34:	81 30       	cpi	r24, 0x01	; 1
     c36:	91 f4       	brne	.+36     	; 0xc5c <OSSchedUnlock+0x2c>
     c38:	f8 94       	cli
     c3a:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <OSLockNesting>
     c3e:	88 23       	and	r24, r24
     c40:	61 f0       	breq	.+24     	; 0xc5a <OSSchedUnlock+0x2a>
     c42:	81 50       	subi	r24, 0x01	; 1
     c44:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <OSLockNesting>
     c48:	81 11       	cpse	r24, r1
     c4a:	07 c0       	rjmp	.+14     	; 0xc5a <OSSchedUnlock+0x2a>
     c4c:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <OSIntNesting>
     c50:	81 11       	cpse	r24, r1
     c52:	03 c0       	rjmp	.+6      	; 0xc5a <OSSchedUnlock+0x2a>
     c54:	78 94       	sei
     c56:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <OS_Sched>
     c5a:	78 94       	sei
     c5c:	08 95       	ret

00000c5e <OSTimeDly.part.0>:
     c5e:	ac 01       	movw	r20, r24
     c60:	f8 94       	cli
     c62:	a0 91 40 04 	lds	r26, 0x0440	; 0x800440 <OSTCBCur>
     c66:	b0 91 41 04 	lds	r27, 0x0441	; 0x800441 <OSTCBCur+0x1>
     c6a:	1b 96       	adiw	r26, 0x0b	; 11
     c6c:	ec 91       	ld	r30, X
     c6e:	1b 97       	sbiw	r26, 0x0b	; 11
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	1c 96       	adiw	r26, 0x0c	; 12
     c74:	9c 91       	ld	r25, X
     c76:	1c 97       	sbiw	r26, 0x0c	; 12
     c78:	90 95       	com	r25
     c7a:	e5 5c       	subi	r30, 0xC5	; 197
     c7c:	fb 4f       	sbci	r31, 0xFB	; 251
     c7e:	80 81       	ld	r24, Z
     c80:	98 23       	and	r25, r24
     c82:	90 83       	st	Z, r25
     c84:	91 11       	cpse	r25, r1
     c86:	0a c0       	rjmp	.+20     	; 0xc9c <OSTimeDly.part.0+0x3e>
     c88:	1d 96       	adiw	r26, 0x0d	; 13
     c8a:	9c 91       	ld	r25, X
     c8c:	1d 97       	sbiw	r26, 0x0d	; 13
     c8e:	29 2f       	mov	r18, r25
     c90:	20 95       	com	r18
     c92:	90 91 3a 04 	lds	r25, 0x043A	; 0x80043a <OSRdyGrp>
     c96:	92 23       	and	r25, r18
     c98:	90 93 3a 04 	sts	0x043A, r25	; 0x80043a <OSRdyGrp>
     c9c:	17 96       	adiw	r26, 0x07	; 7
     c9e:	5c 93       	st	X, r21
     ca0:	4e 93       	st	-X, r20
     ca2:	16 97       	sbiw	r26, 0x06	; 6
     ca4:	78 94       	sei
     ca6:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <OS_Sched>

00000caa <OS_TCBInit>:
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	f8 94       	cli
     cb2:	c0 91 35 04 	lds	r28, 0x0435	; 0x800435 <OSTCBFreeList>
     cb6:	d0 91 36 04 	lds	r29, 0x0436	; 0x800436 <OSTCBFreeList+0x1>
     cba:	20 97       	sbiw	r28, 0x00	; 0
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <OS_TCBInit+0x16>
     cbe:	54 c0       	rjmp	.+168    	; 0xd68 <OS_TCBInit+0xbe>
     cc0:	18 2f       	mov	r17, r24
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	9b 81       	ldd	r25, Y+3	; 0x03
     cc6:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <OSTCBFreeList+0x1>
     cca:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <OSTCBFreeList>
     cce:	78 94       	sei
     cd0:	79 83       	std	Y+1, r23	; 0x01
     cd2:	68 83       	st	Y, r22
     cd4:	19 87       	std	Y+9, r17	; 0x09
     cd6:	18 86       	std	Y+8, r1	; 0x08
     cd8:	1f 82       	std	Y+7, r1	; 0x07
     cda:	1e 82       	std	Y+6, r1	; 0x06
     cdc:	1e 86       	std	Y+14, r1	; 0x0e
     cde:	e1 2f       	mov	r30, r17
     ce0:	e6 95       	lsr	r30
     ce2:	e6 95       	lsr	r30
     ce4:	e6 95       	lsr	r30
     ce6:	eb 87       	std	Y+11, r30	; 0x0b
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	e0 50       	subi	r30, 0x00	; 0
     cec:	fe 4f       	sbci	r31, 0xFE	; 254
     cee:	80 81       	ld	r24, Z
     cf0:	8d 87       	std	Y+13, r24	; 0x0d
     cf2:	e1 2f       	mov	r30, r17
     cf4:	e7 70       	andi	r30, 0x07	; 7
     cf6:	ea 87       	std	Y+10, r30	; 0x0a
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	e0 50       	subi	r30, 0x00	; 0
     cfc:	fe 4f       	sbci	r31, 0xFE	; 254
     cfe:	80 81       	ld	r24, Z
     d00:	8c 87       	std	Y+12, r24	; 0x0c
     d02:	ce 01       	movw	r24, r28
     d04:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <OSTCBInitHook>
     d08:	ce 01       	movw	r24, r28
     d0a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <OSTaskCreateHook>
     d0e:	f8 94       	cli
     d10:	e1 2f       	mov	r30, r17
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	ee 0f       	add	r30, r30
     d16:	ff 1f       	adc	r31, r31
     d18:	ef 57       	subi	r30, 0x7F	; 127
     d1a:	fa 4f       	sbci	r31, 0xFA	; 250
     d1c:	d1 83       	std	Z+1, r29	; 0x01
     d1e:	c0 83       	st	Z, r28
     d20:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <OSTCBList>
     d24:	f0 91 30 04 	lds	r31, 0x0430	; 0x800430 <OSTCBList+0x1>
     d28:	fb 83       	std	Y+3, r31	; 0x03
     d2a:	ea 83       	std	Y+2, r30	; 0x02
     d2c:	1d 82       	std	Y+5, r1	; 0x05
     d2e:	1c 82       	std	Y+4, r1	; 0x04
     d30:	30 97       	sbiw	r30, 0x00	; 0
     d32:	11 f0       	breq	.+4      	; 0xd38 <OS_TCBInit+0x8e>
     d34:	d5 83       	std	Z+5, r29	; 0x05
     d36:	c4 83       	std	Z+4, r28	; 0x04
     d38:	d0 93 30 04 	sts	0x0430, r29	; 0x800430 <OSTCBList+0x1>
     d3c:	c0 93 2f 04 	sts	0x042F, r28	; 0x80042f <OSTCBList>
     d40:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <OSRdyGrp>
     d44:	9d 85       	ldd	r25, Y+13	; 0x0d
     d46:	89 2b       	or	r24, r25
     d48:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <OSRdyGrp>
     d4c:	eb 85       	ldd	r30, Y+11	; 0x0b
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	e5 5c       	subi	r30, 0xC5	; 197
     d52:	fb 4f       	sbci	r31, 0xFB	; 251
     d54:	80 81       	ld	r24, Z
     d56:	9c 85       	ldd	r25, Y+12	; 0x0c
     d58:	89 2b       	or	r24, r25
     d5a:	80 83       	st	Z, r24
     d5c:	78 94       	sei
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	1f 91       	pop	r17
     d66:	08 95       	ret
     d68:	78 94       	sei
     d6a:	86 e4       	ldi	r24, 0x46	; 70
     d6c:	f9 cf       	rjmp	.-14     	; 0xd60 <OS_TCBInit+0xb6>

00000d6e <OSTaskCreate>:
     d6e:	9f 92       	push	r9
     d70:	af 92       	push	r10
     d72:	bf 92       	push	r11
     d74:	cf 92       	push	r12
     d76:	df 92       	push	r13
     d78:	ef 92       	push	r14
     d7a:	ff 92       	push	r15
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	f8 94       	cli
     d86:	c2 2f       	mov	r28, r18
     d88:	d0 e0       	ldi	r29, 0x00	; 0
     d8a:	cc 0f       	add	r28, r28
     d8c:	dd 1f       	adc	r29, r29
     d8e:	cf 57       	subi	r28, 0x7F	; 127
     d90:	da 4f       	sbci	r29, 0xFA	; 250
     d92:	e8 81       	ld	r30, Y
     d94:	f9 81       	ldd	r31, Y+1	; 0x01
     d96:	ef 2b       	or	r30, r31
     d98:	09 f0       	breq	.+2      	; 0xd9c <OSTaskCreate+0x2e>
     d9a:	3b c0       	rjmp	.+118    	; 0xe12 <OSTaskCreate+0xa4>
     d9c:	92 2e       	mov	r9, r18
     d9e:	21 e0       	ldi	r18, 0x01	; 1
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	39 83       	std	Y+1, r19	; 0x01
     da4:	28 83       	st	Y, r18
     da6:	78 94       	sei
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	0e 94 99 04 	call	0x932	; 0x932 <OSTaskStkInit>
     db0:	b1 2c       	mov	r11, r1
     db2:	a1 2c       	mov	r10, r1
     db4:	d1 2c       	mov	r13, r1
     db6:	c1 2c       	mov	r12, r1
     db8:	e1 2c       	mov	r14, r1
     dba:	f1 2c       	mov	r15, r1
     dbc:	87 01       	movw	r16, r14
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	bc 01       	movw	r22, r24
     dc8:	89 2d       	mov	r24, r9
     dca:	0e 94 55 06 	call	0xcaa	; 0xcaa <OS_TCBInit>
     dce:	18 2f       	mov	r17, r24
     dd0:	81 11       	cpse	r24, r1
     dd2:	1a c0       	rjmp	.+52     	; 0xe08 <OSTaskCreate+0x9a>
     dd4:	f8 94       	cli
     dd6:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <OSTaskCtr>
     dda:	8f 5f       	subi	r24, 0xFF	; 255
     ddc:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <OSTaskCtr>
     de0:	78 94       	sei
     de2:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <OSRunning>
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	11 f4       	brne	.+4      	; 0xdee <OSTaskCreate+0x80>
     dea:	0e 94 d4 05 	call	0xba8	; 0xba8 <OS_Sched>
     dee:	81 2f       	mov	r24, r17
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	1f 91       	pop	r17
     df6:	0f 91       	pop	r16
     df8:	ff 90       	pop	r15
     dfa:	ef 90       	pop	r14
     dfc:	df 90       	pop	r13
     dfe:	cf 90       	pop	r12
     e00:	bf 90       	pop	r11
     e02:	af 90       	pop	r10
     e04:	9f 90       	pop	r9
     e06:	08 95       	ret
     e08:	f8 94       	cli
     e0a:	19 82       	std	Y+1, r1	; 0x01
     e0c:	18 82       	st	Y, r1
     e0e:	78 94       	sei
     e10:	ee cf       	rjmp	.-36     	; 0xdee <OSTaskCreate+0x80>
     e12:	78 94       	sei
     e14:	18 e2       	ldi	r17, 0x28	; 40
     e16:	eb cf       	rjmp	.-42     	; 0xdee <OSTaskCreate+0x80>

00000e18 <OSInit>:
     e18:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <OSInitHookBegin>
     e1c:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <OSIntNesting>
     e20:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <OSLockNesting>
     e24:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <OSTaskCtr>
     e28:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <OSRunning>
     e2c:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <OSCtxSwCtr>
     e30:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <OSCtxSwCtr+0x1>
     e34:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <OSCtxSwCtr+0x2>
     e38:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <OSCtxSwCtr+0x3>
     e3c:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <OSIdleCtr>
     e40:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <OSIdleCtr+0x1>
     e44:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <OSIdleCtr+0x2>
     e48:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <OSIdleCtr+0x3>
     e4c:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <OSRdyGrp>
     e50:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <OSRdyTbl>
     e54:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <OSRdyTbl+0x1>
     e58:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <OSRdyTbl+0x2>
     e5c:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <OSPrioCur>
     e60:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <OSPrioHighRdy>
     e64:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <OSTCBHighRdy+0x1>
     e68:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <OSTCBHighRdy>
     e6c:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <OSTCBCur+0x1>
     e70:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <OSTCBCur>
     e74:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <OSTCBList+0x1>
     e78:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <OSTCBList>
     e7c:	e1 e8       	ldi	r30, 0x81	; 129
     e7e:	f5 e0       	ldi	r31, 0x05	; 5
     e80:	11 92       	st	Z+, r1
     e82:	11 92       	st	Z+, r1
     e84:	85 e0       	ldi	r24, 0x05	; 5
     e86:	e3 3a       	cpi	r30, 0xA3	; 163
     e88:	f8 07       	cpc	r31, r24
     e8a:	d1 f7       	brne	.-12     	; 0xe80 <OSInit+0x68>
     e8c:	e2 e8       	ldi	r30, 0x82	; 130
     e8e:	f4 e0       	ldi	r31, 0x04	; 4
     e90:	cf 01       	movw	r24, r30
     e92:	0f 96       	adiw	r24, 0x0f	; 15
     e94:	93 83       	std	Z+3, r25	; 0x03
     e96:	82 83       	std	Z+2, r24	; 0x02
     e98:	fc 01       	movw	r30, r24
     e9a:	85 e0       	ldi	r24, 0x05	; 5
     e9c:	e2 37       	cpi	r30, 0x72	; 114
     e9e:	f8 07       	cpc	r31, r24
     ea0:	b9 f7       	brne	.-18     	; 0xe90 <OSInit+0x78>
     ea2:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <OSTCBTbl+0xf3>
     ea6:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <OSTCBTbl+0xf2>
     eaa:	82 e8       	ldi	r24, 0x82	; 130
     eac:	94 e0       	ldi	r25, 0x04	; 4
     eae:	90 93 36 04 	sts	0x0436, r25	; 0x800436 <OSTCBFreeList+0x1>
     eb2:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <OSTCBFreeList>
     eb6:	20 e1       	ldi	r18, 0x10	; 16
     eb8:	41 e8       	ldi	r20, 0x81	; 129
     eba:	54 e0       	ldi	r21, 0x04	; 4
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	8c ee       	ldi	r24, 0xEC	; 236
     ec2:	94 e0       	ldi	r25, 0x04	; 4
     ec4:	0e 94 b7 06 	call	0xd6e	; 0xd6e <OSTaskCreate>
     ec8:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <OSInitHookEnd>

00000ecc <OSTaskDel>:
     ecc:	ff 92       	push	r15
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	f0 90 3f 04 	lds	r15, 0x043F	; 0x80043f <OSIntNesting>
     eda:	f1 10       	cpse	r15, r1
     edc:	76 c0       	rjmp	.+236    	; 0xfca <OSTaskDel+0xfe>
     ede:	f8 94       	cli
     ee0:	8f 3f       	cpi	r24, 0xFF	; 255
     ee2:	29 f4       	brne	.+10     	; 0xeee <OSTaskDel+0x22>
     ee4:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <OSTCBCur>
     ee8:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <OSTCBCur+0x1>
     eec:	81 85       	ldd	r24, Z+9	; 0x09
     eee:	08 2f       	mov	r16, r24
     ef0:	10 e0       	ldi	r17, 0x00	; 0
     ef2:	00 0f       	add	r16, r16
     ef4:	11 1f       	adc	r17, r17
     ef6:	f8 01       	movw	r30, r16
     ef8:	ef 57       	subi	r30, 0x7F	; 127
     efa:	fa 4f       	sbci	r31, 0xFA	; 250
     efc:	c0 81       	ld	r28, Z
     efe:	d1 81       	ldd	r29, Z+1	; 0x01
     f00:	20 97       	sbiw	r28, 0x00	; 0
     f02:	09 f4       	brne	.+2      	; 0xf06 <OSTaskDel+0x3a>
     f04:	5e c0       	rjmp	.+188    	; 0xfc2 <OSTaskDel+0xf6>
     f06:	eb 85       	ldd	r30, Y+11	; 0x0b
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	8c 85       	ldd	r24, Y+12	; 0x0c
     f0c:	80 95       	com	r24
     f0e:	e5 5c       	subi	r30, 0xC5	; 197
     f10:	fb 4f       	sbci	r31, 0xFB	; 251
     f12:	90 81       	ld	r25, Z
     f14:	89 23       	and	r24, r25
     f16:	80 83       	st	Z, r24
     f18:	81 11       	cpse	r24, r1
     f1a:	08 c0       	rjmp	.+16     	; 0xf2c <OSTaskDel+0x60>
     f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f1e:	98 2f       	mov	r25, r24
     f20:	90 95       	com	r25
     f22:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <OSRdyGrp>
     f26:	89 23       	and	r24, r25
     f28:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <OSRdyGrp>
     f2c:	1f 82       	std	Y+7, r1	; 0x07
     f2e:	1e 82       	std	Y+6, r1	; 0x06
     f30:	18 86       	std	Y+8, r1	; 0x08
     f32:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <OSLockNesting>
     f36:	8f 3f       	cpi	r24, 0xFF	; 255
     f38:	19 f0       	breq	.+6      	; 0xf40 <OSTaskDel+0x74>
     f3a:	8f 5f       	subi	r24, 0xFF	; 255
     f3c:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <OSLockNesting>
     f40:	78 94       	sei
     f42:	f8 94       	cli
     f44:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <OSLockNesting>
     f48:	88 23       	and	r24, r24
     f4a:	19 f0       	breq	.+6      	; 0xf52 <OSTaskDel+0x86>
     f4c:	81 50       	subi	r24, 0x01	; 1
     f4e:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <OSLockNesting>
     f52:	ce 01       	movw	r24, r28
     f54:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <OSTaskDelHook>
     f58:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <OSTaskCtr>
     f5c:	81 50       	subi	r24, 0x01	; 1
     f5e:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <OSTaskCtr>
     f62:	f8 01       	movw	r30, r16
     f64:	ef 57       	subi	r30, 0x7F	; 127
     f66:	fa 4f       	sbci	r31, 0xFA	; 250
     f68:	11 82       	std	Z+1, r1	; 0x01
     f6a:	10 82       	st	Z, r1
     f6c:	ec 81       	ldd	r30, Y+4	; 0x04
     f6e:	fd 81       	ldd	r31, Y+5	; 0x05
     f70:	aa 81       	ldd	r26, Y+2	; 0x02
     f72:	bb 81       	ldd	r27, Y+3	; 0x03
     f74:	30 97       	sbiw	r30, 0x00	; 0
     f76:	e1 f4       	brne	.+56     	; 0xfb0 <OSTaskDel+0xe4>
     f78:	15 96       	adiw	r26, 0x05	; 5
     f7a:	1c 92       	st	X, r1
     f7c:	1e 92       	st	-X, r1
     f7e:	14 97       	sbiw	r26, 0x04	; 4
     f80:	b0 93 30 04 	sts	0x0430, r27	; 0x800430 <OSTCBList+0x1>
     f84:	a0 93 2f 04 	sts	0x042F, r26	; 0x80042f <OSTCBList>
     f88:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <OSTCBFreeList>
     f8c:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <OSTCBFreeList+0x1>
     f90:	9b 83       	std	Y+3, r25	; 0x03
     f92:	8a 83       	std	Y+2, r24	; 0x02
     f94:	d0 93 36 04 	sts	0x0436, r29	; 0x800436 <OSTCBFreeList+0x1>
     f98:	c0 93 35 04 	sts	0x0435, r28	; 0x800435 <OSTCBFreeList>
     f9c:	78 94       	sei
     f9e:	0e 94 d4 05 	call	0xba8	; 0xba8 <OS_Sched>
     fa2:	8f 2d       	mov	r24, r15
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	ff 90       	pop	r15
     fae:	08 95       	ret
     fb0:	b3 83       	std	Z+3, r27	; 0x03
     fb2:	a2 83       	std	Z+2, r26	; 0x02
     fb4:	aa 81       	ldd	r26, Y+2	; 0x02
     fb6:	bb 81       	ldd	r27, Y+3	; 0x03
     fb8:	15 96       	adiw	r26, 0x05	; 5
     fba:	fc 93       	st	X, r31
     fbc:	ee 93       	st	-X, r30
     fbe:	14 97       	sbiw	r26, 0x04	; 4
     fc0:	e3 cf       	rjmp	.-58     	; 0xf88 <OSTaskDel+0xbc>
     fc2:	78 94       	sei
     fc4:	9c e3       	ldi	r25, 0x3C	; 60
     fc6:	f9 2e       	mov	r15, r25
     fc8:	ec cf       	rjmp	.-40     	; 0xfa2 <OSTaskDel+0xd6>
     fca:	8f e3       	ldi	r24, 0x3F	; 63
     fcc:	f8 2e       	mov	r15, r24
     fce:	e9 cf       	rjmp	.-46     	; 0xfa2 <OSTaskDel+0xd6>

00000fd0 <OSTaskDelReq>:
     fd0:	8f 3f       	cpi	r24, 0xFF	; 255
     fd2:	41 f4       	brne	.+16     	; 0xfe4 <OSTaskDelReq+0x14>
     fd4:	f8 94       	cli
     fd6:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <OSTCBCur>
     fda:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <OSTCBCur+0x1>
     fde:	86 85       	ldd	r24, Z+14	; 0x0e
     fe0:	78 94       	sei
     fe2:	08 95       	ret
     fe4:	f8 94       	cli
     fe6:	e8 2f       	mov	r30, r24
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	ee 0f       	add	r30, r30
     fec:	ff 1f       	adc	r31, r31
     fee:	ef 57       	subi	r30, 0x7F	; 127
     ff0:	fa 4f       	sbci	r31, 0xFA	; 250
     ff2:	01 90       	ld	r0, Z+
     ff4:	f0 81       	ld	r31, Z
     ff6:	e0 2d       	mov	r30, r0
     ff8:	8b e0       	ldi	r24, 0x0B	; 11
     ffa:	30 97       	sbiw	r30, 0x00	; 0
     ffc:	89 f3       	breq	.-30     	; 0xfe0 <OSTaskDelReq+0x10>
     ffe:	8e e3       	ldi	r24, 0x3E	; 62
    1000:	86 87       	std	Z+14, r24	; 0x0e
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	ed cf       	rjmp	.-38     	; 0xfe0 <OSTaskDelReq+0x10>

00001006 <OSTimeDly>:
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	11 f0       	breq	.+4      	; 0x100e <OSTimeDly+0x8>
    100a:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <OSTimeDly.part.0>
    100e:	08 95       	ret

00001010 <OSTimeDlyHMSM>:
    1010:	cf 92       	push	r12
    1012:	df 92       	push	r13
    1014:	ef 92       	push	r14
    1016:	ff 92       	push	r15
    1018:	81 11       	cpse	r24, r1
    101a:	0d c0       	rjmp	.+26     	; 0x1036 <OSTimeDlyHMSM+0x26>
    101c:	61 11       	cpse	r22, r1
    101e:	0b c0       	rjmp	.+22     	; 0x1036 <OSTimeDlyHMSM+0x26>
    1020:	41 11       	cpse	r20, r1
    1022:	0c c0       	rjmp	.+24     	; 0x103c <OSTimeDlyHMSM+0x2c>
    1024:	21 15       	cp	r18, r1
    1026:	31 05       	cpc	r19, r1
    1028:	61 f4       	brne	.+24     	; 0x1042 <OSTimeDlyHMSM+0x32>
    102a:	84 e5       	ldi	r24, 0x54	; 84
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	df 90       	pop	r13
    1032:	cf 90       	pop	r12
    1034:	08 95       	ret
    1036:	6c 33       	cpi	r22, 0x3C	; 60
    1038:	08 f0       	brcs	.+2      	; 0x103c <OSTimeDlyHMSM+0x2c>
    103a:	4f c0       	rjmp	.+158    	; 0x10da <OSTimeDlyHMSM+0xca>
    103c:	4c 33       	cpi	r20, 0x3C	; 60
    103e:	08 f0       	brcs	.+2      	; 0x1042 <OSTimeDlyHMSM+0x32>
    1040:	4e c0       	rjmp	.+156    	; 0x10de <OSTimeDlyHMSM+0xce>
    1042:	28 3e       	cpi	r18, 0xE8	; 232
    1044:	93 e0       	ldi	r25, 0x03	; 3
    1046:	39 07       	cpc	r19, r25
    1048:	08 f0       	brcs	.+2      	; 0x104c <OSTimeDlyHMSM+0x3c>
    104a:	4b c0       	rjmp	.+150    	; 0x10e2 <OSTimeDlyHMSM+0xd2>
    104c:	f9 01       	movw	r30, r18
    104e:	58 2f       	mov	r21, r24
    1050:	26 2f       	mov	r18, r22
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	ac e3       	ldi	r26, 0x3C	; 60
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__umulhisi3>
    105c:	6b 01       	movw	r12, r22
    105e:	7c 01       	movw	r14, r24
    1060:	c4 0e       	add	r12, r20
    1062:	d1 1c       	adc	r13, r1
    1064:	e1 1c       	adc	r14, r1
    1066:	f1 1c       	adc	r15, r1
    1068:	25 2f       	mov	r18, r21
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	a0 e1       	ldi	r26, 0x10	; 16
    106e:	be e0       	ldi	r27, 0x0E	; 14
    1070:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__umulhisi3>
    1074:	a7 01       	movw	r20, r14
    1076:	96 01       	movw	r18, r12
    1078:	26 0f       	add	r18, r22
    107a:	37 1f       	adc	r19, r23
    107c:	48 1f       	adc	r20, r24
    107e:	59 1f       	adc	r21, r25
    1080:	a4 e6       	ldi	r26, 0x64	; 100
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__muluhisi3>
    1088:	6b 01       	movw	r12, r22
    108a:	7c 01       	movw	r14, r24
    108c:	9f 01       	movw	r18, r30
    108e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__umulhisi3>
    1092:	6c 50       	subi	r22, 0x0C	; 12
    1094:	7e 4f       	sbci	r23, 0xFE	; 254
    1096:	8f 4f       	sbci	r24, 0xFF	; 255
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	28 ee       	ldi	r18, 0xE8	; 232
    109c:	33 e0       	ldi	r19, 0x03	; 3
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	0e 94 bf 08 	call	0x117e	; 0x117e <__udivmodsi4>
    10a6:	d7 01       	movw	r26, r14
    10a8:	c6 01       	movw	r24, r12
    10aa:	82 0f       	add	r24, r18
    10ac:	93 1f       	adc	r25, r19
    10ae:	a4 1f       	adc	r26, r20
    10b0:	b5 1f       	adc	r27, r21
    10b2:	7d 01       	movw	r14, r26
    10b4:	0e 94 03 08 	call	0x1006	; 0x1006 <OSTimeDly>
    10b8:	e1 14       	cp	r14, r1
    10ba:	f1 04       	cpc	r15, r1
    10bc:	11 f4       	brne	.+4      	; 0x10c2 <OSTimeDlyHMSM+0xb2>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	b5 cf       	rjmp	.-150    	; 0x102c <OSTimeDlyHMSM+0x1c>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e8       	ldi	r25, 0x80	; 128
    10c6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <OSTimeDly.part.0>
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e8       	ldi	r25, 0x80	; 128
    10ce:	0e 94 2f 06 	call	0xc5e	; 0xc5e <OSTimeDly.part.0>
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	e8 1a       	sub	r14, r24
    10d6:	f1 08       	sbc	r15, r1
    10d8:	ef cf       	rjmp	.-34     	; 0x10b8 <OSTimeDlyHMSM+0xa8>
    10da:	81 e5       	ldi	r24, 0x51	; 81
    10dc:	a7 cf       	rjmp	.-178    	; 0x102c <OSTimeDlyHMSM+0x1c>
    10de:	82 e5       	ldi	r24, 0x52	; 82
    10e0:	a5 cf       	rjmp	.-182    	; 0x102c <OSTimeDlyHMSM+0x1c>
    10e2:	83 e5       	ldi	r24, 0x53	; 83
    10e4:	a3 cf       	rjmp	.-186    	; 0x102c <OSTimeDlyHMSM+0x1c>

000010e6 <main>:

}

int main( void )
{
 robo_Setup(); /* initialize HAL for RoboKar */
    10e6:	0e 94 be 02 	call	0x57c	; 0x57c <robo_Setup>
 OSInit(); /* initialize UCOS-II kernel */
    10ea:	0e 94 0c 07 	call	0xe18	; 0xe18 <OSInit>

 robo_motorSpeed(STOP_SPEED, STOP_SPEED); /* Stop the robot, value STOP_SPEED == 0 */
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <robo_motorSpeed>
 myrobot.rspeed = STOP_SPEED; /* Initialize myrobot states */
    10fa:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <myrobot+0x1>
    10fe:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <myrobot>
 myrobot.lspeed = STOP_SPEED;
    1102:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <myrobot+0x3>
    1106:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <myrobot+0x2>
 myrobot.obstacle = 0; /* No collisioin */
    110a:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <myrobot+0x4>

 OSTaskCreate(TaskStart, /* create TaskStart Task */
    110e:	21 e0       	ldi	r18, 0x01	; 1
    1110:	4e e9       	ldi	r20, 0x9E	; 158
    1112:	53 e0       	ldi	r21, 0x03	; 3
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	8a ee       	ldi	r24, 0xEA	; 234
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <OSTaskCreate>
 (void *)0,
 (void *)&TaskStartStk[TASK_STK_SZ - 1],
 TASK_START_PRIO);
 robo_Honk(); robo_wait4goPress(); /* Wait for to GO */
    1120:	0e 94 84 02 	call	0x508	; 0x508 <robo_Honk>
    1124:	0e 94 aa 02 	call	0x554	; 0x554 <robo_wait4goPress>
 OSStart(); /* Start multitasking */
    1128:	0e 94 70 05 	call	0xae0	; 0xae0 <OSStart>
    112c:	ff cf       	rjmp	.-2      	; 0x112c <main+0x46>

0000112e <__udivmodhi4>:
    112e:	aa 1b       	sub	r26, r26
    1130:	bb 1b       	sub	r27, r27
    1132:	51 e1       	ldi	r21, 0x11	; 17
    1134:	07 c0       	rjmp	.+14     	; 0x1144 <__udivmodhi4_ep>

00001136 <__udivmodhi4_loop>:
    1136:	aa 1f       	adc	r26, r26
    1138:	bb 1f       	adc	r27, r27
    113a:	a6 17       	cp	r26, r22
    113c:	b7 07       	cpc	r27, r23
    113e:	10 f0       	brcs	.+4      	; 0x1144 <__udivmodhi4_ep>
    1140:	a6 1b       	sub	r26, r22
    1142:	b7 0b       	sbc	r27, r23

00001144 <__udivmodhi4_ep>:
    1144:	88 1f       	adc	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	5a 95       	dec	r21
    114a:	a9 f7       	brne	.-22     	; 0x1136 <__udivmodhi4_loop>
    114c:	80 95       	com	r24
    114e:	90 95       	com	r25
    1150:	bc 01       	movw	r22, r24
    1152:	cd 01       	movw	r24, r26
    1154:	08 95       	ret

00001156 <__divmodhi4>:
    1156:	97 fb       	bst	r25, 7
    1158:	07 2e       	mov	r0, r23
    115a:	16 f4       	brtc	.+4      	; 0x1160 <__divmodhi4+0xa>
    115c:	00 94       	com	r0
    115e:	07 d0       	rcall	.+14     	; 0x116e <__divmodhi4_neg1>
    1160:	77 fd       	sbrc	r23, 7
    1162:	09 d0       	rcall	.+18     	; 0x1176 <__divmodhi4_neg2>
    1164:	0e 94 97 08 	call	0x112e	; 0x112e <__udivmodhi4>
    1168:	07 fc       	sbrc	r0, 7
    116a:	05 d0       	rcall	.+10     	; 0x1176 <__divmodhi4_neg2>
    116c:	3e f4       	brtc	.+14     	; 0x117c <__divmodhi4_exit>

0000116e <__divmodhi4_neg1>:
    116e:	90 95       	com	r25
    1170:	81 95       	neg	r24
    1172:	9f 4f       	sbci	r25, 0xFF	; 255
    1174:	08 95       	ret

00001176 <__divmodhi4_neg2>:
    1176:	70 95       	com	r23
    1178:	61 95       	neg	r22
    117a:	7f 4f       	sbci	r23, 0xFF	; 255

0000117c <__divmodhi4_exit>:
    117c:	08 95       	ret

0000117e <__udivmodsi4>:
    117e:	a1 e2       	ldi	r26, 0x21	; 33
    1180:	1a 2e       	mov	r1, r26
    1182:	aa 1b       	sub	r26, r26
    1184:	bb 1b       	sub	r27, r27
    1186:	fd 01       	movw	r30, r26
    1188:	0d c0       	rjmp	.+26     	; 0x11a4 <__udivmodsi4_ep>

0000118a <__udivmodsi4_loop>:
    118a:	aa 1f       	adc	r26, r26
    118c:	bb 1f       	adc	r27, r27
    118e:	ee 1f       	adc	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	a2 17       	cp	r26, r18
    1194:	b3 07       	cpc	r27, r19
    1196:	e4 07       	cpc	r30, r20
    1198:	f5 07       	cpc	r31, r21
    119a:	20 f0       	brcs	.+8      	; 0x11a4 <__udivmodsi4_ep>
    119c:	a2 1b       	sub	r26, r18
    119e:	b3 0b       	sbc	r27, r19
    11a0:	e4 0b       	sbc	r30, r20
    11a2:	f5 0b       	sbc	r31, r21

000011a4 <__udivmodsi4_ep>:
    11a4:	66 1f       	adc	r22, r22
    11a6:	77 1f       	adc	r23, r23
    11a8:	88 1f       	adc	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	1a 94       	dec	r1
    11ae:	69 f7       	brne	.-38     	; 0x118a <__udivmodsi4_loop>
    11b0:	60 95       	com	r22
    11b2:	70 95       	com	r23
    11b4:	80 95       	com	r24
    11b6:	90 95       	com	r25
    11b8:	9b 01       	movw	r18, r22
    11ba:	ac 01       	movw	r20, r24
    11bc:	bd 01       	movw	r22, r26
    11be:	cf 01       	movw	r24, r30
    11c0:	08 95       	ret

000011c2 <__umulhisi3>:
    11c2:	a2 9f       	mul	r26, r18
    11c4:	b0 01       	movw	r22, r0
    11c6:	b3 9f       	mul	r27, r19
    11c8:	c0 01       	movw	r24, r0
    11ca:	a3 9f       	mul	r26, r19
    11cc:	70 0d       	add	r23, r0
    11ce:	81 1d       	adc	r24, r1
    11d0:	11 24       	eor	r1, r1
    11d2:	91 1d       	adc	r25, r1
    11d4:	b2 9f       	mul	r27, r18
    11d6:	70 0d       	add	r23, r0
    11d8:	81 1d       	adc	r24, r1
    11da:	11 24       	eor	r1, r1
    11dc:	91 1d       	adc	r25, r1
    11de:	08 95       	ret

000011e0 <__muluhisi3>:
    11e0:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__umulhisi3>
    11e4:	a5 9f       	mul	r26, r21
    11e6:	90 0d       	add	r25, r0
    11e8:	b4 9f       	mul	r27, r20
    11ea:	90 0d       	add	r25, r0
    11ec:	a4 9f       	mul	r26, r20
    11ee:	80 0d       	add	r24, r0
    11f0:	91 1d       	adc	r25, r1
    11f2:	11 24       	eor	r1, r1
    11f4:	08 95       	ret

000011f6 <_exit>:
    11f6:	f8 94       	cli

000011f8 <__stop_program>:
    11f8:	ff cf       	rjmp	.-2      	; 0x11f8 <__stop_program>
